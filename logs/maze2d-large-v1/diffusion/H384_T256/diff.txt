diff --git a/diffuser/azure/Dockerfile b/diffuser/azure/Dockerfile
deleted file mode 100644
index 1e96d27..0000000
--- a/diffuser/azure/Dockerfile
+++ /dev/null
@@ -1,95 +0,0 @@
-# We need the CUDA base dockerfile to enable GPU rendering
-# on hosts with GPUs.
-# The image below is a pinned version of nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04 (from Jan 2018)
-# If updating the base image, be sure to test on GPU since it has broken in the past.
-FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu16.04
-
-SHELL ["/bin/bash", "-c"]
-
-##########################################################
-### System dependencies
-##########################################################
-
-RUN apt-get update -q \
-    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
-    cmake \
-    curl \
-    git \
-    libav-tools \
-    libgl1-mesa-dev \
-    libgl1-mesa-glx \
-    libglew-dev \
-    libosmesa6-dev \
-    net-tools \
-    software-properties-common \
-    swig \
-    unzip \
-    vim \
-    wget \
-    xpra \
-    xserver-xorg-dev \
-    zlib1g-dev \
-    && apt-get clean \
-    && rm -rf /var/lib/apt/lists/*
-
-ENV LANG C.UTF-8
-
-COPY ./azure/files/Xdummy /usr/local/bin/Xdummy
-RUN chmod +x /usr/local/bin/Xdummy
-
-# Workaround for https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-375/+bug/1674677
-COPY ./azure/files/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json
-COPY ./environment.yml /opt/environment.yml
-
-ENV LD_LIBRARY_PATH /usr/local/nvidia/lib64:${LD_LIBRARY_PATH}
-
-##########################################################
-### gsutil
-##########################################################
-RUN curl -sSL https://sdk.cloud.google.com | bash
-
-ENV PATH $PATH:/root/google-cloud-sdk/bin
-
-##########################################################
-### MuJoCo
-##########################################################
-# Note: ~ is an alias for /root
-RUN mkdir -p /root/.mujoco \
-    && wget https://www.roboti.us/download/mujoco200_linux.zip -O mujoco.zip \
-    && unzip mujoco.zip -d /root/.mujoco \
-    && rm mujoco.zip
-RUN mkdir -p /root/.mujoco \
-    && wget https://www.roboti.us/download/mjpro150_linux.zip -O mujoco.zip \
-    && unzip mujoco.zip -d /root/.mujoco \
-    && rm mujoco.zip
-RUN ln -s /root/.mujoco/mujoco200_linux /root/.mujoco/mujoco200
-ENV LD_LIBRARY_PATH /root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}
-ENV LD_LIBRARY_PATH /root/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}
-ENV LD_LIBRARY_PATH /root/.mujoco/mujoco200_linux/bin:${LD_LIBRARY_PATH}
-COPY ./azure/files/mjkey.txt /root/.mujoco
-
-##########################################################
-### Example Python Installation
-##########################################################
-ENV PATH /opt/conda/bin:$PATH
-RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh && \
-    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \
-    rm /tmp/miniconda.sh && \
-    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
-    echo ". /opt/conda/etc/profile.d/conda.sh" >> /etc/bash.bashrc
-
-RUN conda update -y --name base conda && conda clean --all -y
-
-RUN git config --global url."https://".insteadOf git://
-RUN conda env create -f /opt/environment.yml
-ENV PATH /opt/conda/envs/diffusion/bin:$PATH
-
-##########################################################
-### gym sometimes has this patchelf issue
-##########################################################
-RUN curl -o /usr/local/bin/patchelf https://s3-us-west-2.amazonaws.com/openai-sci-artifacts/manual-builds/patchelf_0.9_amd64.elf \
-    && chmod +x /usr/local/bin/patchelf
-# RUN pip install gym[all]==0.12.5
-
-RUN echo "source activate /opt/conda/envs/diffusion && export PYTHONPATH=$PYTHONPATH:/home/code && export CUDA_VISIBLE_DEVICES=0" >> ~/.bashrc
-RUN source ~/.bashrc
diff --git a/diffuser/azure/config.py b/diffuser/azure/config.py
deleted file mode 100644
index 9ebda44..0000000
--- a/diffuser/azure/config.py
+++ /dev/null
@@ -1,52 +0,0 @@
-import os
-
-def get_docker_username():
-   import subprocess
-   import shlex
-   ps = subprocess.Popen(shlex.split('docker info'), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-   output = subprocess.check_output(shlex.split("sed '/Username:/!d;s/.* //'"), stdin=ps.stdout)
-   username = output.decode('utf-8').replace('\n', '')
-   print(f'[ azure/config ] Grabbed username from `docker info`: {username}')
-   return username
-
-## /path/to/diffuser/azure
-CWD = os.path.dirname(__file__)
-## /path/to/diffuser
-MODULE_PATH = os.path.dirname(CWD)
-
-CODE_DIRS_TO_MOUNT = [
-]
-NON_CODE_DIRS_TO_MOUNT = [
-   dict(
-      local_dir=MODULE_PATH,
-      mount_point='/home/code',
-   ),
-]
-REMOTE_DIRS_TO_MOUNT = [
-    dict(
-        local_dir='/doodad_tmp/',
-        mount_point='/doodad_tmp/',
-    ),
-]
-LOCAL_LOG_DIR = '/tmp'
-
-DEFAULT_AZURE_GPU_MODEL = 'nvidia-tesla-t4'
-DEFAULT_AZURE_INSTANCE_TYPE = 'Standard_DS1_v2'
-DEFAULT_AZURE_REGION = 'eastus'
-DEFAULT_AZURE_RESOURCE_GROUP = 'diff'
-DEFAULT_AZURE_VM_NAME = 'diff-vm'
-DEFAULT_AZURE_VM_PASSWORD = 'Azure1'
-
-DOCKER_USERNAME = os.environ.get('DOCKER_USERNAME', get_docker_username())
-DEFAULT_DOCKER = f'docker.io/{DOCKER_USERNAME}/diffuser:latest'
-
-print(f'[ azure/config ] Local dir: {MODULE_PATH}')
-print(f'[ azure/config ] Default GPU model: {DEFAULT_AZURE_GPU_MODEL}')
-print(f'[ azure/config ] Default Docker image: {DEFAULT_DOCKER}')
-
-AZ_SUB_ID = os.environ['AZURE_SUBSCRIPTION_ID']
-AZ_CLIENT_ID = os.environ['AZURE_CLIENT_ID']
-AZ_TENANT_ID = os.environ['AZURE_TENANT_ID']
-AZ_SECRET = os.environ['AZURE_CLIENT_SECRET']
-AZ_CONTAINER = os.environ['AZURE_STORAGE_CONTAINER']
-AZ_CONN_STR = os.environ['AZURE_STORAGE_CONNECTION_STRING']
diff --git a/diffuser/azure/download.sh b/diffuser/azure/download.sh
deleted file mode 100755
index ce7baef..0000000
--- a/diffuser/azure/download.sh
+++ /dev/null
@@ -1,7 +0,0 @@
-DOWNLOAD_DIR=bin
-mkdir $DOWNLOAD_DIR
-wget https://aka.ms/downloadazcopy-v10-linux -O $DOWNLOAD_DIR/download.tar.gz
-tar -xvf $DOWNLOAD_DIR/download.tar.gz --one-top-level=$DOWNLOAD_DIR
-mv $DOWNLOAD_DIR/*/azcopy $DOWNLOAD_DIR
-rm $DOWNLOAD_DIR/download.tar.gz
-rm -r $DOWNLOAD_DIR/azcopy_linux*
diff --git a/diffuser/azure/files/10_nvidia.json b/diffuser/azure/files/10_nvidia.json
deleted file mode 100644
index 2bfcca0..0000000
--- a/diffuser/azure/files/10_nvidia.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "file_format_version" : "1.0.0",
-    "ICD" : {
-        "library_path" : "libEGL_nvidia.so.0"
-    }
-}
diff --git a/diffuser/azure/files/Xdummy b/diffuser/azure/files/Xdummy
deleted file mode 100644
index 1ffddfa..0000000
--- a/diffuser/azure/files/Xdummy
+++ /dev/null
@@ -1,1955 +0,0 @@
-#!/bin/sh
-# ----------------------------------------------------------------------
-#    Copyright (C) 2005-2011 Karl J. Runge <runge@karlrunge.com> 
-#    All rights reserved.
-# 
-# This file is part of Xdummy.
-# 
-# Xdummy is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or (at
-# your option) any later version.
-# 
-# Xdummy is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with Xdummy; if not, write to the Free Software
-# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA
-# or see <http://www.gnu.org/licenses/>.
-# ----------------------------------------------------------------------
-# 
-# 
-# Xdummy: an LD_PRELOAD hack to run a stock Xorg(1) or XFree86(1) server
-# with the "dummy" video driver to make it avoid Linux VT switching, etc.
-#
-# Run "Xdummy -help" for more info.
-#
-install=""
-uninstall=""
-runit=1
-prconf=""
-notweak=""
-root=""
-nosudo=""
-xserver=""
-geom=""
-nomodelines=""
-depth=""
-debug=""
-strace=""
-cmdline_config=""
-
-PATH=$PATH:/bin:/usr/bin
-export PATH
-
-program=`basename "$0"`
-
-help () {
-	${PAGER:-more} << END
-$program:
-
-    A hack to run a stock Xorg(1) or XFree86(1) X server with the "dummy"
-    (RAM-only framebuffer) video driver such that it AVOIDS the Linux VT
-    switching, opening device files in /dev, keyboard and mouse conflicts,
-    and other problems associated with the normal use of "dummy".
-
-    In other words, it tries to make Xorg/XFree86 with the "dummy"
-    device driver act more like Xvfb(1).
-
-    The primary motivation for the Xdummy script is to provide a virtual X
-    server for x11vnc but with more features than Xvfb (or Xvnc); however
-    it could be used for other reasons (e.g. better automated testing
-    than with Xvfb.)  One nice thing is the dummy server supports RANDR
-    dynamic resizing while Xvfb does not.
-
-    So, for example, x11vnc+Xdummy terminal services are a little better
-    than x11vnc+Xvfb.
-
-    To achieve this, while running the real Xserver $program intercepts
-    system and library calls via the LD_PRELOAD method and modifies
-    the behavior to make it work correctly (e.g. avoid the VT stuff.)
-    LD_PRELOAD tricks are usually "clever hacks" and so might not work
-    in all situations or break when something changes.
-
-    WARNING: Take care in using Xdummy, although it never has it is
-    possible that it could damage hardware.  One can use the -prconf
-    option to have it print out the xorg.conf config that it would use
-    and then inspect it carefully before actually using it.
-
-    This program no longer needs to be run as root as of 12/2009.
-    However, if there are problems for certain situations (usually older
-    servers) it may perform better if run as root (use the -root option.)
-    When running as root remember the previous paragraph and that Xdummy
-    comes without any warranty.
-
-    gcc/cc and other build tools are required for this script to be able
-    to compile the LD_PRELOAD shared object.  Be sure they are installed
-    on the system.  See -install and -uninstall described below.
-
-    Your Linux distribution may not install the dummy driver by default,
-    e.g:
-
-        /usr/lib/xorg/modules/drivers/dummy_drv.so
-    
-    some have it in a package named xserver-xorg-video-dummy you that
-    need to install.
-
-Usage:
-
-	$program <${program}-args> <Xserver-args>
-
-	(actually, the arguments can be supplied in any order.)
-
-Examples:
-
-	$program -install
-
-	$program :1
-
-	$program -debug :1
-
-	$program -tmpdir ~/mytmp :1 -nolisten tcp
-
-startx example:
-
-	startx -e bash -- $program :2 -depth 16
-
-	(if startx needs to be run as root, you can su(1) to a normal
-	user in the bash shell and then launch ~/.xinitrc or ~/.xsession,
-	gnome-session, startkde, startxfce4, etc.)
-
-xdm example:
-
-	xdm -config /usr/local/dummy/xdm-config -nodaemon
-
-	where the xdm-config file has line:
-
-	     DisplayManager.servers:         /usr/local/dummy/Xservers
-
-	and /usr/local/dummy/Xservers has lines:
-
-	     :1 local /usr/local/dummy/Xdummy :1 -debug
-	     :2 local /usr/local/dummy/Xdummy :2 -debug
-
-        (-debug is optional)
-
-gdm/kdm example:
-
-	TBD.
-
-Config file:
-
-	If the file $program.cfg exists it will be sourced as shell
-	commands.  Usually one will set some variables this way.
-	To disable sourcing, supply -nocfg or set XDUMMY_NOCFG=1.
-
-Root permission and x11vnc:
-
-	Update: as of 12/2009 this program no longer must be run as root.
-	So try it as non-root before running it as root and/or the
-	following schemes.
-
-	In some circumstances X server program may need to be run as root.
-	If so, one could run x11vnc as root with -unixpw (it switches
-	to the user that logs in) and that may be OK, some other ideas:
-
-	- add this to sudo via visudo:
-
-		ALL ALL = NOPASSWD: /usr/local/bin/Xdummy
-
-	- use this little suid wrapper:
-/* 
- * xdummy.c
- *
-   cc -o ./xdummy xdummy.c
-   sudo cp ./xdummy /usr/local/bin/xdummy
-   sudo chown root:root /usr/local/bin/xdummy
-   sudo chmod u+s /usr/local/bin/xdummy
- *
- */
-#include <unistd.h>
-#include <stdlib.h>
-#include <sys/types.h>
-#include <stdio.h>
-
-int main (int argc, char *argv[]) {
-	extern char **environ;
-	char str[100];
-	sprintf(str, "XDUMMY_UID=%d", (int) getuid());
-	putenv(str);
-	setuid(0);  
-	setgid(0);
-	execv("/usr/local/bin/Xdummy", argv); 
-	exit(1);
-	return 1;
-}
-
-
-Options:
-
-    ${program}-args:
-
-	-install	Compile the LD_PRELOAD shared object and install it
-			next to the $program script file as:
-
-			  $0.so
-
-			When that file exists it is used as the LD_PRELOAD
-			shared object without recompiling.  Otherwise,
-			each time $program is run the LD_PRELOAD shared
-			object is compiled as a file in /tmp (or -tmpdir)
-
-			If you set the environment variable
-			INTERPOSE_GETUID=1 when building, then when
-			$program is run as an ordinary user, the shared
-			object will interpose getuid() calls and pretend
-			to be root.  Otherwise it doesn't pretend to
-			be root.
-
-			You can also set the CFLAGS environment variable
-			to anything else you want on the compile cmdline.
-
-	-uninstall	Remove the file:
-
-			  $0.so
-
-			The LD_PRELOAD shared object will then be compiled
-			each time this program is run.
-
-	The X server is not started under -install, -uninstall, or -prconf.
-
-
-	:N		The DISPLAY (e.g. :15) is often the first
-			argument.  It is passed to the real X server and
-			also used by the Xdummy script as an identifier.
-
-	-geom geom1[,geom2...]	Take the geometry (e.g. 1024x768) or list
-			of geometries and insert them into the Screen
-			section of the tweaked X server config file.
-			Use this to have a different geometry than the
-			one(s) in the system config file.
-
-			The option -geometry can be used instead of -geom;
-			x11vnc calls Xdummy and Xvfb this way.
-
-	-nomodelines	When you specify -geom/-geometry, $program will
-			create Modelines for each geometry and put them
-			in the Monitor section.  If you do not want this
-			then supply -nomodelines.
-
-	-depth n	Use pixel color depth n (e.g. 8, 16, or 24). This
-			makes sure the X config file has a Screen.Display
-			subsection of this depth.  Note this option is
-			ALSO passed to the X server.
-
-	-DEPTH n	Same as -depth, except not passed to X server.
-
-	-tmpdir dir	Specify a temporary directory, owned by you and
-			only writable by you.  This is used in place of
-			/tmp/Xdummy.\$USER/..  to place the $program.so
-			shared object, tweaked config files, etc.
-
-	-nonroot	Run in non-root mode (working 12/2009, now default)
-
-	-root		Run as root (may still be needed in some
-			environments.)  Same as XDUMMY_RUN_AS_ROOT=1.
-
-	-nosudo		Do not try to use sudo(1) when re-running as root,
-			use su(1) instead.
-
-	-xserver path	Specify the path to the Xserver to use.  Default
-			is to try "Xorg" first and then "XFree86".  If
-			those are not in \$PATH, it tries these locations:
-				/usr/bin/Xorg
-				/usr/X11R6/bin/Xorg
-				/usr/X11R6/bin/XFree86
-
-	-n		Do not run the command to start the X server,
-			just show the command that $program would run.
-			The LD_PRELOAD shared object will be built,
-			if needed.  Also note any XDUMMY* environment
-			variables that need to be set.
-
-	-prconf		Print, to stdout, the tweaked Xorg/XFree86
-			config file (-config and -xf86config server
-			options, respectively.)  The Xserver is not
-			started.
-
-	-notweak	Do not tweak (modify) the Xorg/XFree86 config file
-			(system or server command line) at all.  The -geom
-			and similar config file modifications are ignored.
-
-			It is up to you to make sure it is a working
-			config file (e.g. "dummy" driver, etc.)
-			Perhaps you want to use a file based on the
-			-prconf output.
-
-	-nocfg		Do not try to source $program.cfg even if it
-			exists.  Same as setting XDUMMY_NOCFG=1.
-
-	-debug		Extra debugging output.
-
-	-strace		strace(1) the Xserver process (for troubleshooting.)
-	-ltrace		ltrace(1) instead of strace (can be slow.)
-
-	-h, -help	Print out this help.
-
-
-    Xserver-args:
-
-	Most of the Xorg and XFree86 options will work and are simply
-	passed along if you supply them.  Important ones that may be
-	supplied if missing:
-
-	:N		X Display number for server to use.
-
-	vtNN		Linux virtual terminal (VT) to use (a VT is currently
-			still used, just not switched to and from.)
-
-	-config file		Driver "dummy" tweaked config file, a
-	-xf86config file	number of settings are tweaked besides Driver.
-
-	If -config/-xf86config is not given, the system one
-	(e.g. /etc/X11/xorg.conf) is used.  If the system one cannot be
-	found, a built-in one is used.	Any settings in the config file
-	that are not consistent with "dummy" mode will be overwritten
-	(unless -notweak is specified.)
-
-	Use -config xdummy-builtin to force usage of the builtin config.
-
-	If "file" is only a basename (e.g. "xorg.dummy.conf") with no /'s,
-	then no tweaking of it is done: the X server will look for that
-	basename via its normal search algorithm.  If the found file does
-	not refer to the "dummy" driver, etc, then the X server will fail.
-
-	You can set the env. var. XDUMMY_EXTRA_SERVER_ARGS to hold some
-	extra Xserver-args too. (Useful for cfg file.)
-
-Notes:
-
-    The Xorg/XFree86 "dummy" driver is currently undocumented.  It works
-    well in this mode, but it is evidently not intended for end-users.
-    So it could be removed or broken at any time.
-
-    If the display Xserver-arg (e.g. :1) is not given, or ":" is given
-    that indicates $program should try to find a free one (based on
-    tcp ports.)
-
-    If the display virtual terminal, VT, (e.g. vt9) is not given that
-    indicates $program should try to find a free one (or guess a high one.) 
-    
-    This program is not completely secure WRT files in /tmp (but it tries
-    to a good degree.)  Better is to use the -tmpdir option to supply a
-    directory only writable by you.  Even better is to get rid of users
-    on the local machine you do not trust :-)
-
-    Set XDUMMY_SET_XV=1 to turn on debugging output for this script.
-
-END
-}
-
-warn() {
-	echo "$*" 1>&2
-}
-
-if [ "X$XDUMMY_SET_XV" != "X" ]; then
-	set -xv
-fi
-
-if [ "X$XDUMMY_UID" = "X" ]; then
-	XDUMMY_UID=`id -u`
-	export XDUMMY_UID
-fi
-if [ "X$XDUMMY_UID" = "X0" ]; then
-	if [ "X$SUDO_UID" != "X" ]; then
-		XDUMMY_UID=$SUDO_UID
-		export XDUMMY_UID
-	fi
-fi
-
-# check if root=1 first:
-#
-if [ "X$XDUMMY_RUN_AS_ROOT" = "X1" ]; then
-	root=1
-fi
-for arg in $*
-do
-	if [ "X$arg" = "X-nonroot" ]; then
-		root=""
-	elif [ "X$arg" = "X-root" ]; then
-		root=1
-	elif [ "X$arg" = "X-nocfg" ]; then
-		XDUMMY_NOCFG=1
-		export XDUMMY_NOCFG
-	fi
-done
-
-if [ "X$XDUMMY_NOCFG" = "X" -a -f "$0.cfg" ]; then
-	. "$0.cfg"
-fi
-
-# See if it really needs to be run as root:
-#
-if [ "X$XDUMMY_SU_EXEC" = "X" -a "X$root" = "X1" -a "X`id -u`" != "X0"  ]; then
-	# this is to prevent infinite loop in case su/sudo doesn't work:
-	XDUMMY_SU_EXEC=1
-	export XDUMMY_SU_EXEC
-
-	dosu=1
-	nosudo=""
-
-	for arg in $*
-	do
-		if [ "X$arg" = "X-nonroot" ]; then
-			dosu=""
-		elif [ "X$arg" = "X-nosudo" ]; then
-			nosudo="1"
-		elif [ "X$arg" = "X-help" ]; then
-			dosu=""
-		elif [ "X$arg" = "X-h" ]; then
-			dosu=""
-		elif [ "X$arg" = "X-install" ]; then
-			dosu=""
-		elif [ "X$arg" = "X-uninstall" ]; then
-			dosu=""
-		elif [ "X$arg" = "X-n" ]; then
-			dosu=""
-		elif [ "X$arg" = "X-prconf" ]; then
-			dosu=""
-		fi
-	done
-	if [ $dosu ]; then
-		# we need to restart it with su/sudo:
-		if type sudo > /dev/null 2>&1; then
-			:
-		else
-			nosudo=1
-		fi
-		if [ "X$nosudo" = "X" ]; then
-			warn "$program: supply the sudo password to restart as root:"
-			if [ "X$XDUMMY_UID" != "X" ]; then
-				exec sudo $0 -uid $XDUMMY_UID "$@"
-			else
-				exec sudo $0 "$@"
-			fi
-		else
-			warn "$program: supply the root password to restart as root:"
-			if [ "X$XDUMMY_UID" != "X" ]; then
-				exec su -c "$0 -uid $XDUMMY_UID $*"
-			else
-				exec su -c "$0 $*"
-			fi
-		fi
-		# DONE:
-		exit
-	fi
-fi
-
-# This will hold the X display, e.g. :20
-#
-disp=""
-args=""
-cmdline_config=""
-
-# Process Xdummy args:
-#
-while [ "X$1" != "X" ]
-do
-    if [ "X$1" = "X-config" -o "X$1" = "X-xf86config" ]; then
-    	cmdline_config="$2"
-    fi
-    case $1 in 
-	":"*)	disp=$1
-                ;;
-	"-install") install=1; runit=""
-                ;;
-	"-uninstall") uninstall=1; runit=""
-                ;;
-	"-n")  runit=""
-                ;;
-	"-no") runit=""
-                ;;
-	"-norun") runit=""
-                ;;
-	"-prconf") prconf=1; runit=""
-                ;;
-	"-notweak") notweak=1
-                ;;
-	"-noconf")  notweak=1
-                ;;
-	"-nonroot") root=""
-                ;;
-	"-root")    root=1
-                ;;
-	"-nosudo") nosudo=1
-                ;;
-	"-xserver") xserver="$2"; shift
-                ;;
-	"-uid") XDUMMY_UID="$2"; shift
-		export XDUMMY_UID
-                ;;
-	"-geom")     geom="$2"; shift
-                ;;
-	"-geometry") geom="$2"; shift
-                ;;
-	"-nomodelines") nomodelines=1
-                ;;
-	"-depth") depth="$2"; args="$args -depth $2";
-		  shift
-                ;;
-	"-DEPTH") depth="$2"; shift
-                ;;
-	"-tmpdir") XDUMMY_TMPDIR="$2"; shift
-                ;;
-	"-debug")   debug=1
-                ;;
-	"-nocfg") :
-                ;;
-	"-nodebug") debug=""
-                ;;
-	"-strace") strace=1
-                ;;
-	"-ltrace") strace=2
-                ;;
-	"-h")	 help; exit 0
-                ;;
-	"-help") help; exit 0
-                ;;
-	*)	args="$args $1"
-                ;;
-    esac
-    shift
-done
-
-if [ "X$XDUMMY_EXTRA_SERVER_ARGS" != "X" ]; then
-	args="$args $XDUMMY_EXTRA_SERVER_ARGS"
-fi
-
-# Try to get a username for use in our tmp directory, etc.
-#
-user=""
-if [ X`id -u` = "X0"  ]; then
-	user=root	# this will also be used below for id=0
-elif [ "X$USER" != "X" ]; then
-	user=$USER
-elif [ "X$LOGNAME" != "X" ]; then
-	user=$LOGNAME
-fi
-
-# Keep trying...
-#
-if [ "X$user" = "X" ]; then
-	user=`whoami 2>/dev/null`
-fi
-if [ "X$user" = "X" ]; then
-	user=`basename "$HOME"`
-fi
-if [ "X$user" = "X" -o "X$user" = "X." ]; then
-	user="u$$"
-fi
-
-if [ "X$debug" = "X1" -a "X$runit" != "X" ]; then
-	echo ""
-	echo "/usr/bin/env:"
-	env | egrep -v '^(LS_COLORS|TERMCAP)' | sort
-	echo ""
-fi
-
-# Function to compile the LD_PRELOAD shared object:
-#
-make_so() {
-	# extract code embedded in this script into a tmp C file: 
-	n1=`grep -n '^#code_begin' $0 | head -1 | awk -F: '{print $1}'`
-	n2=`grep -n '^#code_end'   $0 | head -1 | awk -F: '{print $1}'`
-	n1=`expr $n1 + 1`
-	dn=`expr $n2 - $n1`
-
-	tmp=$tdir/Xdummy.$RANDOM$$.c
-	rm -f $tmp
-	if [ -e $tmp -o -h $tmp ]; then
-		warn "$tmp still exists."
-		exit 1
-	fi
-	touch $tmp || exit 1
-	tail -n +$n1 $0 | head -n $dn > $tmp
-
-	# compile it to Xdummy.so:
-	if [ -f "$SO" ]; then
-		mv $SO $SO.$$
-		rm -f $SO.$$
-	fi
-	rm -f $SO
-	touch $SO
-	if [ ! -f "$SO" ]; then
-		SO=$tdir/Xdummy.$user.so
-		warn "warning switching LD_PRELOAD shared object to: $SO"
-	fi
-
-	if [ -f "$SO" ]; then
-		mv $SO $SO.$$
-		rm -f $SO.$$
-	fi
-	rm -f $SO
-
-	# we assume gcc:
-	if [ "X$INTERPOSE_GETUID" = "X1" ]; then
-		CFLAGS="$CFLAGS -DINTERPOSE_GETUID"
-	fi
-	echo "$program:" cc -shared -fPIC $CFLAGS -o $SO $tmp -ldl
-                         cc -shared -fPIC $CFLAGS -o $SO $tmp -ldl
-	rc=$?
-	rm -f $tmp
-	if [ $rc != 0 ]; then
-		warn "$program: cannot build $SO"
-		exit 1
-	fi
-	if [ "X$debug" != "X" -o "X$install" != "X" ]; then
-		warn "$program: created  $SO"
-		ls -l "$SO"
-	fi
-}
-
-# Set tdir to tmp dir for make_so():
-if [ "X$XDUMMY_TMPDIR" != "X" ]; then
-	tdir=$XDUMMY_TMPDIR
-	mkdir -p $tdir
-else
-	tdir="/tmp"
-fi
-
-# Handle -install/-uninstall case:
-SO=$0.so
-if [ "X$install" != "X" -o "X$uninstall" != "X" ]; then
-	if [ -e "$SO" -o -h "$SO" ]; then
-		warn "$program: removing $SO"
-	fi
-	if [ -f "$SO" ]; then
-		mv $SO $SO.$$
-		rm -f $SO.$$
-	fi
-	rm -f $SO
-	if [ -e "$SO" -o -h "$SO" ]; then
-		warn "warning: $SO still exists."
-		exit 1
-	fi
-	if [ $install ]; then
-		make_so
-		if [ ! -f "$SO" ]; then
-			exit 1
-		fi
-	fi
-	exit 0
-fi
-
-# We need a tmp directory for the .so, tweaked config file, and for
-# redirecting filenames we cannot create (under -nonroot)
-#
-tack=""
-if [ "X$XDUMMY_TMPDIR" = "X" ]; then
-	XDUMMY_TMPDIR="/tmp/Xdummy.$user"
-
-	# try to tack on a unique subdir (display number or pid)
-	# to allow multiple instances
-	#
-	if [ "X$disp" != "X" ]; then
-		t0=$disp
-	else
-		t0=$1
-	fi
-	tack=`echo "$t0" | sed -e 's/^.*://'`
-	if echo "$tack" | grep '^[0-9][0-9]*$' > /dev/null; then
-		:
-	else
-		tack=$$
-	fi
-	if [ "X$tack" != "X" ]; then
-		XDUMMY_TMPDIR="$XDUMMY_TMPDIR/$tack"
-	fi
-fi
-
-tmp=$XDUMMY_TMPDIR
-if echo "$tmp" | grep '^/tmp' > /dev/null; then
-	if [ "X$tmp" != "X/tmp" -a "X$tmp" != "X/tmp/" ]; then
-		# clean this subdir of /tmp out, otherwise leave it...
-		rm -rf $XDUMMY_TMPDIR
-		if [ -e $XDUMMY_TMPDIR ]; then
-			warn "$XDUMMY_TMPDIR still exists"
-			exit 1
-		fi
-	fi
-fi
-
-mkdir -p $XDUMMY_TMPDIR
-chmod 700 $XDUMMY_TMPDIR
-if [ "X$tack" != "X" ]; then
-	chmod 700 `dirname "$XDUMMY_TMPDIR"` 2>/dev/null
-fi
-
-# See if we can write something there:
-#
-tfile="$XDUMMY_TMPDIR/test.file"
-touch $tfile
-if [ ! -f "$tfile" ]; then
-	XDUMMY_TMPDIR="/tmp/Xdummy.$$.$USER"
-	warn "warning: setting tmpdir to $XDUMMY_TMPDIR ..."
-	rm -rf $XDUMMY_TMPDIR || exit 1
-	mkdir -p $XDUMMY_TMPDIR || exit 1
-fi
-rm -f $tfile
-
-export XDUMMY_TMPDIR
-
-# Compile the LD_PRELOAD shared object if needed (needs XDUMMY_TMPDIR)
-#
-if [ ! -f "$SO" ]; then
-	SO="$XDUMMY_TMPDIR/Xdummy.so"
-	make_so
-fi
-
-# Decide which X server to use:
-#
-if [ "X$xserver" = "X" ]; then
-	if type Xorg >/dev/null 2>&1; then
-		xserver="Xorg"
-	elif type XFree86 >/dev/null 2>&1; then
-		xserver="XFree86"
-	elif -x /usr/bin/Xorg; then
-		xserver="/usr/bin/Xorg"
-	elif -x /usr/X11R6/bin/Xorg; then
-		xserver="/usr/X11R6/bin/Xorg"
-	elif -x /usr/X11R6/bin/XFree86; then
-		xserver="/usr/X11R6/bin/XFree86"
-	fi
-	if [ "X$xserver" = "X" ]; then
-		# just let it fail below.
-		xserver="/usr/bin/Xorg"
-		warn "$program: cannot locate a stock Xserver... assuming $xserver"
-	fi
-fi
-
-# See if the binary is suid or not readable under -nonroot mode:
-#
-if [ "X$BASH_VERSION" != "X" ]; then
-	xserver_path=`type -p $xserver 2>/dev/null`
-else
-	xserver_path=`type $xserver 2>/dev/null | awk '{print $NF}'`
-fi
-if [ -e "$xserver_path" -a "X$root" = "X" -a "X$runit" != "X" ]; then
-	if [ ! -r $xserver_path -o -u $xserver_path -o -g $xserver_path ]; then
-		# XXX not quite correct with rm -rf $XDUMMY_TMPDIR ...
-		# we keep on a filesystem we know root can write to.
-		base=`basename "$xserver_path"`
-		new="/tmp/$base.$user.bin"
-		if [ -e $new ]; then
-			snew=`ls -l $new          | awk '{print $5}' | grep '^[0-9][0-9]*$'`
-			sold=`ls -l $xserver_path | awk '{print $5}' | grep '^[0-9][0-9]*$'`
-			if [ "X$snew" != "X" -a "X$sold" != "X" -a "X$sold" != "X$snew" ]; then
-				warn "removing different sized copy:"
-				ls -l $new $xserver_path
-				rm -f $new
-			fi
-		fi
-		if [ ! -e $new -o ! -s $new ]; then
-			rm -f $new
-			touch $new || exit 1
-			chmod 700 $new || exit 1
-			if [ ! -r $xserver_path ]; then
-				warn ""
-				warn "NEED TO COPY UNREADABLE $xserver_path to $new as root:"
-				warn ""
-				ls -l $xserver_path 1>&2
-				warn ""
-				warn "This only needs to be done once:"
-				warn "    cat $xserver_path > $new"
-				warn ""
-				nos=$nosudo
-				if type sudo > /dev/null 2>&1; then
-					:
-				else
-					nos=1
-				fi
-				if [ "X$nos" = "X1" ]; then
-					warn "Please supply root passwd to 'su -c'"
-					su -c "cat $xserver_path > $new"
-				else
-					warn "Please supply the sudo passwd if asked:"
-					sudo /bin/sh -c "cat $xserver_path > $new"
-				fi
-			else
-				warn ""
-				warn "COPYING SETUID $xserver_path to $new"
-				warn ""
-				ls -l $xserver_path 1>&2
-				warn ""
-				cat $xserver_path > $new
-			fi
-			ls -l $new
-			if [ -s $new ]; then
-				:
-			else
-				rm -f $new
-				ls -l $new
-				exit 1
-			fi
-			warn ""
-			warn "Please restart Xdummy now."
-			exit 0
-		fi
-		if [ ! -O $new ]; then
-			warn "file \"$new\" not owned by us!"
-			ls -l $new
-			exit 1
-		fi
-		xserver=$new
-	fi 
-fi
-
-# Work out display:
-#
-if [ "X$disp" != "X" ]; then
-	:
-elif [ "X$1" != "X" ]; then
-	if echo "$1" | grep '^:[0-9]' > /dev/null; then
-		disp=$1
-		shift
-	elif [ "X$1" = "X:" ]; then
-		# ":" means for us to find one.
-		shift
-	fi
-fi
-if [ "X$disp" = "X" -o "X$disp" = "X:" ]; then
-	# try to find an open display port:
-	# (tcp outdated...)
-	ports=`netstat -ant | grep LISTEN | awk '{print $4}' | sed -e 's/^.*://'`
-	n=0
-	while [ $n -le 20 ]
-	do
-		port=`printf "60%02d" $n`
-		if echo "$ports" | grep "^${port}\$" > /dev/null; then
-			:
-		else
-			disp=":$n"
-			warn "$program: auto-selected DISPLAY $disp"
-			break	
-		fi
-		n=`expr $n + 1`
-	done
-fi
-
-# Work out which vt to use, try to find/guess an open one if necessary.
-#
-vt=""
-for arg in $*
-do
-	if echo "$arg" | grep '^vt' > /dev/null; then
-		vt=$arg
-		break
-	fi
-done
-if [ "X$vt" = "X" ]; then
-	if [ "X$user" = "Xroot" ]; then
-		# root can user fuser(1) to see if it is in use:
-		if type fuser >/dev/null 2>&1; then
-			# try /dev/tty17 thru /dev/tty32
-			n=17
-			while [ $n -le 32 ]
-			do
-				dev="/dev/tty$n"
-				if fuser $dev >/dev/null 2>&1; then
-					:
-				else
-					vt="vt$n"
-					warn "$program: auto-selected VT $vt => $dev"
-					break
-				fi
-				n=`expr $n + 1`
-			done
-		fi
-	fi
-	if [ "X$vt" = "X" ]; then
-		# take a wild guess...
-		vt=vt16
-		warn "$program: selected fallback VT $vt"
-	fi
-else
-	vt=""
-fi
-
-# Decide flavor of Xserver:
-#
-stype=`basename "$xserver"`
-if echo "$stype" | grep -i xfree86 > /dev/null; then
-	stype=xfree86
-else
-	stype=xorg
-fi
-
-tweak_config() {
-    in="$1"
-    config2="$XDUMMY_TMPDIR/xdummy_modified_xconfig.conf"
-    if [ "X$disp" != "X" ]; then
-    	d=`echo "$disp" | sed -e 's,/,,g' -e 's/:/_/g'`
-	config2="$config2$d"
-    fi
-    
-    # perl script to tweak the config file... add/delete options, etc.
-    #
-    env XDUMMY_GEOM=$geom \
-        XDUMMY_DEPTH=$depth \
-        XDUMMY_NOMODELINES=$nomodelines \
-        perl > $config2 < $in -e '
-    $n = 0;
-    $geom  = $ENV{XDUMMY_GEOM};
-    $depth = $ENV{XDUMMY_DEPTH};
-    $nomodelines = $ENV{XDUMMY_NOMODELINES};
-    $mode_str = "";
-    $videoram = "24000";
-    $HorizSync   = "30.0 - 130.0";
-    $VertRefresh = "50.0 - 250.0";
-    if ($geom ne "") {
-    	my $tmp = "";
-	foreach $g (split(/,/, $geom)) {
-		$tmp .= "\"$g\" ";
-		if (!$nomodelines && $g =~ /(\d+)x(\d+)/) {
-			my $w = $1;
-			my $h = $2;
-			$mode_str .= "  Modeline \"$g\" ";
-			my $dot = sprintf("%.2f", $w * $h * 70 * 1.e-6);
-			$mode_str .= $dot;
-			$mode_str .= " " . $w;
-			$mode_str .= " " . int(1.02 * $w);
-			$mode_str .= " " . int(1.10 * $w);
-			$mode_str .= " " . int(1.20 * $w);
-			$mode_str .= " " . $h;
-			$mode_str .= " " . int($h + 1);
-			$mode_str .= " " . int($h + 3);
-			$mode_str .= " " . int($h + 20);
-			$mode_str .= "\n";
-		}
-	}
-	$tmp =~ s/\s*$//;
-	$geom = $tmp;
-    }
-    while (<>) {
-	if ($ENV{XDUMMY_NOTWEAK}) {
-		print $_;
-		next;
-	}
-	$n++;
-	if (/^\s*#/) {
-		# pass comments straight thru
-		print;
-		next;
-	}
-	if (/^\s*Section\s+(\S+)/i) {
-		# start of Section
-		$sect = $1;
-		$sect =~ s/\W//g;
-		$sect =~ y/A-Z/a-z/;
-		$sects{$sect} = 1;
-		print;
-		next;
-	}
-	if (/^\s*EndSection/i) {
-		# end of Section
-		if ($sect eq "serverflags") {
-			if (!$got_DontVTSwitch) {
-				print "  ##Xdummy:##\n";
-				print "  Option \"DontVTSwitch\" \"true\"\n";
-			}
-			if (!$got_AllowMouseOpenFail) {
-				print "  ##Xdummy:##\n";
-				print "  Option \"AllowMouseOpenFail\" \"true\"\n";
-			}
-			if (!$got_PciForceNone) {
-				print "  ##Xdummy:##\n";
-				print "  Option \"PciForceNone\" \"true\"\n";
-			}
-		} elsif ($sect eq "device") {
-			if (!$got_Driver) {
-				print "  ##Xdummy:##\n";
-				print "  Driver \"dummy\"\n";
-			}
-			if (!$got_VideoRam) {
-				print "  ##Xdummy:##\n";
-				print "  VideoRam $videoram\n";
-			}
-		} elsif ($sect eq "screen") {
-			if ($depth ne "" && !got_DefaultDepth) {
-				print "  ##Xdummy:##\n";
-				print "  DefaultDepth $depth\n";
-			}
-			if ($got_Monitor eq "") {
-				print "  ##Xdummy:##\n";
-				print "  Monitor \"Monitor0\"\n";
-			}
-		} elsif ($sect eq "monitor") {
-			if (!got_HorizSync) {
-				print "  ##Xdummy:##\n";
-				print "  HorizSync   $HorizSync\n";
-			}
-			if (!got_VertRefresh) {
-				print "  ##Xdummy:##\n";
-				print "  VertRefresh $VertRefresh\n";
-			}
-			if (!$nomodelines) {
-				print "  ##Xdummy:##\n";
-				print $mode_str;
-			}
-		}
-		$sect = "";
-		print;
-		next;
-	}
-
-	if (/^\s*SubSection\s+(\S+)/i) {
-		# start of Section
-		$subsect = $1;
-		$subsect =~ s/\W//g;
-		$subsect =~ y/A-Z/a-z/;
-		$subsects{$subsect} = 1;
-		if ($sect eq "screen" && $subsect eq "display") {
-			$got_Modes = 0;
-		}
-		print;
-		next;
-	}
-	if (/^\s*EndSubSection/i) {
-		# end of SubSection
-		if ($sect eq "screen") {
-			if ($subsect eq "display") {
-				if ($depth ne "" && !$set_Depth) {
-					print "          ##Xdummy:##\n";
-					print "          Depth\t$depth\n";
-				}
-				if ($geom ne "" && ! $got_Modes) {
-					print "          ##Xdummy:##\n";
-					print "          Modes\t$geom\n";
-				}
-			}
-		}
-		$subsect = "";
-		print;
-		next;
-	}
-
-	$l = $_;
-	$l =~ s/#.*$//;
-	if ($sect eq "serverflags") {
-		if ($l =~ /^\s*Option.*DontVTSwitch/i) {
-			$_ =~ s/false/true/ig;
-			$got_DontVTSwitch = 1;
-		}
-		if ($l =~ /^\s*Option.*AllowMouseOpenFail/i) {
-			$_ =~ s/false/true/ig;
-			$got_AllowMouseOpenFail = 1;
-		}
-		if ($l =~ /^\s*Option.*PciForceNone/i) {
-			$_ =~ s/false/true/ig;
-			$got_PciForceNone= 1;
-		}
-	}
-	if ($sect eq "module") {
-		if ($l =~ /^\s*Load.*\b(dri|fbdevhw)\b/i) {
-			$_ = "##Xdummy## $_";
-		}
-	}
-	if ($sect eq "monitor") {
-		if ($l =~ /^\s*HorizSync/i) {
-			$got_HorizSync = 1;
-		}
-		if ($l =~ /^\s*VertRefresh/i) {
-			$got_VertRefresh = 1;
-		}
-	}
-	if ($sect eq "device") {
-		if ($l =~ /^(\s*Driver)\b/i) {
-			$_ = "$1 \"dummy\"\n";
-			$got_Driver = 1;
-		}
-		if ($l =~ /^\s*VideoRam/i) {
-			$got_VideoRam= 1;
-		}
-	}
-	if ($sect eq "inputdevice") {
-		if ($l =~ /^\s*Option.*\bDevice\b/i) {
-			print "  ##Xdummy:##\n";
-			$_ = "  Option \"Device\" \"/dev/dilbert$n\"\n";
-		}
-	}
-	if ($sect eq "screen") {
-		if ($l =~ /^\s*DefaultDepth\s+(\d+)/i) {
-			if ($depth ne "") {
-				print "  ##Xdummy:##\n";
-				$_ = "  DefaultDepth\t$depth\n";
-			}
-			$got_DefaultDepth = 1;
-		}
-		if ($l =~ /^\s*Monitor\s+(\S+)/i) {
-			$got_Monitor = $1;
-			$got_Monitor =~ s/"//g;
-		}
-		if ($subsect eq "display") {
-			if ($geom ne "") {
-				if ($l =~ /^(\s*Modes)\b/i) {
-					print "          ##Xdummy:##\n";
-					$_ = "$1 $geom\n";
-					$got_Modes = 1;
-				}
-			}
-			if ($l =~ /^\s*Depth\s+(\d+)/i) {
-				my $d = $1;
-				if (!$set_Depth && $depth ne "") {
-					$set_Depth = 1;
-					if ($depth != $d) {
-						print "          ##Xdummy:##\n";
-						$_ =  "          Depth\t$depth\n";
-					}
-				}
-			}
-		}
-	}
-	print;
-    }
-    if ($ENV{XDUMMY_NOTWEAK}) {
-	exit;
-    }
-    # create any crucial sections that are missing:
-    if (! exists($sects{serverflags})) {
-	print "\n##Xdummy:##\n";
-    	print "Section \"ServerFlags\"\n";
-    	print "  Option \"DontVTSwitch\" \"true\"\n";
-    	print "  Option \"AllowMouseOpenFail\" \"true\"\n";
-    	print "  Option \"PciForceNone\" \"true\"\n";
-    	print "EndSection\n";
-    }
-    if (! exists($sects{device})) {
-	print "\n##Xdummy:##\n";
-    	print "Section \"Device\"\n";
-    	print "  Identifier \"Videocard0\"\n";
-    	print "  Driver \"dummy\"\n";
-	print "  VideoRam $videoram\n";
-    	print "EndSection\n";
-    }
-    if (! exists($sects{monitor})) {
-	print "\n##Xdummy:##\n";
-    	print "Section \"Monitor\"\n";
-    	print "  Identifier \"Monitor0\"\n";
-    	print "  HorizSync   $HorizSync\n";
-    	print "  VertRefresh $VertRefresh\n";
-    	print "EndSection\n";
-    }
-    if (! exists($sects{screen})) {
-	print "\n##Xdummy:##\n";
-    	print "Section \"Screen\"\n";
-    	print "  Identifier \"Screen0\"\n";
-    	print "  Device \"Videocard0\"\n";
-	if ($got_Monitor ne "") {
-    		print "  Monitor \"$got_Monitor\"\n";
-	} else {
-    		print "  Monitor \"Monitor0\"\n";
-	}
-	if ($depth ne "") {
-    		print "  DefaultDepth $depth\n";
-	} else {
-    		print "  DefaultDepth 24\n";
-	}
-    	print "  SubSection \"Display\"\n";
-    	print "    Viewport 0 0\n";
-    	print "    Depth 24\n";
-	if ($got_Modes) {
-		;
-	} elsif ($geom ne "") {
-    		print "    Modes $geom\n";
-	} else {
-    		print "    Modes \"1280x1024\" \"1024x768\" \"800x600\"\n";
-	}
-    	print "  EndSubSection\n";
-    	print "EndSection\n";
-    }
-';
-}
-
-# Work out config file and tweak it.
-#
-if [ "X$cmdline_config" = "X" ]; then
-	:
-elif [ "X$cmdline_config" = "Xxdummy-builtin" ]; then
-	:
-elif echo "$cmdline_config" | grep '/' > /dev/null; then
-	:
-else
-	# ignore basename only case (let server handle it)
-	cmdline_config=""
-	notweak=1
-fi
-
-config=$cmdline_config
-
-if [ "X$notweak" = "X1" -a "X$root" = "X" -a  -f "$cmdline_config" ]; then
-	# if not root we need to copy (but not tweak) the specified config.
-	XDUMMY_NOTWEAK=1
-	export XDUMMY_NOTWEAK
-	notweak=""
-fi
-
-if [ ! $notweak ]; then
-	# tweaked config will be put in $config2:
-	config2=""
-	if [ "X$config" = "X" ]; then
-		# use the default one:
-		if [ "X$stype" = "Xxorg" ]; then
-			config=/etc/X11/xorg.conf
-		else
-			if [ -f "/etc/X11/XF86Config-4" ]; then
-				config="/etc/X11/XF86Config-4"
-			else
-				config="/etc/X11/XF86Config"
-			fi
-		fi
-		if [ ! -f "$config" ]; then
-			for c in /etc/X11/xorg.conf /etc/X11/XF86Config-4 /etc/X11/XF86Config
-			do
-				if [ -f $c ]; then
-					config=$c
-					break
-				fi
-			done
-		fi
-	fi
-
-	if [ "X$config" = "Xxdummy-builtin" ]; then
-		config=""
-	fi
-
-	if [ ! -f "$config" ]; then
-		config="$XDUMMY_TMPDIR/xorg.conf"
-		warn "$program: using minimal built-in xorg.conf settings."
-		cat > $config <<END
-
-Section "ServerLayout"
-    Identifier     "Layout0"
-    Screen      0  "Screen0"
-    InputDevice    "Keyboard0" "CoreKeyboard"
-    InputDevice    "Mouse0" "CorePointer"
-EndSection
-
-Section "Files"
-EndSection
-
-Section "Module"
-    Load           "dbe"
-    Load           "extmod"
-    Load           "freetype"
-    Load           "glx"
-EndSection
-
-Section "InputDevice"
-    Identifier     "Mouse0"
-    Driver         "mouse"
-    Option         "Protocol" "auto"
-    Option         "Device" "/dev/psaux"
-    Option         "Emulate3Buttons" "no"
-    Option         "ZAxisMapping" "4 5"
-EndSection
-
-Section "InputDevice"
-    Identifier     "Keyboard0"
-    Driver         "kbd"
-EndSection
-
-Section "Monitor"
-    Identifier     "Monitor0"
-    VendorName     "Unknown"
-    ModelName      "Unknown"
-    HorizSync       30.0 - 130.0
-    VertRefresh     50.0 - 250.0
-    Option         "DPMS"
-EndSection
-
-Section "Device"
-    Identifier     "Device0"
-    Driver         "foovideo"
-    VendorName     "foovideo Corporation"
-EndSection
-
-Section "Screen"
-    Identifier     "Screen0"
-    Device         "Device0"
-    Monitor        "Monitor0"
-    DefaultDepth    24
-    SubSection     "Display"
-        Depth       24
-        Modes           "1280x1024"
-    EndSubSection
-EndSection
-
-END
-	fi
-
-	if [ -f "$config" ]; then
-		tweak_config $config
-	fi
-
-	# now we need to get our tweaked config file onto the command line:
-	if [ "X$cmdline_config" = "X" ]; then
-		# append to cmdline (FUBAR will be substituted below.)
-		if [ "X$stype" = "Xxorg" ]; then
-			args="$args -config FUBAR"
-		else
-			args="$args -xf86config FUBAR"
-		fi
-	fi
-	if [ "X$config2" != "X" ]; then
-		# or modify $args:
-		c2=$config2
-		if [ "X$root" = "X" ]; then
-			# ordinary user cannot use absolute path.
-			c2=`basename $config2`
-		fi
-		args=`echo "$args" | sed \
-			-e "s,-config  *[^ ][^ ]*,-config $c2,g" \
-			-e "s,-xf86config  *[^ ][^ ]*,-xf86config $c2,g"`
-	fi
-fi
-
-if [ $prconf ]; then
-	warn ""
-	warn "Printing out the Xorg/XFree86 server config file:"
-	warn ""
-	if [ "X$config2" = "X" ]; then
-		warn "NO CONFIG GENERATED."
-		exit 1
-	else
-		cat "$config2"
-	fi
-	exit 0
-fi
-
-if [ $debug ]; then
-	XDUMMY_DEBUG=1
-	export XDUMMY_DEBUG
-fi
-if [ $root ]; then
-	XDUMMY_ROOT=1
-	export XDUMMY_ROOT
-fi
-
-# Finally, run it:
-#
-if [ "X$debug" != "X" -o "X$runit" = "X" ]; then
-	if [ ! $runit ]; then
-		echo ""
-		echo "/usr/bin/env:"
-		env | egrep -v '^(LS_COLORS|TERMCAP)' | sort
-		echo ""
-		echo "XDUMMY*:"
-		env | grep '^XDUMMY' | sort
-		echo ""
-	fi
-	warn ""
-	warn "The command to run is:"
-	warn ""
-	so=$SO
-	pwd=`pwd`
-	if echo "$so" | grep '^\./' > /dev/null; then
-		so=`echo "$so" | sed -e "s,^\.,$pwd,"`
-	fi
-	if echo "$so" | grep '/' > /dev/null; then
-		:
-	else
-		so="$pwd/$so"
-	fi
-	warn "env LD_PRELOAD=$so $xserver $disp $args $vt"
-	warn ""
-	if [ ! $runit ]; then
-		exit 0
-	fi
-fi
-
-if [ $strace ]; then
-	if [ "X$strace" = "X2" ]; then
-		ltrace -f env LD_PRELOAD=$SO $xserver $disp $args $vt
-	else
-		strace -f env LD_PRELOAD=$SO $xserver $disp $args $vt
-	fi
-else
-	exec env LD_PRELOAD=$SO $xserver $disp $args $vt
-fi
-
-exit $?
-
-#########################################################################
-
-code() {
-#code_begin
-#include <stdio.h>
-#define O_ACCMODE          0003
-#define O_RDONLY             00
-#define O_WRONLY             01
-#define O_RDWR               02
-#define O_CREAT            0100 /* not fcntl */
-#define O_EXCL             0200 /* not fcntl */
-#define O_NOCTTY           0400 /* not fcntl */
-#define O_TRUNC           01000 /* not fcntl */
-#define O_APPEND          02000
-#define O_NONBLOCK        04000
-#define O_NDELAY        O_NONBLOCK
-#define O_SYNC           010000
-#define O_FSYNC          O_SYNC
-#define O_ASYNC          020000
-
-#include <unistd.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include <linux/vt.h>
-#include <linux/kd.h>
-
-#define __USE_GNU
-#include <dlfcn.h>
-
-static char tmpdir[4096];
-static char str1[4096];
-static char str2[4096];
-
-static char devs[256][1024];
-static int debug = -1;
-static int root = -1;
-static int changed_uid = 0;
-static int saw_fonts = 0;
-static int saw_lib_modules = 0;
-
-static time_t start = 0; 
-
-void check_debug(void) {
-	if (debug < 0) {
-		if (getenv("XDUMMY_DEBUG") != NULL) {
-			debug = 1;
-		} else {
-			debug = 0;
-		}
-		/* prevent other processes using the preload: */
-		putenv("LD_PRELOAD=");
-	}
-}
-void check_root(void) {
-	if (root < 0) {
-		/* script tells us if we are root */
-		if (getenv("XDUMMY_ROOT") != NULL) {
-			root = 1;
-		} else {
-			root = 0;
-		}
-	}
-}
-
-void check_uid(void) {
-	if (start == 0) {
-		start = time(NULL);
-		if (debug) fprintf(stderr, "START: %u\n", (unsigned int) start);
-		return;
-	} else if (changed_uid == 0) {
-		if (saw_fonts || time(NULL) > start + 20) {
-			if (getenv("XDUMMY_UID")) {
-				int uid = atoi(getenv("XDUMMY_UID"));
-				if (debug) fprintf(stderr, "SETREUID: %d saw_fonts=%d\n", uid, saw_fonts);
-				if (uid >= 0) {
-					/* this will simply fail in -nonroot mode: */
-					setreuid(uid, -1);
-				}
-			}
-			changed_uid = 1;
-		}
-	}
-}
-
-#define CHECKIT if (debug < 0) check_debug(); \
-		if (root  < 0) check_root(); \
-		check_uid();
-
-static void set_tmpdir(void) {
-	char *s;
-	static int didset = 0;
-	if (didset) {
-		return;
-	}
-	s = getenv("XDUMMY_TMPDIR");
-	if (! s) {
-		s = "/tmp";
-	}
-	tmpdir[0] = '\0';
-	strcat(tmpdir, s);
-	strcat(tmpdir, "/");
-	didset = 1;
-}
-
-static char *tmpdir_path(const char *path) {
-	char *str;
-	set_tmpdir();
-	strcpy(str2, path);
-	str = str2;
-	while (*str) {
-		if (*str == '/') {
-			*str = '_';
-		}
-		str++;
-	}
-	strcpy(str1, tmpdir);
-	strcat(str1, str2);
-	return str1;
-}
-
-int open(const char *pathname, int flags, unsigned short mode) {
-	int fd;
-	char *store_dev = NULL;
-	static int (*real_open)(const char *, int , unsigned short) = NULL;
-
-	CHECKIT
-	if (! real_open) {
-		real_open = (int (*)(const char *, int , unsigned short))
-			dlsym(RTLD_NEXT, "open");
-	}
-
-	if (strstr(pathname, "lib/modules/")) {
-		/* not currently used. */
-		saw_lib_modules = 1;
-	}
-
-	if (!root) {
-		if (strstr(pathname, "/dev/") == pathname) {
-			store_dev = strdup(pathname);
-		}
-		if (strstr(pathname, "/dev/tty") == pathname && strcmp(pathname, "/dev/tty")) {
-			pathname = tmpdir_path(pathname);
-			if (debug) fprintf(stderr, "OPEN: %s -> %s (as FIFO)\n", store_dev, pathname);
-			/* we make it a FIFO so ioctl on it does not fail */
-			unlink(pathname);
-			mkfifo(pathname, 0666);
-		} else if (0) {
-			/* we used to handle more /dev files ... */
-			fd = real_open(pathname, O_WRONLY|O_CREAT, 0777);
-			close(fd);
-		}
-	}
-
-	fd = real_open(pathname, flags, mode);
-
-	if (debug) fprintf(stderr, "OPEN: %s %d %d fd=%d\n", pathname, flags, mode, fd);
-
-	if (! root) {
-		if (store_dev) {
-			if (fd < 256) {
-				strcpy(devs[fd], store_dev);
-			}
-			free(store_dev);
-		}
-	}
-
-	return(fd);
-}
-
-int open64(const char *pathname, int flags, unsigned short mode) {
-	int fd;
-
-	CHECKIT
-	if (debug) fprintf(stderr, "OPEN64: %s %d %d\n", pathname, flags, mode);
-
-	fd = open(pathname, flags, mode);
-	return(fd);
-}
-
-int rename(const char *oldpath, const char *newpath) {
-	static int (*real_rename)(const char *, const char *) = NULL;
-
-	CHECKIT
-	if (! real_rename) {
-		real_rename = (int (*)(const char *, const char *))
-			dlsym(RTLD_NEXT, "rename");
-	}
-
-	if (debug) fprintf(stderr, "RENAME: %s %s\n", oldpath, newpath);
-
-	if (root) {
-		return(real_rename(oldpath, newpath));
-	}
-
-	if (strstr(oldpath, "/var/log") == oldpath) {
-		if (debug) fprintf(stderr, "RENAME: returning 0\n");
-		return 0;
-	}
-	return(real_rename(oldpath, newpath));
-}
-
-FILE *fopen(const char *pathname, const char *mode) {
-	static FILE* (*real_fopen)(const char *, const char *) = NULL;
-	char *str;
-
-	if (! saw_fonts) {
-		if (strstr(pathname, "/fonts/")) {
-			if (strstr(pathname, "fonts.dir")) {
-				saw_fonts = 1;
-			} else if (strstr(pathname, "fonts.alias")) {
-				saw_fonts = 1;
-			}
-		}
-	}
-
-	CHECKIT
-	if (! real_fopen) {
-		real_fopen = (FILE* (*)(const char *, const char *))
-			dlsym(RTLD_NEXT, "fopen");
-	}
-
-	if (debug) fprintf(stderr, "FOPEN: %s %s\n", pathname, mode);
-
-	if (strstr(pathname, "xdummy_modified_xconfig.conf")) {
-		/* make our config appear to be in /etc/X11, etc. */
-		char *q = strrchr(pathname, '/');
-		if (q != NULL && getenv("XDUMMY_TMPDIR") != NULL) {
-			strcpy(str1, getenv("XDUMMY_TMPDIR"));
-			strcat(str1, q);
-			if (debug) fprintf(stderr, "FOPEN: %s -> %s\n", pathname, str1);
-			pathname = str1;
-		}
-	}
-
-	if (root) {
-		return(real_fopen(pathname, mode));
-	}
-
-	str = (char *) pathname;
-	if (strstr(pathname, "/var/log") == pathname) {
-		str = tmpdir_path(pathname);
-		if (debug) fprintf(stderr, "FOPEN: %s -> %s\n", pathname, str);
-	}
-	return(real_fopen(str, mode));
-}
-
-
-#define RETURN0 if (debug) \
-	{fprintf(stderr, "IOCTL: covered %d 0x%x\n", fd, req);} return 0;
-#define RETURN1 if (debug) \
-	{fprintf(stderr, "IOCTL: covered %d 0x%x\n", fd, req);} return -1;
-
-int ioctl(int fd, int req, void *ptr) {
-	static int closed_xf86Info_consoleFd = 0;
-	static int (*real_ioctl)(int, int , void *) = NULL;
-
-	CHECKIT
-	if (! real_ioctl) {
-		real_ioctl = (int (*)(int, int , void *))
-			dlsym(RTLD_NEXT, "open");
-	}
-	if (debug) fprintf(stderr, "IOCTL: %d 0x%x %p\n", fd, req, ptr);
-
-	/* based on xorg-x11-6.8.1-dualhead.patch */
-	if (req == VT_GETMODE) {
-		/* close(xf86Info.consoleFd) */
-		if (0 && ! closed_xf86Info_consoleFd) {
-			/* I think better not to close it... */
-			close(fd);
-			closed_xf86Info_consoleFd = 1;
-		}
-		RETURN0
-	} else if (req == VT_SETMODE) {
-		RETURN0
-	} else if (req == VT_GETSTATE) {
-		RETURN0
-	} else if (req == KDSETMODE) {
-		RETURN0
-	} else if (req == KDSETLED) {
-		RETURN0
-	} else if (req == KDGKBMODE) {
-		RETURN0
-	} else if (req == KDSKBMODE) {
-		RETURN0
-	} else if (req == VT_ACTIVATE) {
-		RETURN0
-	} else if (req == VT_WAITACTIVE) {
-		RETURN0
-	} else if (req == VT_RELDISP) {
-		if (ptr == (void *) 1) {
-			RETURN1
-		} else if (ptr == (void *) VT_ACKACQ) {
-			RETURN0
-		}
-	}
-
-	return(real_ioctl(fd, req, ptr));
-}
-
-typedef void (*sighandler_t)(int);
-#define SIGUSR1       10
-#define SIG_DFL       ((sighandler_t)0)
-
-sighandler_t signal(int signum, sighandler_t handler) {
-	static sighandler_t (*real_signal)(int, sighandler_t) = NULL;
-
-	CHECKIT
-	if (! real_signal) {
-		real_signal = (sighandler_t (*)(int, sighandler_t))
-			dlsym(RTLD_NEXT, "signal");
-	}
-
-	if (debug) fprintf(stderr, "SIGNAL: %d %p\n", signum, handler);
-
-	if (signum == SIGUSR1) {
-		if (debug) fprintf(stderr, "SIGNAL: skip SIGUSR1\n");
-		return SIG_DFL;
-	}
-	
-	return(real_signal(signum, handler));
-}
-
-int close(int fd) {
-	static int (*real_close)(int) = NULL;
-
-	CHECKIT
-	if (! real_close) {
-		real_close = (int (*)(int)) dlsym(RTLD_NEXT, "close");
-	}
-
-	if (debug) fprintf(stderr, "CLOSE: %d\n", fd);
-	if (!root) {
-		if (fd < 256) {
-			devs[fd][0] = '\0';
-		}
-	}
-	return(real_close(fd));
-}
-
-struct stat {
-	int foo;
-};
-
-int stat(const char *path, struct stat *buf) {
-	static int (*real_stat)(const char *, struct stat *) = NULL;
-
-	CHECKIT
-	if (! real_stat) {
-		real_stat = (int (*)(const char *, struct stat *))
-			dlsym(RTLD_NEXT, "stat");
-	}
-
-	if (debug) fprintf(stderr, "STAT: %s\n", path);
-
-	return(real_stat(path, buf));
-}
-
-int stat64(const char *path, struct stat *buf) {
-	static int (*real_stat64)(const char *, struct stat *) = NULL;
-
-	CHECKIT
-	if (! real_stat64) {
-		real_stat64 = (int (*)(const char *, struct stat *))
-			dlsym(RTLD_NEXT, "stat64");
-	}
-
-	if (debug) fprintf(stderr, "STAT64: %s\n", path);
-
-	return(real_stat64(path, buf));
-}
-
-int chown(const char *path, uid_t owner, gid_t group) {
-	static int (*real_chown)(const char *, uid_t, gid_t) = NULL;
-
-	CHECKIT
-	if (! real_chown) {
-		real_chown = (int (*)(const char *, uid_t, gid_t))
-			dlsym(RTLD_NEXT, "chown");
-	}
-
-	if (root) {
-		return(real_chown(path, owner, group));
-	}
-
-	if (debug) fprintf(stderr, "CHOWN: %s %d %d\n", path, owner, group);
-
-	if (strstr(path, "/dev") == path) {
-		if (debug) fprintf(stderr, "CHOWN: return 0\n");
-		return 0;
-	}
-
-	return(real_chown(path, owner, group));
-}
-
-extern int *__errno_location (void);
-#ifndef ENODEV
-#define ENODEV 19
-#endif
-
-int ioperm(unsigned long from, unsigned long num, int turn_on) {
-	static int (*real_ioperm)(unsigned long, unsigned long, int) = NULL;
-
-	CHECKIT
-	if (! real_ioperm) {
-		real_ioperm = (int (*)(unsigned long, unsigned long, int))
-			dlsym(RTLD_NEXT, "ioperm");
-	}
-	if (debug) fprintf(stderr, "IOPERM: %d %d %d\n", (int) from, (int) num, turn_on);
-	if (root) {
-		return(real_ioperm(from, num, turn_on));
-	}
-	if (from == 0 && num == 1024 && turn_on == 1) {
-		/* we want xf86EnableIO to fail */
-		if (debug) fprintf(stderr, "IOPERM: setting ENODEV.\n");
-		*__errno_location() = ENODEV;
-		return -1;
-	}
-	return 0;
-}
-
-int iopl(int level) {
-	static int (*real_iopl)(int) = NULL;
-
-	CHECKIT
-	if (! real_iopl) {
-		real_iopl = (int (*)(int)) dlsym(RTLD_NEXT, "iopl");
-	}
-	if (debug) fprintf(stderr, "IOPL: %d\n", level);
-	if (root) {
-		return(real_iopl(level));
-	}
-	return 0;
-}
-
-#ifdef INTERPOSE_GETUID 
-
-/*
- * we got things to work w/o pretending to be root.
- * so we no longer interpose getuid(), etc.
- */
-
-uid_t getuid(void) {
-	static uid_t (*real_getuid)(void) = NULL;
-	CHECKIT
-	if (! real_getuid) {
-		real_getuid = (uid_t (*)(void)) dlsym(RTLD_NEXT, "getuid");
-	}
-	if (root) {
-		return(real_getuid());
-	}
-	if (debug) fprintf(stderr, "GETUID: 0\n");
-	return 0;
-}
-uid_t geteuid(void) {
-	static uid_t (*real_geteuid)(void) = NULL;
-	CHECKIT
-	if (! real_geteuid) {
-		real_geteuid = (uid_t (*)(void)) dlsym(RTLD_NEXT, "geteuid");
-	}
-	if (root) {
-		return(real_geteuid());
-	}
-	if (debug) fprintf(stderr, "GETEUID: 0\n");
-	return 0;
-}
-uid_t geteuid_kludge1(void) {
-	static uid_t (*real_geteuid)(void) = NULL;
-	CHECKIT
-	if (! real_geteuid) {
-		real_geteuid = (uid_t (*)(void)) dlsym(RTLD_NEXT, "geteuid");
-	}
-	if (debug) fprintf(stderr, "GETEUID: 0 saw_libmodules=%d\n", saw_lib_modules);
-	if (root && !saw_lib_modules) {
-		return(real_geteuid());
-	} else {
-		saw_lib_modules = 0;
-		return 0;
-	}
-}
-
-uid_t getuid32(void) {
-	static uid_t (*real_getuid32)(void) = NULL;
-	CHECKIT
-	if (! real_getuid32) {
-		real_getuid32 = (uid_t (*)(void)) dlsym(RTLD_NEXT, "getuid32");
-	}
-	if (root) {
-		return(real_getuid32());
-	}
-	if (debug) fprintf(stderr, "GETUID32: 0\n");
-	return 0;
-}
-uid_t geteuid32(void) {
-	static uid_t (*real_geteuid32)(void) = NULL;
-	CHECKIT
-	if (! real_geteuid32) {
-		real_geteuid32 = (uid_t (*)(void)) dlsym(RTLD_NEXT, "geteuid32");
-	}
-	if (root) {
-		return(real_geteuid32());
-	}
-	if (debug) fprintf(stderr, "GETEUID32: 0\n");
-	return 0;
-}
-
-gid_t getgid(void) {
-	static gid_t (*real_getgid)(void) = NULL;
-	CHECKIT
-	if (! real_getgid) {
-		real_getgid = (gid_t (*)(void)) dlsym(RTLD_NEXT, "getgid");
-	}
-	if (root) {
-		return(real_getgid());
-	}
-	if (debug) fprintf(stderr, "GETGID: 0\n");
-	return 0;
-}
-gid_t getegid(void) {
-	static gid_t (*real_getegid)(void) = NULL;
-	CHECKIT
-	if (! real_getegid) {
-		real_getegid = (gid_t (*)(void)) dlsym(RTLD_NEXT, "getegid");
-	}
-	if (root) {
-		return(real_getegid());
-	}
-	if (debug) fprintf(stderr, "GETEGID: 0\n");
-	return 0;
-}
-gid_t getgid32(void) {
-	static gid_t (*real_getgid32)(void) = NULL;
-	CHECKIT
-	if (! real_getgid32) {
-		real_getgid32 = (gid_t (*)(void)) dlsym(RTLD_NEXT, "getgid32");
-	}
-	if (root) {
-		return(real_getgid32());
-	}
-	if (debug) fprintf(stderr, "GETGID32: 0\n");
-	return 0;
-}
-gid_t getegid32(void) {
-	static gid_t (*real_getegid32)(void) = NULL;
-	CHECKIT
-	if (! real_getegid32) {
-		real_getegid32 = (gid_t (*)(void)) dlsym(RTLD_NEXT, "getegid32");
-	}
-	if (root) {
-		return(real_getegid32());
-	}
-	if (debug) fprintf(stderr, "GETEGID32: 0\n");
-	return 0;
-}
-#endif
-
-#if 0
-/* maybe we need to interpose on strcmp someday... here is the template */
-int strcmp(const char *s1, const char *s2) {
-	static int (*real_strcmp)(const char *, const char *) = NULL;
-	CHECKIT
-	if (! real_strcmp) {
-		real_strcmp = (int (*)(const char *, const char *)) dlsym(RTLD_NEXT, "strcmp");
-	}
-	if (debug) fprintf(stderr, "STRCMP: '%s' '%s'\n", s1, s2);
-	return(real_strcmp(s1, s2));
-}
-#endif
-
-#code_end
-}
diff --git a/diffuser/azure/files/mjkey.txt b/diffuser/azure/files/mjkey.txt
deleted file mode 100644
index c26fd78..0000000
--- a/diffuser/azure/files/mjkey.txt
+++ /dev/null
@@ -1,17 +0,0 @@
-MuJoCo Pro Individual license activation key, number 7777, type 6.
-
-Issued to Everyone.
-
-Expires October 18, 2031.
-
-Do not modify this file. Its entire content, including the
-plain text section, is used by the activation manager.
-
-9aaedeefb37011a8a52361c736643665c7f60e796ff8ff70bb3f7a1d78e9a605
-0453a3c853e4aa416e712d7e80cf799c6314ee5480ec6bd0f1ab51d1bb3c768f
-8c06e7e572f411ecb25c3d6ef82cc20b00f672db88e6001b3dfdd3ab79e6c480
-185d681811cfdaff640fb63295e391b05374edba90dd54cc1e162a9d99b82a8b
-ea3e87f2c67d08006c53daac2e563269cdb286838b168a2071c48c29fedfbea2
-5effe96fe3cb05e85fb8af2d3851f385618ef8cdac42876831f095e052bd18c9
-5dce57ff9c83670aad77e5a1f41444bec45e30e4e827f7bf9799b29f2c934e23
-dcf6d3c3ee9c8dd2ed057317100cd21b4abbbf652d02bf72c3d322e0c55dcc24
\ No newline at end of file
diff --git a/diffuser/azure/launch.py b/diffuser/azure/launch.py
deleted file mode 100644
index 7df0ed2..0000000
--- a/diffuser/azure/launch.py
+++ /dev/null
@@ -1,64 +0,0 @@
-import os
-import pdb
-
-from doodad.wrappers.easy_launch import sweep_function, save_doodad_config
-
-codepath = '/home/code'
-script = 'scripts/train.py'
-
-
-def remote_fn(doodad_config, variant):
-    kwarg_string = ' '.join([
-        f'--{k} {v}' for k, v in variant.items()
-    ])
-    print(kwarg_string)
-
-    config = 'config.locomotion'
-
-    d4rl_path = os.path.join(doodad_config.output_directory, 'datasets/')
-    os.system(f'ls -a {codepath}')
-    os.system(f'mv {codepath}/git {codepath}/.git')
-    os.system(
-        f'''export PYTHONPATH=$PYTHONPATH:{codepath} && '''
-        f'''export CUDA_VISIBLE_DEVICES=0 && '''
-        f'''export D4RL_DATASET_DIR={d4rl_path} && '''
-        f'''python {os.path.join(codepath, script)} '''
-        f'''--config {config} '''
-        f'''{kwarg_string}'''
-    )
-    save_doodad_config(doodad_config)
-
-
-if __name__ == "__main__":
-
-    environments = ['walker2d']
-    buffers = ['medium-expert-v2']
-    datasets = [f'{env}-{buf}' for env in environments for buf in buffers]
-
-    azure_logpath = 'pretrained'
-
-    params_to_sweep = {
-        'dataset': datasets,
-        'horizon': [128, 512],
-        'n_diffusion_steps': [100],
-        'bucket': [None],
-    }
-
-    default_params = {
-        'logbase': os.path.join('/doodad_tmp', 'logs', azure_logpath),
-        'prefix': 'diffusion/',
-    }
-
-    sweep_function(
-        remote_fn,
-        params_to_sweep,
-        default_params=default_params,
-        config_path=os.path.abspath('azure/config.py'),
-        gpu_model='nvidia-tesla-v100',
-        azure_region='eastus2',
-        storage_container='diffuser-pretrained',
-        log_path=azure_logpath,
-        filter_ext=['.pyc', '.egg-info', '.png', '.ai'],
-        filter_dir=['logs', 'bin'],
-        use_gpu=True,
-    )
diff --git a/diffuser/azure/sync.sh b/diffuser/azure/sync.sh
deleted file mode 100755
index 0362d6f..0000000
--- a/diffuser/azure/sync.sh
+++ /dev/null
@@ -1,22 +0,0 @@
-if keyctl show 2>&1 | grep -q "workaroundSession";
-then
-	echo "Already logged in"
-else
-	echo "Logging in with tenant id:" ${AZURE_TENANT_ID}
-	keyctl session workaroundSession
-	./bin/azcopy login --tenant-id=$AZURE_TENANT_ID
-fi
-
-export LOCAL_LOGBASE=logs/pretrained/
-export LOGBASE=logs/pretrained/
-export AZURE_STORAGE_CONTAINER="diffuser-pretrained"
-
-## AZURE_STORAGE_CONNECTION_STRING has a substring formatted lik:
-	## AccountName=${STORAGE_ACCOUNT};AccountKey= ...
-export AZURE_STORAGE_ACCOUNT=`(echo $AZURE_STORAGE_CONNECTION_STRING | grep -o -P '(?<=AccountName=).*(?=;AccountKey)')`
-
-echo "Syncing from" ${AZURE_STORAGE_ACCOUNT}"/"${AZURE_STORAGE_CONTAINER}"/"${LOGBASE}
-
-mkdir -p ${LOCAL_LOGBASE}
-
-./bin/azcopy sync https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${AZURE_STORAGE_CONTAINER}/${LOGBASE} ${LOCAL_LOGBASE} --recursive
diff --git a/diffuser/config/locomotion.py b/diffuser/config/locomotion.py
deleted file mode 100644
index 4410bb1..0000000
--- a/diffuser/config/locomotion.py
+++ /dev/null
@@ -1,70 +0,0 @@
-import socket
-
-from diffuser.utils import watch
-
-#------------------------ base ------------------------#
-
-## automatically make experiment names for planning
-## by labelling folders with these args
-
-diffusion_args_to_watch = [
-    ('prefix', ''),
-    ('horizon', 'H'),
-    ('n_diffusion_steps', 'T'),
-]
-
-base = {
-    'diffusion': {
-        ## model
-        'model': 'models.TemporalUnet',
-        'diffusion': 'models.GaussianDiffusion',
-        'horizon': 32,
-        'n_diffusion_steps': 100,
-        'action_weight': 10,
-        'loss_weights': None,
-        'loss_discount': 1,
-        'predict_epsilon': False,
-        'dim_mults': (1, 4, 8),
-        'renderer': 'utils.MuJoCoRenderer',
-
-        ## dataset
-        'loader': 'datasets.SequenceDataset',
-        'normalizer': 'LimitsNormalizer',
-        'preprocess_fns': [],
-        'clip_denoised': True,
-        'use_padding': True,
-        'max_path_length': 1000,
-
-        ## serialization
-        'logbase': 'logs',
-        'prefix': 'diffusion/',
-        'exp_name': watch(diffusion_args_to_watch),
-
-        ## training
-        'n_steps_per_epoch': 10000,
-        'loss_type': 'l2',
-        'n_train_steps': 1e6,
-        'batch_size': 32,
-        'learning_rate': 2e-4,
-        'gradient_accumulate_every': 2,
-        'ema_decay': 0.995,
-        'save_freq': 1000,
-        'sample_freq': 1000,
-        'n_saves': 5,
-        'save_parallel': False,
-        'n_reference': 8,
-        'n_samples': 2,
-        'bucket': None,
-        'device': 'cuda',
-    },
-}
-
-#------------------------ overrides ------------------------#
-
-## put environment-specific overrides here
-
-halfcheetah_medium_expert_v2 = {
-    'diffusion': {
-        'horizon': 16,
-    },
-}
diff --git a/diffuser/config/maze2d.py b/diffuser/config/maze2d.py
deleted file mode 100644
index a06ac7f..0000000
--- a/diffuser/config/maze2d.py
+++ /dev/null
@@ -1,131 +0,0 @@
-import socket
-
-from diffuser.utils import watch
-
-#------------------------ base ------------------------#
-
-## automatically make experiment names for planning
-## by labelling folders with these args
-
-diffusion_args_to_watch = [
-    ('prefix', ''),
-    ('horizon', 'H'),
-    ('n_diffusion_steps', 'T'),
-]
-
-
-plan_args_to_watch = [
-    ('prefix', ''),
-    ##
-    ('horizon', 'H'),
-    ('n_diffusion_steps', 'T'),
-    ('value_horizon', 'V'),
-    ('discount', 'd'),
-    ('normalizer', ''),
-    ('batch_size', 'b'),
-    ##
-    ('conditional', 'cond'),
-]
-
-base = {
-
-    'diffusion': {
-        ## model
-        'model': 'models.TemporalUnet',
-        'diffusion': 'models.GaussianDiffusion',
-        'horizon': 256,
-        'n_diffusion_steps': 256,
-        'action_weight': 1,
-        'loss_weights': None,
-        'loss_discount': 1,
-        'predict_epsilon': False,
-        'dim_mults': (1, 4, 8),
-        'renderer': 'utils.Maze2dRenderer',
-
-        ## dataset
-        'loader': 'datasets.GoalDataset',
-        'termination_penalty': None,
-        'normalizer': 'LimitsNormalizer',
-        'preprocess_fns': ['maze2d_set_terminals'],
-        'clip_denoised': True,
-        'use_padding': False,
-        'max_path_length': 40000,
-
-        ## serialization
-        'logbase': 'logs',
-        'prefix': 'diffusion/',
-        'exp_name': watch(diffusion_args_to_watch),
-
-        ## training
-        'n_steps_per_epoch': 10000,
-        'loss_type': 'l2',
-        'n_train_steps': 2e6,
-        'batch_size': 32,
-        'learning_rate': 2e-4,
-        'gradient_accumulate_every': 2,
-        'ema_decay': 0.995,
-        'save_freq': 1000,
-        'sample_freq': 1000,
-        'n_saves': 50,
-        'save_parallel': False,
-        'n_reference': 50,
-        'n_samples': 10,
-        'bucket': None,
-        'device': 'cuda',
-    },
-
-    'plan': {
-        'batch_size': 1,
-        'device': 'cuda',
-
-        ## diffusion model
-        'horizon': 256,
-        'n_diffusion_steps': 256,
-        'normalizer': 'LimitsNormalizer',
-
-        ## serialization
-        'vis_freq': 10,
-        'logbase': 'logs',
-        'prefix': 'plans/release',
-        'exp_name': watch(plan_args_to_watch),
-        'suffix': '0',
-
-        'conditional': False,
-
-        ## loading
-        'diffusion_loadpath': 'f:diffusion/H{horizon}_T{n_diffusion_steps}',
-        'diffusion_epoch': 'latest',
-    },
-
-}
-
-#------------------------ overrides ------------------------#
-
-'''
-    maze2d maze episode steps:
-        umaze: 150
-        medium: 250
-        large: 600
-'''
-
-maze2d_umaze_v1 = {
-    'diffusion': {
-        'horizon': 128,
-        'n_diffusion_steps': 64,
-    },
-    'plan': {
-        'horizon': 128,
-        'n_diffusion_steps': 64,
-    },
-}
-
-maze2d_large_v1 = {
-    'diffusion': {
-        'horizon': 384,
-        'n_diffusion_steps': 256,
-    },
-    'plan': {
-        'horizon': 384,
-        'n_diffusion_steps': 256,
-    },
-}
diff --git a/diffuser/diffuser/__init__.py b/diffuser/diffuser/__init__.py
deleted file mode 100644
index db6735a..0000000
--- a/diffuser/diffuser/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from . import environments
\ No newline at end of file
diff --git a/diffuser/diffuser/datasets/__init__.py b/diffuser/diffuser/datasets/__init__.py
deleted file mode 100644
index 2c4cbb1..0000000
--- a/diffuser/diffuser/datasets/__init__.py
+++ /dev/null
@@ -1,2 +0,0 @@
-from .sequence import *
-from .d4rl import load_environment
\ No newline at end of file
diff --git a/diffuser/diffuser/datasets/buffer.py b/diffuser/diffuser/datasets/buffer.py
deleted file mode 100644
index da23142..0000000
--- a/diffuser/diffuser/datasets/buffer.py
+++ /dev/null
@@ -1,98 +0,0 @@
-import numpy as np
-
-def atleast_2d(x):
-    while x.ndim < 2:
-        x = np.expand_dims(x, axis=-1)
-    return x
-
-class ReplayBuffer:
-
-    def __init__(self, max_n_episodes, max_path_length, termination_penalty):
-        self._dict = {
-            'path_lengths': np.zeros(max_n_episodes, dtype=np.int64),
-        }
-        self._count = 0
-        self.max_n_episodes = max_n_episodes
-        self.max_path_length = max_path_length
-        self.termination_penalty = termination_penalty
-
-    def __repr__(self):
-        return '[ datasets/buffer ] Fields:\n' + '\n'.join(
-            f'    {key}: {val.shape}'
-            for key, val in self.items()
-        )
-
-    def __getitem__(self, key):
-        return self._dict[key]
-
-    def __setitem__(self, key, val):
-        self._dict[key] = val
-        self._add_attributes()
-
-    @property
-    def n_episodes(self):
-        return self._count
-
-    @property
-    def n_steps(self):
-        return sum(self['path_lengths'])
-
-    def _add_keys(self, path):
-        if hasattr(self, 'keys'):
-            return
-        self.keys = list(path.keys())
-
-    def _add_attributes(self):
-        '''
-            can access fields with `buffer.observations`
-            instead of `buffer['observations']`
-        '''
-        for key, val in self._dict.items():
-            setattr(self, key, val)
-
-    def items(self):
-        return {k: v for k, v in self._dict.items()
-                if k != 'path_lengths'}.items()
-
-    def _allocate(self, key, array):
-        assert key not in self._dict
-        dim = array.shape[-1]
-        shape = (self.max_n_episodes, self.max_path_length, dim)
-        self._dict[key] = np.zeros(shape, dtype=np.float32)
-        # print(f'[ utils/mujoco ] Allocated {key} with size {shape}')
-
-    def add_path(self, path):
-        path_length = len(path['observations'])
-        assert path_length <= self.max_path_length
-
-        ## if first path added, set keys based on contents
-        self._add_keys(path)
-
-        ## add tracked keys in path
-        for key in self.keys:
-            array = atleast_2d(path[key])
-            if key not in self._dict: self._allocate(key, array)
-            self._dict[key][self._count, :path_length] = array
-
-        ## penalize early termination
-        if path['terminals'].any() and self.termination_penalty is not None:
-            assert not path['timeouts'].any(), 'Penalized a timeout episode for early termination'
-            self._dict['rewards'][self._count, path_length - 1] += self.termination_penalty
-
-        ## record path length
-        self._dict['path_lengths'][self._count] = path_length
-
-        ## increment path counter
-        self._count += 1
-
-    def truncate_path(self, path_ind, step):
-        old = self._dict['path_lengths'][path_ind]
-        new = min(step, old)
-        self._dict['path_lengths'][path_ind] = new
-
-    def finalize(self):
-        ## remove extra slots
-        for key in self.keys + ['path_lengths']:
-            self._dict[key] = self._dict[key][:self._count]
-        self._add_attributes()
-        print(f'[ datasets/buffer ] Finalized replay buffer | {self._count} episodes')
diff --git a/diffuser/diffuser/datasets/d4rl.py b/diffuser/diffuser/datasets/d4rl.py
deleted file mode 100644
index 8ade6a0..0000000
--- a/diffuser/diffuser/datasets/d4rl.py
+++ /dev/null
@@ -1,119 +0,0 @@
-import os
-import collections
-import numpy as np
-import gym
-import pdb
-
-from contextlib import (
-    contextmanager,
-    redirect_stderr,
-    redirect_stdout,
-)
-
-@contextmanager
-def suppress_output():
-    """
-        A context manager that redirects stdout and stderr to devnull
-        https://stackoverflow.com/a/52442331
-    """
-    with open(os.devnull, 'w') as fnull:
-        with redirect_stderr(fnull) as err, redirect_stdout(fnull) as out:
-            yield (err, out)
-
-with suppress_output():
-    ## d4rl prints out a variety of warnings
-    import d4rl
-
-#-----------------------------------------------------------------------------#
-#-------------------------------- general api --------------------------------#
-#-----------------------------------------------------------------------------#
-
-def load_environment(name):
-    if type(name) != str:
-        ## name is already an environment
-        return name
-    with suppress_output():
-        wrapped_env = gym.make(name)
-    env = wrapped_env.unwrapped
-    env.max_episode_steps = wrapped_env._max_episode_steps
-    env.name = name
-    return env
-
-def get_dataset(env):
-    dataset = env.get_dataset()
-
-    if 'antmaze' in str(env).lower():
-        ## the antmaze-v0 environments have a variety of bugs
-        ## involving trajectory segmentation, so manually reset
-        ## the terminal and timeout fields
-        dataset = antmaze_fix_timeouts(dataset)
-        dataset = antmaze_scale_rewards(dataset)
-        get_max_delta(dataset)
-
-    return dataset
-
-def sequence_dataset(env, preprocess_fn):
-    """
-    Returns an iterator through trajectories.
-    Args:
-        env: An OfflineEnv object.
-        dataset: An optional dataset to pass in for processing. If None,
-            the dataset will default to env.get_dataset()
-        **kwargs: Arguments to pass to env.get_dataset().
-    Returns:
-        An iterator through dictionaries with keys:
-            observations
-            actions
-            rewards
-            terminals
-    """
-    dataset = get_dataset(env)
-    dataset = preprocess_fn(dataset)
-
-    N = dataset['rewards'].shape[0]
-    data_ = collections.defaultdict(list)
-
-    # The newer version of the dataset adds an explicit
-    # timeouts field. Keep old method for backwards compatability.
-    use_timeouts = 'timeouts' in dataset
-
-    episode_step = 0
-    for i in range(N):
-        done_bool = bool(dataset['terminals'][i])
-        if use_timeouts:
-            final_timestep = dataset['timeouts'][i]
-        else:
-            final_timestep = (episode_step == env._max_episode_steps - 1)
-
-        for k in dataset:
-            if 'metadata' in k: continue
-            data_[k].append(dataset[k][i])
-
-        if done_bool or final_timestep:
-            episode_step = 0
-            episode_data = {}
-            for k in data_:
-                episode_data[k] = np.array(data_[k])
-            if 'maze2d' in env.name:
-                episode_data = process_maze2d_episode(episode_data)
-            yield episode_data
-            data_ = collections.defaultdict(list)
-
-        episode_step += 1
-
-
-#-----------------------------------------------------------------------------#
-#-------------------------------- maze2d fixes -------------------------------#
-#-----------------------------------------------------------------------------#
-
-def process_maze2d_episode(episode):
-    '''
-        adds in `next_observations` field to episode
-    '''
-    assert 'next_observations' not in episode
-    length = len(episode['observations'])
-    next_observations = episode['observations'][1:].copy()
-    for key, val in episode.items():
-        episode[key] = val[:-1]
-    episode['next_observations'] = next_observations
-    return episode
diff --git a/diffuser/diffuser/datasets/normalization.py b/diffuser/diffuser/datasets/normalization.py
deleted file mode 100644
index 2b4a470..0000000
--- a/diffuser/diffuser/datasets/normalization.py
+++ /dev/null
@@ -1,294 +0,0 @@
-import numpy as np
-import scipy.interpolate as interpolate
-import pdb
-
-POINTMASS_KEYS = ['observations', 'actions', 'next_observations', 'deltas']
-
-#-----------------------------------------------------------------------------#
-#--------------------------- multi-field normalizer --------------------------#
-#-----------------------------------------------------------------------------#
-
-class DatasetNormalizer:
-
-    def __init__(self, dataset, normalizer, path_lengths=None):
-        dataset = flatten(dataset, path_lengths)
-
-        self.observation_dim = dataset['observations'].shape[1]
-        self.action_dim = dataset['actions'].shape[1]
-
-        if type(normalizer) == str:
-            normalizer = eval(normalizer)
-
-        self.normalizers = {}
-        for key, val in dataset.items():
-            try:
-                self.normalizers[key] = normalizer(val)
-            except:
-                print(f'[ utils/normalization ] Skipping {key} | {normalizer}')
-            # key: normalizer(val)
-            # for key, val in dataset.items()
-
-    def __repr__(self):
-        string = ''
-        for key, normalizer in self.normalizers.items():
-            string += f'{key}: {normalizer}]\n'
-        return string
-
-    def __call__(self, *args, **kwargs):
-        return self.normalize(*args, **kwargs)
-
-    def normalize(self, x, key):
-        return self.normalizers[key].normalize(x)
-
-    def unnormalize(self, x, key):
-        return self.normalizers[key].unnormalize(x)
-
-def flatten(dataset, path_lengths):
-    '''
-        flattens dataset of { key: [ n_episodes x max_path_lenth x dim ] }
-            to { key : [ (n_episodes * sum(path_lengths)) x dim ]}
-    '''
-    flattened = {}
-    for key, xs in dataset.items():
-        assert len(xs) == len(path_lengths)
-        flattened[key] = np.concatenate([
-            x[:length]
-            for x, length in zip(xs, path_lengths)
-        ], axis=0)
-    return flattened
-
-#-----------------------------------------------------------------------------#
-#------------------------------- @TODO: remove? ------------------------------#
-#-----------------------------------------------------------------------------#
-
-class PointMassDatasetNormalizer(DatasetNormalizer):
-
-    def __init__(self, preprocess_fns, dataset, normalizer, keys=POINTMASS_KEYS):
-
-        reshaped = {}
-        for key, val in dataset.items():
-            dim = val.shape[-1]
-            reshaped[key] = val.reshape(-1, dim)
-
-        self.observation_dim = reshaped['observations'].shape[1]
-        self.action_dim = reshaped['actions'].shape[1]
-
-        if type(normalizer) == str:
-            normalizer = eval(normalizer)
-
-        self.normalizers = {
-            key: normalizer(reshaped[key])
-            for key in keys
-        }
-
-#-----------------------------------------------------------------------------#
-#-------------------------- single-field normalizers -------------------------#
-#-----------------------------------------------------------------------------#
-
-class Normalizer:
-    '''
-        parent class, subclass by defining the `normalize` and `unnormalize` methods
-    '''
-
-    def __init__(self, X):
-        self.X = X.astype(np.float32)
-        self.mins = X.min(axis=0)
-        self.maxs = X.max(axis=0)
-
-    def __repr__(self):
-        return (
-            f'''[ Normalizer ] dim: {self.mins.size}\n    -: '''
-            f'''{np.round(self.mins, 2)}\n    +: {np.round(self.maxs, 2)}\n'''
-        )
-
-    def __call__(self, x):
-        return self.normalize(x)
-
-    def normalize(self, *args, **kwargs):
-        raise NotImplementedError()
-
-    def unnormalize(self, *args, **kwargs):
-        raise NotImplementedError()
-
-
-class DebugNormalizer(Normalizer):
-    '''
-        identity function
-    '''
-
-    def normalize(self, x, *args, **kwargs):
-        return x
-
-    def unnormalize(self, x, *args, **kwargs):
-        return x
-
-
-class GaussianNormalizer(Normalizer):
-    '''
-        normalizes to zero mean and unit variance
-    '''
-
-    def __init__(self, *args, **kwargs):
-        super().__init__(*args, **kwargs)
-        self.means = self.X.mean(axis=0)
-        self.stds = self.X.std(axis=0)
-        self.z = 1
-
-    def __repr__(self):
-        return (
-            f'''[ Normalizer ] dim: {self.mins.size}\n    '''
-            f'''means: {np.round(self.means, 2)}\n    '''
-            f'''stds: {np.round(self.z * self.stds, 2)}\n'''
-        )
-
-    def normalize(self, x):
-        return (x - self.means) / self.stds
-
-    def unnormalize(self, x):
-        return x * self.stds + self.means
-
-
-class LimitsNormalizer(Normalizer):
-    '''
-        maps [ xmin, xmax ] to [ -1, 1 ]
-    '''
-
-    def normalize(self, x):
-        ## [ 0, 1 ]
-        x = (x - self.mins) / (self.maxs - self.mins)
-        ## [ -1, 1 ]
-        x = 2 * x - 1
-        return x
-
-    def unnormalize(self, x, eps=1e-4):
-        '''
-            x : [ -1, 1 ]
-        '''
-        if x.max() > 1 + eps or x.min() < -1 - eps:
-            # print(f'[ datasets/mujoco ] Warning: sample out of range | ({x.min():.4f}, {x.max():.4f})')
-            x = np.clip(x, -1, 1)
-
-        ## [ -1, 1 ] --> [ 0, 1 ]
-        x = (x + 1) / 2.
-
-        return x * (self.maxs - self.mins) + self.mins
-
-class SafeLimitsNormalizer(LimitsNormalizer):
-    '''
-        functions like LimitsNormalizer, but can handle data for which a dimension is constant
-    '''
-
-    def __init__(self, *args, eps=1, **kwargs):
-        super().__init__(*args, **kwargs)
-        for i in range(len(self.mins)):
-            if self.mins[i] == self.maxs[i]:
-                print(f'''
-                    [ utils/normalization ] Constant data in dimension {i} | '''
-                    f'''max = min = {self.maxs[i]}'''
-                )
-                self.mins -= eps
-                self.maxs += eps
-
-#-----------------------------------------------------------------------------#
-#------------------------------- CDF normalizer ------------------------------#
-#-----------------------------------------------------------------------------#
-
-class CDFNormalizer(Normalizer):
-    '''
-        makes training data uniform (over each dimension) by transforming it with marginal CDFs
-    '''
-
-    def __init__(self, X):
-        super().__init__(atleast_2d(X))
-        self.dim = self.X.shape[1]
-        self.cdfs = [
-            CDFNormalizer1d(self.X[:, i])
-            for i in range(self.dim)
-        ]
-
-    def __repr__(self):
-        return f'[ CDFNormalizer ] dim: {self.mins.size}\n' + '    |    '.join(
-            f'{i:3d}: {cdf}' for i, cdf in enumerate(self.cdfs)
-        )
-
-    def wrap(self, fn_name, x):
-        shape = x.shape
-        ## reshape to 2d
-        x = x.reshape(-1, self.dim)
-        out = np.zeros_like(x)
-        for i, cdf in enumerate(self.cdfs):
-            fn = getattr(cdf, fn_name)
-            out[:, i] = fn(x[:, i])
-        return out.reshape(shape)
-
-    def normalize(self, x):
-        return self.wrap('normalize', x)
-
-    def unnormalize(self, x):
-        return self.wrap('unnormalize', x)
-
-class CDFNormalizer1d:
-    '''
-        CDF normalizer for a single dimension
-    '''
-
-    def __init__(self, X):
-        assert X.ndim == 1
-        self.X = X.astype(np.float32)
-        quantiles, cumprob = empirical_cdf(self.X)
-        self.fn = interpolate.interp1d(quantiles, cumprob)
-        self.inv = interpolate.interp1d(cumprob, quantiles)
-
-        self.xmin, self.xmax = quantiles.min(), quantiles.max()
-        self.ymin, self.ymax = cumprob.min(), cumprob.max()
-
-    def __repr__(self):
-        return (
-            f'[{np.round(self.xmin, 2):.4f}, {np.round(self.xmax, 2):.4f}'
-        )
-
-    def normalize(self, x):
-        x = np.clip(x, self.xmin, self.xmax)
-        ## [ 0, 1 ]
-        y = self.fn(x)
-        ## [ -1, 1 ]
-        y = 2 * y - 1
-        return y
-
-    def unnormalize(self, x, eps=1e-4):
-        '''
-            X : [ -1, 1 ]
-        '''
-        ## [ -1, 1 ] --> [ 0, 1 ]
-        x = (x + 1) / 2.
-
-        if (x < self.ymin - eps).any() or (x > self.ymax + eps).any():
-            print(
-                f'''[ dataset/normalization ] Warning: out of range in unnormalize: '''
-                f'''[{x.min()}, {x.max()}] | '''
-                f'''x : [{self.xmin}, {self.xmax}] | '''
-                f'''y: [{self.ymin}, {self.ymax}]'''
-            )
-
-        x = np.clip(x, self.ymin, self.ymax)
-
-        y = self.inv(x)
-        return y
-
-def empirical_cdf(sample):
-    ## https://stackoverflow.com/a/33346366
-
-    # find the unique values and their corresponding counts
-    quantiles, counts = np.unique(sample, return_counts=True)
-
-    # take the cumulative sum of the counts and divide by the sample size to
-    # get the cumulative probabilities between 0 and 1
-    cumprob = np.cumsum(counts).astype(np.double) / sample.size
-
-    return quantiles, cumprob
-
-def atleast_2d(x):
-    if x.ndim < 2:
-        x = x[:,None]
-    return x
-
diff --git a/diffuser/diffuser/datasets/preprocessing.py b/diffuser/diffuser/datasets/preprocessing.py
deleted file mode 100644
index fbf0dc0..0000000
--- a/diffuser/diffuser/datasets/preprocessing.py
+++ /dev/null
@@ -1,299 +0,0 @@
-import gym
-import numpy as np
-import einops
-from scipy.spatial.transform import Rotation as R
-import pdb
-
-from .d4rl import load_environment
-
-#-----------------------------------------------------------------------------#
-#-------------------------------- general api --------------------------------#
-#-----------------------------------------------------------------------------#
-
-def compose(*fns):
-
-    def _fn(x):
-        for fn in fns:
-            x = fn(x)
-        return x
-
-    return _fn
-
-def get_preprocess_fn(fn_names, env):
-    fns = [eval(name)(env) for name in fn_names]
-    return compose(*fns)
-
-def get_policy_preprocess_fn(fn_names):
-    fns = [eval(name) for name in fn_names]
-    return compose(*fns)
-
-#-----------------------------------------------------------------------------#
-#-------------------------- preprocessing functions --------------------------#
-#-----------------------------------------------------------------------------#
-
-#------------------------ @TODO: remove some of these ------------------------#
-
-def arctanh_actions(*args, **kwargs):
-    epsilon = 1e-4
-
-    def _fn(dataset):
-        actions = dataset['actions']
-        assert actions.min() >= -1 and actions.max() <= 1, \
-            f'applying arctanh to actions in range [{actions.min()}, {actions.max()}]'
-        actions = np.clip(actions, -1 + epsilon, 1 - epsilon)
-        dataset['actions'] = np.arctanh(actions)
-        return dataset
-
-    return _fn
-
-def add_deltas(env):
-
-    def _fn(dataset):
-        deltas = dataset['next_observations'] - dataset['observations']
-        dataset['deltas'] = deltas
-        return dataset
-
-    return _fn
-
-
-def maze2d_set_terminals(env):
-    env = load_environment(env) if type(env) == str else env
-    goal = np.array(env._target)
-    threshold = 0.5
-
-    def _fn(dataset):
-        xy = dataset['observations'][:,:2]
-        distances = np.linalg.norm(xy - goal, axis=-1)
-        at_goal = distances < threshold
-        timeouts = np.zeros_like(dataset['timeouts'])
-
-        ## timeout at time t iff
-        ##      at goal at time t and
-        ##      not at goal at time t + 1
-        timeouts[:-1] = at_goal[:-1] * ~at_goal[1:]
-
-        timeout_steps = np.where(timeouts)[0]
-        path_lengths = timeout_steps[1:] - timeout_steps[:-1]
-
-        print(
-            f'[ utils/preprocessing ] Segmented {env.name} | {len(path_lengths)} paths | '
-            f'min length: {path_lengths.min()} | max length: {path_lengths.max()}'
-        )
-
-        dataset['timeouts'] = timeouts
-        return dataset
-
-    return _fn
-
-
-#-------------------------- block-stacking --------------------------#
-
-def blocks_quat_to_euler(observations):
-    '''
-        input : [ N x robot_dim + n_blocks * 8 ] = [ N x 39 ]
-            xyz: 3
-            quat: 4
-            contact: 1
-
-        returns : [ N x robot_dim + n_blocks * 10] = [ N x 47 ]
-            xyz: 3
-            sin: 3
-            cos: 3
-            contact: 1
-    '''
-    robot_dim = 7
-    block_dim = 8
-    n_blocks = 4
-    assert observations.shape[-1] == robot_dim + n_blocks * block_dim
-
-    X = observations[:, :robot_dim]
-
-    for i in range(n_blocks):
-        start = robot_dim + i * block_dim
-        end = start + block_dim
-
-        block_info = observations[:, start:end]
-
-        xpos = block_info[:, :3]
-        quat = block_info[:, 3:-1]
-        contact = block_info[:, -1:]
-
-        euler = R.from_quat(quat).as_euler('xyz')
-        sin = np.sin(euler)
-        cos = np.cos(euler)
-
-        X = np.concatenate([
-            X,
-            xpos,
-            sin,
-            cos,
-            contact,
-        ], axis=-1)
-
-    return X
-
-def blocks_euler_to_quat_2d(observations):
-    robot_dim = 7
-    block_dim = 10
-    n_blocks = 4
-
-    assert observations.shape[-1] == robot_dim + n_blocks * block_dim
-
-    X = observations[:, :robot_dim]
-
-    for i in range(n_blocks):
-        start = robot_dim + i * block_dim
-        end = start + block_dim
-
-        block_info = observations[:, start:end]
-
-        xpos = block_info[:, :3]
-        sin = block_info[:, 3:6]
-        cos = block_info[:, 6:9]
-        contact = block_info[:, 9:]
-
-        euler = np.arctan2(sin, cos)
-        quat = R.from_euler('xyz', euler, degrees=False).as_quat()
-
-        X = np.concatenate([
-            X,
-            xpos,
-            quat,
-            contact,
-        ], axis=-1)
-
-    return X
-
-def blocks_euler_to_quat(paths):
-    return np.stack([
-        blocks_euler_to_quat_2d(path)
-        for path in paths
-    ], axis=0)
-
-def blocks_process_cubes(env):
-
-    def _fn(dataset):
-        for key in ['observations', 'next_observations']:
-            dataset[key] = blocks_quat_to_euler(dataset[key])
-        return dataset
-
-    return _fn
-
-def blocks_remove_kuka(env):
-
-    def _fn(dataset):
-        for key in ['observations', 'next_observations']:
-            dataset[key] = dataset[key][:, 7:]
-        return dataset
-
-    return _fn
-
-def blocks_add_kuka(observations):
-    '''
-        observations : [ batch_size x horizon x 32 ]
-    '''
-    robot_dim = 7
-    batch_size, horizon, _ = observations.shape
-    observations = np.concatenate([
-        np.zeros((batch_size, horizon, 7)),
-        observations,
-    ], axis=-1)
-    return observations
-
-def blocks_cumsum_quat(deltas):
-    '''
-        deltas : [ batch_size x horizon x transition_dim ]
-    '''
-    robot_dim = 7
-    block_dim = 8
-    n_blocks = 4
-    assert deltas.shape[-1] == robot_dim + n_blocks * block_dim
-
-    batch_size, horizon, _ = deltas.shape
-
-    cumsum = deltas.cumsum(axis=1)
-    for i in range(n_blocks):
-        start = robot_dim + i * block_dim + 3
-        end = start + 4
-
-        quat = deltas[:, :, start:end].copy()
-
-        quat = einops.rearrange(quat, 'b h q -> (b h) q')
-        euler = R.from_quat(quat).as_euler('xyz')
-        euler = einops.rearrange(euler, '(b h) e -> b h e', b=batch_size)
-        cumsum_euler = euler.cumsum(axis=1)
-
-        cumsum_euler = einops.rearrange(cumsum_euler, 'b h e -> (b h) e')
-        cumsum_quat = R.from_euler('xyz', cumsum_euler).as_quat()
-        cumsum_quat = einops.rearrange(cumsum_quat, '(b h) q -> b h q', b=batch_size)
-
-        cumsum[:, :, start:end] = cumsum_quat.copy()
-
-    return cumsum
-
-def blocks_delta_quat_helper(observations, next_observations):
-    '''
-        input : [ N x robot_dim + n_blocks * 8 ] = [ N x 39 ]
-            xyz: 3
-            quat: 4
-            contact: 1
-    '''
-    robot_dim = 7
-    block_dim = 8
-    n_blocks = 4
-    assert observations.shape[-1] == next_observations.shape[-1] == robot_dim + n_blocks * block_dim
-
-    deltas = (next_observations - observations)[:, :robot_dim]
-
-    for i in range(n_blocks):
-        start = robot_dim + i * block_dim
-        end = start + block_dim
-
-        block_info = observations[:, start:end]
-        next_block_info = next_observations[:, start:end]
-
-        xpos = block_info[:, :3]
-        next_xpos = next_block_info[:, :3]
-
-        quat = block_info[:, 3:-1]
-        next_quat = next_block_info[:, 3:-1]
-
-        contact = block_info[:, -1:]
-        next_contact = next_block_info[:, -1:]
-
-        delta_xpos = next_xpos - xpos
-        delta_contact = next_contact - contact
-
-        rot = R.from_quat(quat)
-        next_rot = R.from_quat(next_quat)
-
-        delta_quat = (next_rot * rot.inv()).as_quat()
-        w = delta_quat[:, -1:]
-
-        ## make w positive to avoid [0, 0, 0, -1]
-        delta_quat = delta_quat * np.sign(w)
-
-        ## apply rot then delta to ensure we end at next_rot
-        ## delta * rot = next_rot * rot' * rot = next_rot
-        next_euler = next_rot.as_euler('xyz')
-        next_euler_check = (R.from_quat(delta_quat) * rot).as_euler('xyz')
-        assert np.allclose(next_euler, next_euler_check)
-
-        deltas = np.concatenate([
-            deltas,
-            delta_xpos,
-            delta_quat,
-            delta_contact,
-        ], axis=-1)
-
-    return deltas
-
-def blocks_add_deltas(env):
-
-    def _fn(dataset):
-        deltas = blocks_delta_quat_helper(dataset['observations'], dataset['next_observations'])
-        # deltas = dataset['next_observations'] - dataset['observations']
-        dataset['deltas'] = deltas
-        return dataset
-
-    return _fn
diff --git a/diffuser/diffuser/datasets/sequence.py b/diffuser/diffuser/datasets/sequence.py
deleted file mode 100644
index 356c540..0000000
--- a/diffuser/diffuser/datasets/sequence.py
+++ /dev/null
@@ -1,119 +0,0 @@
-from collections import namedtuple
-import numpy as np
-import torch
-import pdb
-
-from .preprocessing import get_preprocess_fn
-from .d4rl import load_environment, sequence_dataset
-from .normalization import DatasetNormalizer
-from .buffer import ReplayBuffer
-
-Batch = namedtuple('Batch', 'trajectories conditions')
-ValueBatch = namedtuple('ValueBatch', 'trajectories conditions values')
-
-class SequenceDataset(torch.utils.data.Dataset):
-
-    def __init__(self, env='hopper-medium-replay', horizon=64,
-        normalizer='LimitsNormalizer', preprocess_fns=[], max_path_length=1000,
-        max_n_episodes=10000, termination_penalty=0, use_padding=True):
-        self.preprocess_fn = get_preprocess_fn(preprocess_fns, env)
-        self.env = env = load_environment(env)
-        self.horizon = horizon
-        self.max_path_length = max_path_length
-        self.use_padding = use_padding
-        itr = sequence_dataset(env, self.preprocess_fn)
-
-        fields = ReplayBuffer(max_n_episodes, max_path_length, termination_penalty)
-        for i, episode in enumerate(itr):
-            fields.add_path(episode)
-        fields.finalize()
-
-        self.normalizer = DatasetNormalizer(fields, normalizer, path_lengths=fields['path_lengths'])
-        self.indices = self.make_indices(fields.path_lengths, horizon)
-
-        self.observation_dim = fields.observations.shape[-1]
-        self.action_dim = fields.actions.shape[-1]
-        self.fields = fields
-        self.n_episodes = fields.n_episodes
-        self.path_lengths = fields.path_lengths
-        self.normalize()
-
-        print(fields)
-        # shapes = {key: val.shape for key, val in self.fields.items()}
-        # print(f'[ datasets/mujoco ] Dataset fields: {shapes}')
-
-    def normalize(self, keys=['observations', 'actions']):
-        '''
-            normalize fields that will be predicted by the diffusion model
-        '''
-        for key in keys:
-            array = self.fields[key].reshape(self.n_episodes*self.max_path_length, -1)
-            normed = self.normalizer(array, key)
-            self.fields[f'normed_{key}'] = normed.reshape(self.n_episodes, self.max_path_length, -1)
-
-    def make_indices(self, path_lengths, horizon):
-        '''
-            makes indices for sampling from dataset;
-            each index maps to a datapoint
-        '''
-        indices = []
-        for i, path_length in enumerate(path_lengths):
-            max_start = min(path_length - 1, self.max_path_length - horizon)
-            if not self.use_padding:
-                max_start = min(max_start, path_length - horizon)
-            for start in range(max_start):
-                end = start + horizon
-                indices.append((i, start, end))
-        indices = np.array(indices)
-        return indices
-
-    def get_conditions(self, observations):
-        '''
-            condition on current observation for planning
-        '''
-        return {0: observations[0]}
-
-    def __len__(self):
-        return len(self.indices)
-
-    def __getitem__(self, idx, eps=1e-4):
-        path_ind, start, end = self.indices[idx]
-
-        observations = self.fields.normed_observations[path_ind, start:end]
-        actions = self.fields.normed_actions[path_ind, start:end]
-
-        conditions = self.get_conditions(observations)
-        trajectories = np.concatenate([actions, observations], axis=-1)
-        batch = Batch(trajectories, conditions)
-        return batch
-
-class GoalDataset(SequenceDataset):
-
-    def get_conditions(self, observations):
-        '''
-            condition on both the current observation and the last observation in the plan
-        '''
-        return {
-            0: observations[0],
-            self.horizon - 1: observations[-1],
-        }
-
-class ValueDataset(SequenceDataset):
-    '''
-        adds a value field to the datapoints for training the value function
-    '''
-
-    def __init__(self, *args, discount=0.99, **kwargs):
-        super().__init__(*args, **kwargs)
-        self.discount = discount
-        self.discounts = self.discount ** np.arange(self.max_path_length)[:,None]
-
-    def __getitem__(self, idx):
-        batch = super().__getitem__(idx)
-        path_ind, start, end = self.indices[idx]
-        rewards = self.fields['rewards'][path_ind, start:]
-        discounts = self.discounts[:len(rewards)]
-        value = (discounts * rewards).sum()
-        value = np.array([value], dtype=np.float32)
-        value_batch = ValueBatch(*batch, value)
-        return value_batch
diff --git a/diffuser/diffuser/environments/__init__.py b/diffuser/diffuser/environments/__init__.py
deleted file mode 100644
index 455bcf3..0000000
--- a/diffuser/diffuser/environments/__init__.py
+++ /dev/null
@@ -1,3 +0,0 @@
-from .registration import register_environments
-
-registered_environments = register_environments()
\ No newline at end of file
diff --git a/diffuser/diffuser/environments/ant.py b/diffuser/diffuser/environments/ant.py
deleted file mode 100644
index e35f6dc..0000000
--- a/diffuser/diffuser/environments/ant.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import os
-import numpy as np
-from gym import utils
-from gym.envs.mujoco import mujoco_env
-
-'''
-    qpos : 15
-    qvel : 14
-    0-2: root x, y, z
-    3-7: root quat
-    7  : front L hip
-    8  : front L ankle
-    9  : front R hip
-    10 : front R ankle
-    11 : back  L hip
-    12 : back  L ankle
-    13 : back  R hip
-    14 : back  R ankle
-
-'''
-
-class AntFullObsEnv(mujoco_env.MujocoEnv, utils.EzPickle):
-    def __init__(self):
-        asset_path = os.path.join(
-            os.path.dirname(__file__), 'assets/ant.xml')
-        mujoco_env.MujocoEnv.__init__(self, asset_path, 5)
-        utils.EzPickle.__init__(self)
-
-    def step(self, a):
-        xposbefore = self.get_body_com("torso")[0]
-        self.do_simulation(a, self.frame_skip)
-        xposafter = self.get_body_com("torso")[0]
-        forward_reward = (xposafter - xposbefore) / self.dt
-        ctrl_cost = 0.5 * np.square(a).sum()
-        contact_cost = (
-            0.5 * 1e-3 * np.sum(np.square(np.clip(self.sim.data.cfrc_ext, -1, 1)))
-        )
-        survive_reward = 1.0
-        reward = forward_reward - ctrl_cost - contact_cost + survive_reward
-        state = self.state_vector()
-        notdone = np.isfinite(state).all() and state[2] >= 0.2 and state[2] <= 1.0
-        done = not notdone
-        ob = self._get_obs()
-        return (
-            ob,
-            reward,
-            done,
-            dict(
-                reward_forward=forward_reward,
-                reward_ctrl=-ctrl_cost,
-                reward_contact=-contact_cost,
-                reward_survive=survive_reward,
-            ),
-        )
-
-    def _get_obs(self):
-        return np.concatenate(
-            [
-                self.sim.data.qpos.flat[2:],
-                self.sim.data.qvel.flat,
-                np.clip(self.sim.data.cfrc_ext, -1, 1).flat,
-            ]
-        )
-
-    def reset_model(self):
-        qpos = self.init_qpos + self.np_random.uniform(
-            size=self.model.nq, low=-0.1, high=0.1
-        )
-        qvel = self.init_qvel + self.np_random.standard_normal(self.model.nv) * 0.1
-        self.set_state(qpos, qvel)
-        return self._get_obs()
-
-    def viewer_setup(self):
-        self.viewer.cam.distance = self.model.stat.extent * 0.5
\ No newline at end of file
diff --git a/diffuser/diffuser/environments/assets/ant.xml b/diffuser/diffuser/environments/assets/ant.xml
deleted file mode 100644
index b8b03cd..0000000
--- a/diffuser/diffuser/environments/assets/ant.xml
+++ /dev/null
@@ -1,81 +0,0 @@
-<mujoco model="ant">
-  <compiler angle="degree" coordinate="local" inertiafromgeom="true"/>
-  <option integrator="RK4" timestep="0.01"/>
-  <custom>
-    <numeric data="0.0 0.0 0.55 1.0 0.0 0.0 0.0 0.0 1.0 0.0 -1.0 0.0 -1.0 0.0 1.0" name="init_qpos"/>
-  </custom>
-  <default>
-    <joint armature="1" damping="1" limited="true"/>
-    <geom conaffinity="0" condim="3" density="5.0" friction="1 0.5 0.5" margin="0.01" rgba="0.8 0.6 0.4 1"/>
-  </default>
-  <asset>
-    <texture builtin="gradient" height="100" rgb1="1 1 1" rgb2="1 1 1" type="skybox" width="100"/>
-    <texture builtin="flat" height="1278" mark="cross" markrgb="1 1 1" name="texgeom" random="0.01" rgb1="0.8 0.6 0.4" rgb2="0.8 0.6 0.4" type="cube" width="127"/>
-    <!-- <texture builtin="checker" height="100" name="texplane" rgb1="0 0 0" rgb2="0.8 0.8 0.8" type="2d" width="100"/> -->
-    <!-- <material name="MatPlane" reflectance="0.5" shininess="1" specular="1" texrepeat="60 60" texture="texplane"/> -->
-    <material name="geom" texture="texgeom" texuniform="true"/>
-  </asset>
-  <worldbody>
-    <light cutoff="100" diffuse="1 1 1" dir="-0 0 -1.3" directional="true" exponent="1" pos="0 0 1.3" specular=".1 .1 .1"/>
-    <geom conaffinity="1" condim="3" name="floor" pos="0 0 0" rgba="1 1 1 0" size="40 40 40" type="plane"/>
-    <body name="torso" pos="0 0 0.75">
-      <camera name="track" mode="trackcom" pos="0 -3 0.3" xyaxes="1 0 0 0 0 1"/>
-      <geom name="torso_geom" pos="0 0 0" size="0.25" type="sphere"/>
-      <joint armature="0" damping="0" limited="false" margin="0.01" name="root" pos="0 0 0" type="free"/>
-      <body name="front_left_leg" pos="0 0 0">
-        <geom fromto="0.0 0.0 0.0 0.2 0.2 0.0" name="aux_1_geom" size="0.08" type="capsule"/>
-        <body name="aux_1" pos="0.2 0.2 0">
-          <joint axis="0 0 1" name="hip_1" pos="0.0 0.0 0.0" range="-30 30" type="hinge"/>
-          <geom fromto="0.0 0.0 0.0 0.2 0.2 0.0" name="left_leg_geom" size="0.08" type="capsule"/>
-          <body pos="0.2 0.2 0">
-            <joint axis="-1 1 0" name="ankle_1" pos="0.0 0.0 0.0" range="30 70" type="hinge"/>
-            <geom fromto="0.0 0.0 0.0 0.4 0.4 0.0" name="left_ankle_geom" size="0.08" type="capsule"/>
-          </body>
-        </body>
-      </body>
-      <body name="front_right_leg" pos="0 0 0">
-        <geom fromto="0.0 0.0 0.0 -0.2 0.2 0.0" name="aux_2_geom" size="0.08" type="capsule"/>
-        <body name="aux_2" pos="-0.2 0.2 0">
-          <joint axis="0 0 1" name="hip_2" pos="0.0 0.0 0.0" range="-30 30" type="hinge"/>
-          <geom fromto="0.0 0.0 0.0 -0.2 0.2 0.0" name="right_leg_geom" size="0.08" type="capsule"/>
-          <body pos="-0.2 0.2 0">
-            <joint axis="1 1 0" name="ankle_2" pos="0.0 0.0 0.0" range="-70 -30" type="hinge"/>
-            <geom fromto="0.0 0.0 0.0 -0.4 0.4 0.0" name="right_ankle_geom" size="0.08" type="capsule"/>
-          </body>
-        </body>
-      </body>
-      <body name="back_leg" pos="0 0 0">
-        <geom fromto="0.0 0.0 0.0 -0.2 -0.2 0.0" name="aux_3_geom" size="0.08" type="capsule"/>
-        <body name="aux_3" pos="-0.2 -0.2 0">
-          <joint axis="0 0 1" name="hip_3" pos="0.0 0.0 0.0" range="-30 30" type="hinge"/>
-          <geom fromto="0.0 0.0 0.0 -0.2 -0.2 0.0" name="back_leg_geom" size="0.08" type="capsule"/>
-          <body pos="-0.2 -0.2 0">
-            <joint axis="-1 1 0" name="ankle_3" pos="0.0 0.0 0.0" range="-70 -30" type="hinge"/>
-            <geom fromto="0.0 0.0 0.0 -0.4 -0.4 0.0" name="third_ankle_geom" size="0.08" type="capsule"/>
-          </body>
-        </body>
-      </body>
-      <body name="right_back_leg" pos="0 0 0">
-        <geom fromto="0.0 0.0 0.0 0.2 -0.2 0.0" name="aux_4_geom" size="0.08" type="capsule"/>
-        <body name="aux_4" pos="0.2 -0.2 0">
-          <joint axis="0 0 1" name="hip_4" pos="0.0 0.0 0.0" range="-30 30" type="hinge"/>
-          <geom fromto="0.0 0.0 0.0 0.2 -0.2 0.0" name="rightback_leg_geom" size="0.08" type="capsule"/>
-          <body pos="0.2 -0.2 0">
-            <joint axis="1 1 0" name="ankle_4" pos="0.0 0.0 0.0" range="30 70" type="hinge"/>
-            <geom fromto="0.0 0.0 0.0 0.4 -0.4 0.0" name="fourth_ankle_geom" size="0.08" type="capsule"/>
-          </body>
-        </body>
-      </body>
-    </body>
-  </worldbody>
-  <actuator>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" joint="hip_4" gear="150"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" joint="ankle_4" gear="150"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" joint="hip_1" gear="150"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" joint="ankle_1" gear="150"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" joint="hip_2" gear="150"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" joint="ankle_2" gear="150"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" joint="hip_3" gear="150"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" joint="ankle_3" gear="150"/>
-  </actuator>
-</mujoco>
\ No newline at end of file
diff --git a/diffuser/diffuser/environments/assets/half_cheetah.xml b/diffuser/diffuser/environments/assets/half_cheetah.xml
deleted file mode 100644
index 9442205..0000000
--- a/diffuser/diffuser/environments/assets/half_cheetah.xml
+++ /dev/null
@@ -1,94 +0,0 @@
-<!-- Cheetah Model
-    The state space is populated with joints in the order that they are
-    defined in this file. The actuators also operate on joints.
-    State-Space (name/joint/parameter):
-        - rootx     slider      position (m)
-        - rootz     slider      position (m)
-        - rooty     hinge       angle (rad)
-        - bthigh    hinge       angle (rad)
-        - bshin     hinge       angle (rad)
-        - bfoot     hinge       angle (rad)
-        - fthigh    hinge       angle (rad)
-        - fshin     hinge       angle (rad)
-        - ffoot     hinge       angle (rad)
-        - rootx     slider      velocity (m/s)
-        - rootz     slider      velocity (m/s)
-        - rooty     hinge       angular velocity (rad/s)
-        - bthigh    hinge       angular velocity (rad/s)
-        - bshin     hinge       angular velocity (rad/s)
-        - bfoot     hinge       angular velocity (rad/s)
-        - fthigh    hinge       angular velocity (rad/s)
-        - fshin     hinge       angular velocity (rad/s)
-        - ffoot     hinge       angular velocity (rad/s)
-    Actuators (name/actuator/parameter):
-        - bthigh    hinge       torque (N m)
-        - bshin     hinge       torque (N m)
-        - bfoot     hinge       torque (N m)
-        - fthigh    hinge       torque (N m)
-        - fshin     hinge       torque (N m)
-        - ffoot     hinge       torque (N m)
--->
-<mujoco model="cheetah">
-  <compiler angle="radian" coordinate="local" inertiafromgeom="true" settotalmass="14"/>
-  <default>
-    <joint armature=".1" damping=".01" limited="true" solimplimit="0 .8 .03" solreflimit=".02 1" stiffness="8"/>
-    <geom conaffinity="0" condim="3" contype="1" friction=".4 .1 .1" rgba="0.8 0.6 .4 1" solimp="0.0 0.8 0.01" solref="0.02 1"/>
-    <motor ctrllimited="true" ctrlrange="-1 1"/>
-  </default>
-  <size nstack="300000" nuser_geom="1"/>
-  <option gravity="0 0 -9.81" timestep="0.01"/>
-  <asset>
-    <!-- <texture builtin="gradient" height="100" rgb1="1 1 1" rgb2="0 0 0" type="skybox" width="100"/> -->
-    <texture builtin="gradient" height="100" rgb1="1 1 1" rgb2="1 1 1" type="skybox" width="100"/>
-    <texture builtin="flat" height="1278" mark="cross" markrgb="1 1 1" name="texgeom" random="0.01" rgb1="0.8 0.6 0.4" rgb2="0.8 0.6 0.4" type="cube" width="127"/>
-    <!-- <texture builtin="checker" height="100" name="texplane" rgb1="0 0 0" rgb2="0.8 0.8 0.8" type="2d" width="100"/> -->
-    <!-- <material name="MatPlane" reflectance="0.5" shininess="1" specular="1" texrepeat="60 60" texture="texplane"/> -->
-    <material name="geom" texture="texgeom" texuniform="true"/>
-  </asset>
-  <worldbody>
-    <light cutoff="100" diffuse="1 1 1" dir="-0 0 -1.3" directional="true" exponent="1" pos="0 0 1.3" specular=".1 .1 .1"/>
-    <!-- <geom conaffinity="1" condim="3" material="MatPlane" name="floor" pos="0 0 0" rgba="0.8 0.9 0.8 1" size="40 40 40" type="plane"/> -->
-    <geom conaffinity="1" condim="3" name="floor" pos="0 0 0" rgba="1 1 1 0" size="40 40 40" type="plane"/>
-    <body name="torso" pos="0 0 .7">
-      <camera name="track" mode="trackcom" pos="0 -3 0.3" xyaxes="1 0 0 0 0 1"/>
-      <joint armature="0" axis="1 0 0" damping="0" limited="false" name="rootx" pos="0 0 0" stiffness="0" type="slide"/>
-      <joint armature="0" axis="0 0 1" damping="0" limited="false" name="rootz" pos="0 0 0" stiffness="0" type="slide"/>
-      <joint armature="0" axis="0 1 0" damping="0" limited="false" name="rooty" pos="0 0 0" stiffness="0" type="hinge"/>
-      <geom fromto="-.5 0 0 .5 0 0" name="torso" size="0.046" type="capsule"/>
-      <geom axisangle="0 1 0 .87" name="head" pos=".6 0 .1" size="0.046 .15" type="capsule"/>
-      <!-- <site name='tip'  pos='.15 0 .11'/>-->
-      <body name="bthigh" pos="-.5 0 0">
-        <joint axis="0 1 0" damping="6" name="bthigh" pos="0 0 0" range="-.52 1.05" stiffness="240" type="hinge"/>
-        <geom axisangle="0 1 0 -3.8" name="bthigh" pos=".1 0 -.13" size="0.046 .145" type="capsule"/>
-        <body name="bshin" pos=".16 0 -.25">
-          <joint axis="0 1 0" damping="4.5" name="bshin" pos="0 0 0" range="-.785 .785" stiffness="180" type="hinge"/>
-          <geom axisangle="0 1 0 -2.03" name="bshin" pos="-.14 0 -.07" rgba="0.9 0.6 0.6 1" size="0.046 .15" type="capsule"/>
-          <body name="bfoot" pos="-.28 0 -.14">
-            <joint axis="0 1 0" damping="3" name="bfoot" pos="0 0 0" range="-.4 .785" stiffness="120" type="hinge"/>
-            <geom axisangle="0 1 0 -.27" name="bfoot" pos=".03 0 -.097" rgba="0.9 0.6 0.6 1" size="0.046 .094" type="capsule"/>
-          </body>
-        </body>
-      </body>
-      <body name="fthigh" pos=".5 0 0">
-        <joint axis="0 1 0" damping="4.5" name="fthigh" pos="0 0 0" range="-1 .7" stiffness="180" type="hinge"/>
-        <geom axisangle="0 1 0 .52" name="fthigh" pos="-.07 0 -.12" size="0.046 .133" type="capsule"/>
-        <body name="fshin" pos="-.14 0 -.24">
-          <joint axis="0 1 0" damping="3" name="fshin" pos="0 0 0" range="-1.2 .87" stiffness="120" type="hinge"/>
-          <geom axisangle="0 1 0 -.6" name="fshin" pos=".065 0 -.09" rgba="0.9 0.6 0.6 1" size="0.046 .106" type="capsule"/>
-          <body name="ffoot" pos=".13 0 -.18">
-            <joint axis="0 1 0" damping="1.5" name="ffoot" pos="0 0 0" range="-.5 .5" stiffness="60" type="hinge"/>
-            <geom axisangle="0 1 0 -.6" name="ffoot" pos=".045 0 -.07" rgba="0.9 0.6 0.6 1" size="0.046 .07" type="capsule"/>
-          </body>
-        </body>
-      </body>
-    </body>
-  </worldbody>
-  <actuator>
-    <motor gear="120" joint="bthigh" name="bthigh"/>
-    <motor gear="90" joint="bshin" name="bshin"/>
-    <motor gear="60" joint="bfoot" name="bfoot"/>
-    <motor gear="120" joint="fthigh" name="fthigh"/>
-    <motor gear="60" joint="fshin" name="fshin"/>
-    <motor gear="30" joint="ffoot" name="ffoot"/>
-  </actuator>
-</mujoco>
\ No newline at end of file
diff --git a/diffuser/diffuser/environments/assets/hopper.xml b/diffuser/diffuser/environments/assets/hopper.xml
deleted file mode 100644
index 5b08bb6..0000000
--- a/diffuser/diffuser/environments/assets/hopper.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<mujoco model="hopper">
-  <compiler angle="degree" coordinate="global" inertiafromgeom="true"/>
-  <default>
-    <joint armature="1" damping="1" limited="true"/>
-    <geom conaffinity="1" condim="1" contype="1" margin="0.001" material="geom" rgba="0.8 0.6 .4 1" solimp=".8 .8 .01" solref=".02 1"/>
-    <motor ctrllimited="true" ctrlrange="-.4 .4"/>
-  </default>
-  <option integrator="RK4" timestep="0.002"/>
-  <visual>
-    <map znear="0.02"/>
-  </visual>
-  <worldbody>
-    <light cutoff="100" diffuse="1 1 1" dir="-0 0 -1.3" directional="true" exponent="1" pos="0 0 1.3" specular=".1 .1 .1"/>
-    <geom conaffinity="1" condim="3" name="floor" pos="0 0 0" rgba="1 1 1 0" size="20 20 .125" type="plane"/>
-    <!-- <geom conaffinity="1" condim="3" name="floor" pos="0 0 0" rgba="1 1 1 1" size="20 20 .125" type="plane" material="MatPlane"/> -->
-    <body name="torso" pos="0 0 1.25">
-      <camera name="track" mode="trackcom" pos="0 -3 1" xyaxes="1 0 0 0 0 1"/>
-      <joint armature="0" axis="1 0 0" damping="0" limited="false" name="rootx" pos="0 0 0" stiffness="0" type="slide"/>
-      <joint armature="0" axis="0 0 1" damping="0" limited="false" name="rootz" pos="0 0 0" ref="1.25" stiffness="0" type="slide"/>
-      <joint armature="0" axis="0 1 0" damping="0" limited="false" name="rooty" pos="0 0 1.25" stiffness="0" type="hinge"/>
-      <geom friction="0.9" fromto="0 0 1.45 0 0 1.05" name="torso_geom" size="0.05" type="capsule"/>
-      <body name="thigh" pos="0 0 1.05">
-        <joint axis="0 -1 0" name="thigh_joint" pos="0 0 1.05" range="-150 0" type="hinge"/>
-        <geom friction="0.9" fromto="0 0 1.05 0 0 0.6" name="thigh_geom" size="0.05" type="capsule"/>
-        <body name="leg" pos="0 0 0.35">
-          <joint axis="0 -1 0" name="leg_joint" pos="0 0 0.6" range="-150 0" type="hinge"/>
-          <geom friction="0.9" fromto="0 0 0.6 0 0 0.1" name="leg_geom" size="0.04" type="capsule"/>
-          <body name="foot" pos="0.13/2 0 0.1">
-            <joint axis="0 -1 0" name="foot_joint" pos="0 0 0.1" range="-45 45" type="hinge"/>
-            <geom friction="2.0" fromto="-0.13 0 0.1 0.26 0 0.1" name="foot_geom" size="0.06" type="capsule"/>
-          </body>
-        </body>
-      </body>
-    </body>
-  </worldbody>
-  <actuator>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="200.0" joint="thigh_joint"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="200.0" joint="leg_joint"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="200.0" joint="foot_joint"/>
-  </actuator>
-    <asset>
-        <texture type="skybox" builtin="gradient" rgb1="1 1 1" rgb2="1 1 1"
-            width="100" height="100"/>
-        <texture builtin="flat" height="1278" mark="cross" markrgb="1 1 1" name="texgeom" random="0.01" rgb1="0.8 0.6 0.4" rgb2="0.8 0.6 0.4" type="cube" width="127"/>
-        <texture builtin="checker" height="100" name="texplane" rgb1="1 1 1" rgb2="1 1 1" type="2d" width="100"/>
-        <material name="MatPlane" reflectance="0.5" shininess="1" specular="1" texrepeat="60 60" texture="texplane"/>
-        <material name="geom" texture="texgeom" texuniform="true"/>
-    </asset>
-</mujoco>
\ No newline at end of file
diff --git a/diffuser/diffuser/environments/assets/walker2d.xml b/diffuser/diffuser/environments/assets/walker2d.xml
deleted file mode 100644
index 79947e7..0000000
--- a/diffuser/diffuser/environments/assets/walker2d.xml
+++ /dev/null
@@ -1,62 +0,0 @@
-<mujoco model="walker2d">
-  <compiler angle="degree" coordinate="global" inertiafromgeom="true"/>
-  <default>
-    <joint armature="0.01" damping=".1" limited="true"/>
-    <geom conaffinity="0" condim="3" contype="1" density="1000" friction=".7 .1 .1" rgba="0.8 0.6 .4 1"/>
-  </default>
-  <option integrator="RK4" timestep="0.002"/>
-  <worldbody>
-    <light cutoff="100" diffuse="1 1 1" dir="-0 0 -1.3" directional="true" exponent="1" pos="0 0 1.3" specular=".1 .1 .1"/>
-    <geom conaffinity="1" condim="3" name="floor" pos="0 0 0" rgba="0.8 0.9 0.8 0" size="40 40 40" type="plane" material="MatPlane"/>
-    <body name="torso" pos="0 0 1.25">
-      <camera name="track" mode="trackcom" pos="0 -3 1" xyaxes="1 0 0 0 0 1"/>
-      <joint armature="0" axis="1 0 0" damping="0" limited="false" name="rootx" pos="0 0 0" stiffness="0" type="slide"/>
-      <joint armature="0" axis="0 0 1" damping="0" limited="false" name="rootz" pos="0 0 0" ref="1.25" stiffness="0" type="slide"/>
-      <joint armature="0" axis="0 1 0" damping="0" limited="false" name="rooty" pos="0 0 1.25" stiffness="0" type="hinge"/>
-      <geom friction="0.9" fromto="0 0 1.45 0 0 1.05" name="torso_geom" size="0.05" type="capsule"/>
-      <body name="thigh" pos="0 0 1.05">
-        <joint axis="0 -1 0" name="thigh_joint" pos="0 0 1.05" range="-150 0" type="hinge"/>
-        <geom friction="0.9" fromto="0 0 1.05 0 0 0.6" name="thigh_geom" size="0.05" type="capsule"/>
-        <body name="leg" pos="0 0 0.35">
-          <joint axis="0 -1 0" name="leg_joint" pos="0 0 0.6" range="-150 0" type="hinge"/>
-          <geom friction="0.9" fromto="0 0 0.6 0 0 0.1" name="leg_geom" size="0.04" type="capsule"/>
-          <body name="foot" pos="0.2/2 0 0.1">
-            <joint axis="0 -1 0" name="foot_joint" pos="0 0 0.1" range="-45 45" type="hinge"/>
-            <geom friction="0.9" fromto="-0.0 0 0.1 0.2 0 0.1" name="foot_geom" size="0.06" type="capsule"/>
-          </body>
-        </body>
-      </body>
-      <!-- copied and then replace thigh->thigh_left, leg->leg_left, foot->foot_right -->
-      <body name="thigh_left" pos="0 0 1.05">
-        <joint axis="0 -1 0" name="thigh_left_joint" pos="0 0 1.05" range="-150 0" type="hinge"/>
-        <geom friction="0.9" fromto="0 0 1.05 0 0 0.6" name="thigh_left_geom" rgba=".7 .3 .6 1" size="0.05" type="capsule"/>
-        <body name="leg_left" pos="0 0 0.35">
-          <joint axis="0 -1 0" name="leg_left_joint" pos="0 0 0.6" range="-150 0" type="hinge"/>
-          <geom friction="0.9" fromto="0 0 0.6 0 0 0.1" name="leg_left_geom" rgba=".7 .3 .6 1" size="0.04" type="capsule"/>
-          <body name="foot_left" pos="0.2/2 0 0.1">
-            <joint axis="0 -1 0" name="foot_left_joint" pos="0 0 0.1" range="-45 45" type="hinge"/>
-            <geom friction="1.9" fromto="-0.0 0 0.1 0.2 0 0.1" name="foot_left_geom" rgba=".7 .3 .6 1" size="0.06" type="capsule"/>
-          </body>
-        </body>
-      </body>
-    </body>
-  </worldbody>
-  <actuator>
-    <!-- <motor joint="torso_joint" ctrlrange="-100.0 100.0" isctrllimited="true"/>-->
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="100" joint="thigh_joint"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="100" joint="leg_joint"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="100" joint="foot_joint"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="100" joint="thigh_left_joint"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="100" joint="leg_left_joint"/>
-    <motor ctrllimited="true" ctrlrange="-1.0 1.0" gear="100" joint="foot_left_joint"/>
-    <!-- <motor joint="finger2_rot" ctrlrange="-20.0 20.0" isctrllimited="true"/>-->
-  </actuator>
-    <asset>
-        <texture type="skybox" builtin="gradient" rgb1="1 1 1" rgb2="1 1 1"
-            width="100" height="100"/>
-        <texture builtin="flat" height="1278" mark="cross" markrgb="1 1 1" name="texgeom" random="0.01" rgb1="0.8 0.6 0.4" rgb2="0.8 0.6 0.4" type="cube" width="127"/>
-        <texture builtin="checker" height="100" name="texplane" rgb1="0 0 0" rgb2="0.8 0.8 0.8" type="2d" width="100"/>
-        <material name="MatPlane" reflectance="0.5" shininess="1" specular="1" texrepeat="60 60" texture="texplane"/>
-        <material name="geom" texture="texgeom" texuniform="true"/>
-    </asset>
-</mujoco>
\ No newline at end of file
diff --git a/diffuser/diffuser/environments/half_cheetah.py b/diffuser/diffuser/environments/half_cheetah.py
deleted file mode 100644
index 1e02877..0000000
--- a/diffuser/diffuser/environments/half_cheetah.py
+++ /dev/null
@@ -1,45 +0,0 @@
-import os
-import numpy as np
-from gym import utils
-from gym.envs.mujoco import mujoco_env
-
-class HalfCheetahFullObsEnv(mujoco_env.MujocoEnv, utils.EzPickle):
-    def __init__(self):
-        asset_path = os.path.join(
-            os.path.dirname(__file__), 'assets/half_cheetah.xml')
-        mujoco_env.MujocoEnv.__init__(self, asset_path, 5)
-        utils.EzPickle.__init__(self)
-
-    def step(self, action):
-        xposbefore = self.sim.data.qpos[0]
-        self.do_simulation(action, self.frame_skip)
-        xposafter = self.sim.data.qpos[0]
-        ob = self._get_obs()
-        reward_ctrl = - 0.1 * np.square(action).sum()
-        reward_run = (xposafter - xposbefore)/self.dt
-        reward = reward_ctrl + reward_run
-        done = False
-        return ob, reward, done, dict(reward_run=reward_run, reward_ctrl=reward_ctrl)
-
-    def _get_obs(self):
-        return np.concatenate([
-            # self.sim.data.qpos.flat[1:],
-            self.sim.data.qpos.flat, #[1:],
-            self.sim.data.qvel.flat,
-        ])
-
-    def reset_model(self):
-        qpos = self.init_qpos + self.np_random.uniform(low=-.1, high=.1, size=self.model.nq)
-        qvel = self.init_qvel + self.np_random.randn(self.model.nv) * .1
-        self.set_state(qpos, qvel)
-        return self._get_obs()
-
-    def viewer_setup(self):
-        self.viewer.cam.distance = self.model.stat.extent * 0.5
-
-    def set(self, state):
-        qpos_dim = self.sim.data.qpos.size
-        qpos = state[:qpos_dim]
-        qvel = state[qpos_dim:]
-        self.set_state(qpos, qvel)
-        return self._get_obs()
diff --git a/diffuser/diffuser/environments/hopper.py b/diffuser/diffuser/environments/hopper.py
deleted file mode 100644
index 90aba17..0000000
--- a/diffuser/diffuser/environments/hopper.py
+++ /dev/null
@@ -1,51 +0,0 @@
-import os
-import numpy as np
-from gym import utils
-from gym.envs.mujoco import mujoco_env
-
-class HopperFullObsEnv(mujoco_env.MujocoEnv, utils.EzPickle):
-    def __init__(self):
-        asset_path = os.path.join(
-            os.path.dirname(__file__), 'assets/hopper.xml')
-        mujoco_env.MujocoEnv.__init__(self, asset_path, 4)
-        utils.EzPickle.__init__(self)
-
-    def step(self, a):
-        posbefore = self.sim.data.qpos[0]
-        self.do_simulation(a, self.frame_skip)
-        posafter, height, ang = self.sim.data.qpos[0:3]
-        alive_bonus = 1.0
-        reward = (posafter - posbefore) / self.dt
-        reward += alive_bonus
-        reward -= 1e-3 * np.square(a).sum()
-        s = self.state_vector()
-        done = not (np.isfinite(s).all() and (np.abs(s[2:]) < 100).all() and
-                    (height > .7) and (abs(ang) < .2))
-        ob = self._get_obs()
-        return ob, reward, done, {}
-
-    def _get_obs(self):
-        return np.concatenate([
-            # self.sim.data.qpos.flat[1:],
-            self.sim.data.qpos.flat,
-            np.clip(self.sim.data.qvel.flat, -10, 10)
-        ])
-
-    def reset_model(self):
-        qpos = self.init_qpos + self.np_random.uniform(low=-.005, high=.005, size=self.model.nq)
-        qvel = self.init_qvel + self.np_random.uniform(low=-.005, high=.005, size=self.model.nv)
-        self.set_state(qpos, qvel)
-        return self._get_obs()
-
-    def viewer_setup(self):
-        self.viewer.cam.trackbodyid = 2
-        self.viewer.cam.distance = self.model.stat.extent * 0.75
-        self.viewer.cam.lookat[2] = 1.15
-        self.viewer.cam.elevation = -20
-
-    def set(self, state):
-        qpos_dim = self.sim.data.qpos.size
-        qpos = state[:qpos_dim]
-        qvel = state[qpos_dim:]
-        self.set_state(qpos, qvel)
-        return self._get_obs()
\ No newline at end of file
diff --git a/diffuser/diffuser/environments/registration.py b/diffuser/diffuser/environments/registration.py
deleted file mode 100644
index 655a6f0..0000000
--- a/diffuser/diffuser/environments/registration.py
+++ /dev/null
@@ -1,34 +0,0 @@
-import gym
-
-ENVIRONMENT_SPECS = (
-    {
-        'id': 'HopperFullObs-v2',
-        'entry_point': ('diffuser.environments.hopper:HopperFullObsEnv'),
-    },
-    {
-        'id': 'HalfCheetahFullObs-v2',
-        'entry_point': ('diffuser.environments.half_cheetah:HalfCheetahFullObsEnv'),
-    },
-    {
-        'id': 'Walker2dFullObs-v2',
-        'entry_point': ('diffuser.environments.walker2d:Walker2dFullObsEnv'),
-    },
-    {
-        'id': 'AntFullObs-v2',
-        'entry_point': ('diffuser.environments.ant:AntFullObsEnv'),
-    },
-)
-
-def register_environments():
-    try:
-        for environment in ENVIRONMENT_SPECS:
-            gym.register(**environment)
-
-        gym_ids = tuple(
-            environment_spec['id']
-            for environment_spec in  ENVIRONMENT_SPECS)
-
-        return gym_ids
-    except:
-        print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
-        return tuple()
\ No newline at end of file
diff --git a/diffuser/diffuser/environments/walker2d.py b/diffuser/diffuser/environments/walker2d.py
deleted file mode 100644
index b0dadc6..0000000
--- a/diffuser/diffuser/environments/walker2d.py
+++ /dev/null
@@ -1,43 +0,0 @@
-import os
-import numpy as np
-from gym import utils
-from gym.envs.mujoco import mujoco_env
-
-class Walker2dFullObsEnv(mujoco_env.MujocoEnv, utils.EzPickle):
-
-    def __init__(self):
-        asset_path = os.path.join(
-            os.path.dirname(__file__), 'assets/walker2d.xml')
-        mujoco_env.MujocoEnv.__init__(self, asset_path, 4)
-        utils.EzPickle.__init__(self)
-
-    def step(self, a):
-        posbefore = self.sim.data.qpos[0]
-        self.do_simulation(a, self.frame_skip)
-        posafter, height, ang = self.sim.data.qpos[0:3]
-        alive_bonus = 1.0
-        reward = ((posafter - posbefore) / self.dt)
-        reward += alive_bonus
-        reward -= 1e-3 * np.square(a).sum()
-        done = not (height > 0.8 and height < 2.0 and
-                    ang > -1.0 and ang < 1.0)
-        ob = self._get_obs()
-        return ob, reward, done, {}
-
-    def _get_obs(self):
-        qpos = self.sim.data.qpos
-        qvel = self.sim.data.qvel
-        return np.concatenate([qpos, qvel]).ravel()
-
-    def reset_model(self):
-        self.set_state(
-            self.init_qpos + self.np_random.uniform(low=-.005, high=.005, size=self.model.nq),
-            self.init_qvel + self.np_random.uniform(low=-.005, high=.005, size=self.model.nv)
-        )
-        return self._get_obs()
-
-    def viewer_setup(self):
-        self.viewer.cam.trackbodyid = 2
-        self.viewer.cam.distance = self.model.stat.extent * 0.5
-        self.viewer.cam.lookat[2] = 1.15
-        self.viewer.cam.elevation = -20
diff --git a/diffuser/diffuser/guides/policies.py b/diffuser/diffuser/guides/policies.py
deleted file mode 100644
index c6a460c..0000000
--- a/diffuser/diffuser/guides/policies.py
+++ /dev/null
@@ -1,77 +0,0 @@
-from collections import namedtuple
-# import numpy as np
-import torch
-import einops
-import pdb
-
-import diffuser.utils as utils
-# from diffusion.datasets.preprocessing import get_policy_preprocess_fn
-
-Trajectories = namedtuple('Trajectories', 'actions observations')
-# GuidedTrajectories = namedtuple('GuidedTrajectories', 'actions observations value')
-
-class Policy:
-
-    def __init__(self, diffusion_model, normalizer):
-        self.diffusion_model = diffusion_model
-        self.normalizer = normalizer
-        self.action_dim = normalizer.action_dim
-
-    @property
-    def device(self):
-        parameters = list(self.diffusion_model.parameters())
-        return parameters[0].device
-
-    def _format_conditions(self, conditions, batch_size):
-        conditions = utils.apply_dict(
-            self.normalizer.normalize,
-            conditions,
-            'observations',
-        )
-        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')
-        conditions = utils.apply_dict(
-            einops.repeat,
-            conditions,
-            'd -> repeat d', repeat=batch_size,
-        )
-        return conditions
-
-    def __call__(self, conditions, debug=False, batch_size=1):
-
-
-        conditions = self._format_conditions(conditions, batch_size)
-
-        ## batchify and move to tensor [ batch_size x observation_dim ]
-        # observation_np = observation_np[None].repeat(batch_size, axis=0)
-        # observation = utils.to_torch(observation_np, device=self.device)
-
-        ## run reverse diffusion process
-        sample = self.diffusion_model(conditions)
-        sample = utils.to_np(sample)
-
-        ## extract action [ batch_size x horizon x transition_dim ]
-        actions = sample[:, :, :self.action_dim]
-        actions = self.normalizer.unnormalize(actions, 'actions')
-        # actions = np.tanh(actions)
-
-        ## extract first action
-        action = actions[0, 0]
-
-        # if debug:
-        normed_observations = sample[:, :, self.action_dim:]
-        observations = self.normalizer.unnormalize(normed_observations, 'observations')
-
-        # if deltas.shape[-1] < observation.shape[-1]:
-        #     qvel_dim = observation.shape[-1] - deltas.shape[-1]
-        #     padding = np.zeros([*deltas.shape[:-1], qvel_dim])
-        #     deltas = np.concatenate([deltas, padding], axis=-1)
-
-        # ## [ batch_size x horizon x observation_dim ]
-        # next_observations = observation_np + deltas.cumsum(axis=1)
-        # ## [ batch_size x (horizon + 1) x observation_dim ]
-        # observations = np.concatenate([observation_np[:,None], next_observations], axis=1)
-
-        trajectories = Trajectories(actions, observations)
-        return action, trajectories
-        # else:
-        #     return action
diff --git a/diffuser/diffuser/models/__init__.py b/diffuser/diffuser/models/__init__.py
deleted file mode 100644
index ebd7938..0000000
--- a/diffuser/diffuser/models/__init__.py
+++ /dev/null
@@ -1,2 +0,0 @@
-from .temporal import TemporalUnet, TemporalValue
-from .diffusion import GaussianDiffusion
\ No newline at end of file
diff --git a/diffuser/diffuser/models/diffusion.py b/diffuser/diffuser/models/diffusion.py
deleted file mode 100644
index fae4cfd..0000000
--- a/diffuser/diffuser/models/diffusion.py
+++ /dev/null
@@ -1,214 +0,0 @@
-import numpy as np
-import torch
-from torch import nn
-import pdb
-
-import diffuser.utils as utils
-from .helpers import (
-    cosine_beta_schedule,
-    extract,
-    apply_conditioning,
-    Losses,
-)
-
-class GaussianDiffusion(nn.Module):
-    def __init__(self, model, horizon, observation_dim, action_dim, n_timesteps=1000,
-        loss_type='l1', clip_denoised=False, predict_epsilon=True,
-        action_weight=1.0, loss_discount=1.0, loss_weights=None,
-    ):
-        super().__init__()
-        self.horizon = horizon
-        self.observation_dim = observation_dim
-        self.action_dim = action_dim
-        self.transition_dim = observation_dim + action_dim
-        self.model = model
-
-        betas = cosine_beta_schedule(n_timesteps)
-        alphas = 1. - betas
-        alphas_cumprod = torch.cumprod(alphas, axis=0)
-        alphas_cumprod_prev = torch.cat([torch.ones(1), alphas_cumprod[:-1]])
-
-        self.n_timesteps = int(n_timesteps)
-        self.clip_denoised = clip_denoised
-        self.predict_epsilon = predict_epsilon
-
-        self.register_buffer('betas', betas)
-        self.register_buffer('alphas_cumprod', alphas_cumprod)
-        self.register_buffer('alphas_cumprod_prev', alphas_cumprod_prev)
-
-        # calculations for diffusion q(x_t | x_{t-1}) and others
-        self.register_buffer('sqrt_alphas_cumprod', torch.sqrt(alphas_cumprod))
-        self.register_buffer('sqrt_one_minus_alphas_cumprod', torch.sqrt(1. - alphas_cumprod))
-        self.register_buffer('log_one_minus_alphas_cumprod', torch.log(1. - alphas_cumprod))
-        self.register_buffer('sqrt_recip_alphas_cumprod', torch.sqrt(1. / alphas_cumprod))
-        self.register_buffer('sqrt_recipm1_alphas_cumprod', torch.sqrt(1. / alphas_cumprod - 1))
-
-        # calculations for posterior q(x_{t-1} | x_t, x_0)
-        posterior_variance = betas * (1. - alphas_cumprod_prev) / (1. - alphas_cumprod)
-        self.register_buffer('posterior_variance', posterior_variance)
-
-        ## log calculation clipped because the posterior variance
-        ## is 0 at the beginning of the diffusion chain
-        self.register_buffer('posterior_log_variance_clipped',
-            torch.log(torch.clamp(posterior_variance, min=1e-20)))
-        self.register_buffer('posterior_mean_coef1',
-            betas * np.sqrt(alphas_cumprod_prev) / (1. - alphas_cumprod))
-        self.register_buffer('posterior_mean_coef2',
-            (1. - alphas_cumprod_prev) * np.sqrt(alphas) / (1. - alphas_cumprod))
-
-        ## get loss coefficients and initialize objective
-        loss_weights = self.get_loss_weights(action_weight, loss_discount, loss_weights)
-        self.loss_fn = Losses[loss_type](loss_weights, self.action_dim)
-
-    def get_loss_weights(self, action_weight, discount, weights_dict):
-        '''
-            sets loss coefficients for trajectory
-
-            action_weight   : float
-                coefficient on first action loss
-            discount   : float
-                multiplies t^th timestep of trajectory loss by discount**t
-            weights_dict    : dict
-                { i: c } multiplies dimension i of observation loss by c
-        '''
-        self.action_weight = action_weight
-
-        dim_weights = torch.ones(self.transition_dim, dtype=torch.float32)
-
-        ## set loss coefficients for dimensions of observation
-        if weights_dict is None: weights_dict = {}
-        for ind, w in weights_dict.items():
-            dim_weights[self.action_dim + ind] *= w
-
-        ## decay loss with trajectory timestep: discount**t
-        discounts = discount ** torch.arange(self.horizon, dtype=torch.float)
-        discounts = discounts / discounts.mean()
-        loss_weights = torch.einsum('h,t->ht', discounts, dim_weights)
-
-        ## manually set a0 weight
-        loss_weights[0, :self.action_dim] = action_weight
-        return loss_weights
-
-    #------------------------------------------ sampling ------------------------------------------#
-
-    def predict_start_from_noise(self, x_t, t, noise):
-        '''
-            if self.predict_epsilon, model output is (scaled) noise;
-            otherwise, model predicts x0 directly
-        '''
-        if self.predict_epsilon:
-            return (
-                extract(self.sqrt_recip_alphas_cumprod, t, x_t.shape) * x_t -
-                extract(self.sqrt_recipm1_alphas_cumprod, t, x_t.shape) * noise
-            )
-        else:
-            return noise
-
-    def q_posterior(self, x_start, x_t, t):
-        posterior_mean = (
-            extract(self.posterior_mean_coef1, t, x_t.shape) * x_start +
-            extract(self.posterior_mean_coef2, t, x_t.shape) * x_t
-        )
-        posterior_variance = extract(self.posterior_variance, t, x_t.shape)
-        posterior_log_variance_clipped = extract(self.posterior_log_variance_clipped, t, x_t.shape)
-        return posterior_mean, posterior_variance, posterior_log_variance_clipped
-
-    def p_mean_variance(self, x, cond, t):
-        x_recon = self.predict_start_from_noise(x, t=t, noise=self.model(x, cond, t))
-
-        if self.clip_denoised:
-            x_recon.clamp_(-1., 1.)
-        else:
-            assert RuntimeError()
-
-        model_mean, posterior_variance, posterior_log_variance = self.q_posterior(
-                x_start=x_recon, x_t=x, t=t)
-        return model_mean, posterior_variance, posterior_log_variance
-
-    @torch.no_grad()
-    def p_sample(self, x, cond, t):
-        b, *_, device = *x.shape, x.device
-        model_mean, _, model_log_variance = self.p_mean_variance(x=x, cond=cond, t=t)
-        noise = torch.randn_like(x)
-        # no noise when t == 0
-        nonzero_mask = (1 - (t == 0).float()).reshape(b, *((1,) * (len(x.shape) - 1)))
-        return model_mean + nonzero_mask * (0.5 * model_log_variance).exp() * noise
-
-    @torch.no_grad()
-    def p_sample_loop(self, shape, cond, verbose=True, return_diffusion=False):
-        device = self.betas.device
-
-        batch_size = shape[0]
-        x = torch.randn(shape, device=device)
-        x = apply_conditioning(x, cond, self.action_dim)
-
-        if return_diffusion: diffusion = [x]
-
-        progress = utils.Progress(self.n_timesteps) if verbose else utils.Silent()
-        for i in reversed(range(0, self.n_timesteps)):
-            timesteps = torch.full((batch_size,), i, device=device, dtype=torch.long)
-            x = self.p_sample(x, cond, timesteps)
-            x = apply_conditioning(x, cond, self.action_dim)
-
-            progress.update({'t': i})
-
-            if return_diffusion: diffusion.append(x)
-
-        progress.close()
-
-        if return_diffusion:
-            return x, torch.stack(diffusion, dim=1)
-        else:
-            return x
-
-    @torch.no_grad()
-    def conditional_sample(self, cond, *args, horizon=None, **kwargs):
-        '''
-            conditions : [ (time, state), ... ]
-        '''
-        device = self.betas.device
-        batch_size = len(cond[0])
-        horizon = horizon or self.horizon
-        shape = (batch_size, horizon, self.transition_dim)
-
-        return self.p_sample_loop(shape, cond, *args, **kwargs)
-
-    #------------------------------------------ training ------------------------------------------#
-
-    def q_sample(self, x_start, t, noise=None):
-        if noise is None:
-            noise = torch.randn_like(x_start)
-
-        sample = (
-            extract(self.sqrt_alphas_cumprod, t, x_start.shape) * x_start +
-            extract(self.sqrt_one_minus_alphas_cumprod, t, x_start.shape) * noise
-        )
-
-        return sample
-
-    def p_losses(self, x_start, cond, t):
-        noise = torch.randn_like(x_start)
-
-        x_noisy = self.q_sample(x_start=x_start, t=t, noise=noise)
-        x_noisy = apply_conditioning(x_noisy, cond, self.action_dim)
-
-        x_recon = self.model(x_noisy, cond, t)
-        x_recon = apply_conditioning(x_recon, cond, self.action_dim)
-
-        assert noise.shape == x_recon.shape
-
-        if self.predict_epsilon:
-            loss, info = self.loss_fn(x_recon, noise)
-        else:
-            loss, info = self.loss_fn(x_recon, x_start)
-
-        return loss, info
-
-    def loss(self, x, cond):
-        batch_size = len(x)
-        t = torch.randint(0, self.n_timesteps, (batch_size,), device=x.device).long()
-        return self.p_losses(x, cond, t)
-
-    def forward(self, cond, *args, **kwargs):
-        return self.conditional_sample(cond=cond, *args, **kwargs)
-
diff --git a/diffuser/diffuser/models/helpers.py b/diffuser/diffuser/models/helpers.py
deleted file mode 100644
index d39f35d..0000000
--- a/diffuser/diffuser/models/helpers.py
+++ /dev/null
@@ -1,165 +0,0 @@
-import math
-import numpy as np
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import einops
-from einops.layers.torch import Rearrange
-import pdb
-
-import diffuser.utils as utils
-
-#-----------------------------------------------------------------------------#
-#---------------------------------- modules ----------------------------------#
-#-----------------------------------------------------------------------------#
-
-class SinusoidalPosEmb(nn.Module):
-    def __init__(self, dim):
-        super().__init__()
-        self.dim = dim
-
-    def forward(self, x):
-        device = x.device
-        half_dim = self.dim // 2
-        emb = math.log(10000) / (half_dim - 1)
-        emb = torch.exp(torch.arange(half_dim, device=device) * -emb)
-        emb = x[:, None] * emb[None, :]
-        emb = torch.cat((emb.sin(), emb.cos()), dim=-1)
-        return emb
-
-class Downsample1d(nn.Module):
-    def __init__(self, dim):
-        super().__init__()
-        self.conv = nn.Conv1d(dim, dim, 3, 2, 1)
-
-    def forward(self, x):
-        return self.conv(x)
-
-class Upsample1d(nn.Module):
-    def __init__(self, dim):
-        super().__init__()
-        self.conv = nn.ConvTranspose1d(dim, dim, 4, 2, 1)
-
-    def forward(self, x):
-        return self.conv(x)
-
-class Conv1dBlock(nn.Module):
-    '''
-        Conv1d --> GroupNorm --> Mish
-    '''
-
-    def __init__(self, inp_channels, out_channels, kernel_size, n_groups=8):
-        super().__init__()
-
-        self.block = nn.Sequential(
-            nn.Conv1d(inp_channels, out_channels, kernel_size, padding=kernel_size // 2),
-            Rearrange('batch channels horizon -> batch channels 1 horizon'),
-            nn.GroupNorm(n_groups, out_channels),
-            Rearrange('batch channels 1 horizon -> batch channels horizon'),
-            nn.Mish(),
-        )
-
-    def forward(self, x):
-        return self.block(x)
-
-
-#-----------------------------------------------------------------------------#
-#---------------------------------- sampling ---------------------------------#
-#-----------------------------------------------------------------------------#
-
-def extract(a, t, x_shape):
-    b, *_ = t.shape
-    out = a.gather(-1, t)
-    return out.reshape(b, *((1,) * (len(x_shape) - 1)))
-
-def cosine_beta_schedule(timesteps, s=0.008, dtype=torch.float32):
-    """
-    cosine schedule
-    as proposed in https://openreview.net/forum?id=-NEXDKk8gZ
-    """
-    steps = timesteps + 1
-    x = np.linspace(0, steps, steps)
-    alphas_cumprod = np.cos(((x / steps) + s) / (1 + s) * np.pi * 0.5) ** 2
-    alphas_cumprod = alphas_cumprod / alphas_cumprod[0]
-    betas = 1 - (alphas_cumprod[1:] / alphas_cumprod[:-1])
-    betas_clipped = np.clip(betas, a_min=0, a_max=0.999)
-    return torch.tensor(betas_clipped, dtype=dtype)
-
-def apply_conditioning(x, conditions, action_dim):
-    for t, val in conditions.items():
-        x[:, t, action_dim:] = val.clone()
-    return x
-
-
-#-----------------------------------------------------------------------------#
-#---------------------------------- losses -----------------------------------#
-#-----------------------------------------------------------------------------#
-
-class WeightedLoss(nn.Module):
-
-    def __init__(self, weights, action_dim):
-        super().__init__()
-        self.register_buffer('weights', weights)
-        self.action_dim = action_dim
-
-    def forward(self, pred, targ):
-        '''
-            pred, targ : tensor
-                [ batch_size x horizon x transition_dim ]
-        '''
-        loss = self._loss(pred, targ)
-        weighted_loss = (loss * self.weights).mean()
-        a0_loss = (loss[:, 0, :self.action_dim] / self.weights[0, :self.action_dim]).mean()
-        return weighted_loss, {'a0_loss': a0_loss}
-
-class ValueLoss(nn.Module):
-    def __init__(self, *args):
-        super().__init__()
-        pass
-
-    def forward(self, pred, targ):
-        loss = self._loss(pred, targ).mean()
-
-        if len(pred) > 1:
-            corr = np.corrcoef(
-                utils.to_np(pred).squeeze(),
-                utils.to_np(targ).squeeze()
-            )[0,1]
-        else:
-            corr = np.NaN
-
-        info = {
-            'mean_pred': pred.mean(), 'mean_targ': targ.mean(),
-            'min_pred': pred.min(), 'min_targ': targ.min(),
-            'max_pred': pred.max(), 'max_targ': targ.max(),
-            'corr': corr,
-        }
-
-        return loss, info
-
-class WeightedL1(WeightedLoss):
-
-    def _loss(self, pred, targ):
-        return torch.abs(pred - targ)
-
-class WeightedL2(WeightedLoss):
-
-    def _loss(self, pred, targ):
-        return F.mse_loss(pred, targ, reduction='none')
-
-class ValueL1(ValueLoss):
-
-    def _loss(self, pred, targ):
-        return torch.abs(pred - targ)
-
-class ValueL2(ValueLoss):
-
-    def _loss(self, pred, targ):
-        return F.mse_loss(pred, targ, reduction='none')
-
-Losses = {
-    'l1': WeightedL1,
-    'l2': WeightedL2,
-    'value_l1': ValueL1,
-    'value_l2': ValueL2,
-}
diff --git a/diffuser/diffuser/models/temporal.py b/diffuser/diffuser/models/temporal.py
deleted file mode 100644
index e0b9e5c..0000000
--- a/diffuser/diffuser/models/temporal.py
+++ /dev/null
@@ -1,337 +0,0 @@
-import torch
-import torch.nn as nn
-import einops
-from einops.layers.torch import Rearrange
-import pdb
-
-from .helpers import (
-    SinusoidalPosEmb,
-    Downsample1d,
-    Upsample1d,
-    Conv1dBlock,
-)
-
-class ResidualTemporalBlock(nn.Module):
-
-    def __init__(self, inp_channels, out_channels, embed_dim, horizon, kernel_size=5):
-        super().__init__()
-
-        self.blocks = nn.ModuleList([
-            Conv1dBlock(inp_channels, out_channels, kernel_size),
-            Conv1dBlock(out_channels, out_channels, kernel_size),
-        ])
-
-        self.time_mlp = nn.Sequential(
-            nn.Mish(),
-            nn.Linear(embed_dim, out_channels),
-            Rearrange('batch t -> batch t 1'),
-        )
-
-        self.residual_conv = nn.Conv1d(inp_channels, out_channels, 1) \
-            if inp_channels != out_channels else nn.Identity()
-
-    def forward(self, x, t):
-        '''
-            x : [ batch_size x inp_channels x horizon ]
-            t : [ batch_size x embed_dim ]
-            returns:
-            out : [ batch_size x out_channels x horizon ]
-        '''
-        out = self.blocks[0](x) + self.time_mlp(t)
-        out = self.blocks[1](out)
-        return out + self.residual_conv(x)
-
-class TemporalUnet(nn.Module):
-
-    def __init__(
-        self,
-        horizon,
-        transition_dim,
-        cond_dim,
-        dim=32,
-        dim_mults=(1, 2, 4, 8),
-    ):
-        super().__init__()
-
-        dims = [transition_dim, *map(lambda m: dim * m, dim_mults)]
-        in_out = list(zip(dims[:-1], dims[1:]))
-        print(f'[ models/temporal ] Channel dimensions: {in_out}')
-
-        time_dim = dim
-        self.time_mlp = nn.Sequential(
-            SinusoidalPosEmb(dim),
-            nn.Linear(dim, dim * 4),
-            nn.Mish(),
-            nn.Linear(dim * 4, dim),
-        )
-
-        self.downs = nn.ModuleList([])
-        self.ups = nn.ModuleList([])
-        num_resolutions = len(in_out)
-
-        print(in_out)
-        for ind, (dim_in, dim_out) in enumerate(in_out):
-            is_last = ind >= (num_resolutions - 1)
-
-            self.downs.append(nn.ModuleList([
-                ResidualTemporalBlock(dim_in, dim_out, embed_dim=time_dim, horizon=horizon),
-                ResidualTemporalBlock(dim_out, dim_out, embed_dim=time_dim, horizon=horizon),
-                Downsample1d(dim_out) if not is_last else nn.Identity()
-            ]))
-
-            if not is_last:
-                horizon = horizon // 2
-
-        mid_dim = dims[-1]
-        self.mid_block1 = ResidualTemporalBlock(mid_dim, mid_dim, embed_dim=time_dim, horizon=horizon)
-        self.mid_block2 = ResidualTemporalBlock(mid_dim, mid_dim, embed_dim=time_dim, horizon=horizon)
-
-        for ind, (dim_in, dim_out) in enumerate(reversed(in_out[1:])):
-            is_last = ind >= (num_resolutions - 1)
-
-            self.ups.append(nn.ModuleList([
-                ResidualTemporalBlock(dim_out * 2, dim_in, embed_dim=time_dim, horizon=horizon),
-                ResidualTemporalBlock(dim_in, dim_in, embed_dim=time_dim, horizon=horizon),
-                Upsample1d(dim_in) if not is_last else nn.Identity()
-            ]))
-
-            if not is_last:
-                horizon = horizon * 2
-
-        self.final_conv = nn.Sequential(
-            Conv1dBlock(dim, dim, kernel_size=5),
-            nn.Conv1d(dim, transition_dim, 1),
-        )
-
-    def forward(self, x, cond, time):
-        '''
-            x : [ batch x horizon x transition ]
-        '''
-
-        x = einops.rearrange(x, 'b h t -> b t h')
-
-        t = self.time_mlp(time)
-        h = []
-
-        for resnet, resnet2, downsample in self.downs:
-            x = resnet(x, t)
-            x = resnet2(x, t)
-            h.append(x)
-            x = downsample(x)
-
-        x = self.mid_block1(x, t)
-        x = self.mid_block2(x, t)
-
-        for resnet, resnet2, upsample in self.ups:
-            x = torch.cat((x, h.pop()), dim=1)
-            x = resnet(x, t)
-            x = resnet2(x, t)
-            x = upsample(x)
-
-        x = self.final_conv(x)
-
-        x = einops.rearrange(x, 'b t h -> b h t')
-        return x
-
-class TemporalValue(nn.Module):
-
-    def __init__(
-        self,
-        horizon,
-        transition_dim,
-        cond_dim,
-        dim=32,
-        time_dim=None,
-        out_dim=1,
-        dim_mults=(1, 2, 4, 8),
-    ):
-        super().__init__()
-
-        dims = [transition_dim, *map(lambda m: dim * m, dim_mults)]
-        in_out = list(zip(dims[:-1], dims[1:]))
-
-        time_dim = time_dim or dim
-        self.time_mlp = nn.Sequential(
-            SinusoidalPosEmb(dim),
-            nn.Linear(dim, dim * 4),
-            nn.Mish(),
-            nn.Linear(dim * 4, dim),
-        )
-
-        self.blocks = nn.ModuleList([])
-
-        print(in_out)
-        for dim_in, dim_out in in_out:
-
-            self.blocks.append(nn.ModuleList([
-                ResidualTemporalBlock(dim_in, dim_out, kernel_size=5, embed_dim=time_dim, horizon=horizon),
-                ResidualTemporalBlock(dim_out, dim_out, kernel_size=5, embed_dim=time_dim, horizon=horizon),
-                Downsample1d(dim_out)
-            ]))
-
-            horizon = horizon // 2
-
-        fc_dim = dims[-1] * max(horizon, 1)
-
-        self.final_block = nn.Sequential(
-            nn.Linear(fc_dim + time_dim, fc_dim // 2),
-            nn.Mish(),
-            nn.Linear(fc_dim // 2, out_dim),
-        )
-
-    def forward(self, x, cond, time, *args):
-        '''
-            x : [ batch x horizon x transition ]
-        '''
-
-        x = einops.rearrange(x, 'b h t -> b t h')
-
-        t = self.time_mlp(time)
-
-        for resnet, resnet2, downsample in self.blocks:
-            x = resnet(x, t)
-            x = resnet2(x, t)
-            x = downsample(x)
-
-        x = x.view(len(x), -1)
-        out = self.final_block(torch.cat([x, t], dim=-1))
-        return out
-
-
-# class TemporalMixerUnet(nn.Module):
-
-#     def __init__(
-#         self,
-#         horizon,
-#         transition_dim,
-#         cond_dim,
-#         dim=32,
-#         dim_mults=(1, 2, 4, 8),
-#     ):
-#         super().__init__()
-#         # self.channels = channels
-
-#         dims = [transition_dim, *map(lambda m: dim * m, dim_mults)]
-#         in_out = list(zip(dims[:-1], dims[1:]))
-
-#         time_dim = dim
-#         self.time_mlp = nn.Sequential(
-#             SinusoidalPosEmb(dim),
-#             nn.Linear(dim, dim * 4),
-#             nn.Mish(),
-#             nn.Linear(dim * 4, dim),
-#         )
-#         self.cond_mlp = nn.Sequential(
-#             nn.Linear(cond_dim, dim * 4),
-#             nn.GELU(),
-#             nn.Linear(dim * 4, dim),
-#         )
-
-#         self.downs = nn.ModuleList([])
-#         self.ups = nn.ModuleList([])
-#         num_resolutions = len(in_out)
-
-#         print(in_out)
-#         for ind, (dim_in, dim_out) in enumerate(in_out):
-#             is_last = ind >= (num_resolutions - 1)
-
-#             self.downs.append(nn.ModuleList([
-#                 ResidualTemporalBlock(dim_in, dim_out, kernel_size=5, embed_dim=time_dim, horizon=horizon),
-#                 ResidualTemporalBlock(dim_out, dim_out, kernel_size=5, embed_dim=time_dim, horizon=horizon),
-#                 nn.Identity(),
-#                 Downsample1d(dim_out) if not is_last else nn.Identity()
-#             ]))
-
-#             if not is_last:
-#                 horizon = horizon // 2
-
-#         mid_dim = dims[-1]
-#         self.mid_block1 = ResidualTemporalBlock(mid_dim, mid_dim, kernel_size=5, embed_dim=time_dim, horizon=horizon)
-#         self.mid_attn = nn.Identity()
-#         self.mid_block2 = ResidualTemporalBlock(mid_dim, mid_dim, kernel_size=5, embed_dim=time_dim, horizon=horizon)
-
-#         for ind, (dim_in, dim_out) in enumerate(reversed(in_out[1:])):
-#             is_last = ind >= (num_resolutions - 1)
-
-#             self.ups.append(nn.ModuleList([
-#                 ResidualTemporalBlock(dim_out * 2, dim_in, kernel_size=5, embed_dim=time_dim, horizon=horizon),
-#                 ResidualTemporalBlock(dim_in, dim_in, kernel_size=5, embed_dim=time_dim, horizon=horizon),
-#                 nn.Identity(),
-#                 Downsample1d(dim_in) if not is_last else nn.Identity()
-#             ]))
-
-#             if not is_last:
-#                 horizon = horizon * 2
-
-#         self.final_conv = nn.Sequential(
-#             # TemporalHelper(dim, dim, kernel_size=5),
-#             Conv1dBlock(dim, dim, kernel_size=5),
-#             nn.Conv1d(dim, transition_dim, 1),
-#         )
-
-
-#     def forward(self, x, cond, time):
-#         '''
-#             x : [ batch x horizon x transition ]
-#         '''
-#         t = self.time_mlp(time)
-#         # cond = self.cond_mlp(cond)
-#         cond = None
-
-#         h = []
-
-#         # x = x[:,None]
-#         # t = torch.cat([t, cond], dim=-1)
-
-#         x = einops.rearrange(x, 'b h t -> b t h')
-
-#         for resnet, resnet2, attn, downsample in self.downs:
-#             # print('0', x.shape, t.shape)
-#             x = resnet(x, t, cond)
-#             # print('resnet', x.shape, t.shape)
-#             x = resnet2(x, t, cond)
-#             # print('resnet2', x.shape)
-#             ##
-#             x = einops.rearrange(x, 'b t h -> b t h 1')
-#             x = attn(x)
-#             x = einops.rearrange(x, 'b t h 1 -> b t h')
-#             ##
-#             # print('attn', x.shape)
-#             h.append(x)
-#             x = downsample(x)
-#             # print('downsample', x.shape, '\n')
-
-#         x = self.mid_block1(x, t, cond)
-#         ##
-#         x = einops.rearrange(x, 'b t h -> b t h 1')
-#         x = self.mid_attn(x)
-#         x = einops.rearrange(x, 'b t h 1 -> b t h')
-#         ##
-#         x = self.mid_block2(x, t, cond)
-#         # print('mid done!', x.shape, '\n')
-
-#         for resnet, resnet2, attn, upsample in self.ups:
-#             # print('0', x.shape)
-#             x = torch.cat((x, h.pop()), dim=1)
-#             # print('cat', x.shape)
-#             x = resnet(x, t, cond)
-#             # print('resnet', x.shape)
-#             x = resnet2(x, t, cond)
-#             # print('resnet2', x.shape)
-#             ##
-#             x = einops.rearrange(x, 'b t h -> b t h 1')
-#             x = attn(x)
-#             x = einops.rearrange(x, 'b t h 1 -> b t h')
-#             ##
-#             # print('attn', x.shape)
-#             x = upsample(x)
-#             # print('upsample', x.shape)
-#         # pdb.set_trace()
-#         x = self.final_conv(x)
-
-#         # x = x.squeeze(dim=1)
-
-#         ##
-#         x = einops.rearrange(x, 'b t h -> b h t')
-#         ##
-#         return x
diff --git a/diffuser/diffuser/utils/__init__.py b/diffuser/diffuser/utils/__init__.py
deleted file mode 100644
index f8ee514..0000000
--- a/diffuser/diffuser/utils/__init__.py
+++ /dev/null
@@ -1,8 +0,0 @@
-from .serialization import *
-from .training import *
-from .progress import *
-from .setup import *
-from .config import *
-from .rendering import *
-from .arrays import *
-from .colab import *
diff --git a/diffuser/diffuser/utils/arrays.py b/diffuser/diffuser/utils/arrays.py
deleted file mode 100644
index c3a9d24..0000000
--- a/diffuser/diffuser/utils/arrays.py
+++ /dev/null
@@ -1,128 +0,0 @@
-import collections
-import numpy as np
-import torch
-import pdb
-
-DTYPE = torch.float
-DEVICE = 'cuda:0'
-
-#-----------------------------------------------------------------------------#
-#------------------------------ numpy <--> torch -----------------------------#
-#-----------------------------------------------------------------------------#
-
-def to_np(x):
-	if torch.is_tensor(x):
-		x = x.detach().cpu().numpy()
-	return x
-
-def to_torch(x, dtype=None, device=None):
-	dtype = dtype or DTYPE
-	device = device or DEVICE
-	if type(x) is dict:
-		return {k: to_torch(v, dtype, device) for k, v in x.items()}
-	elif torch.is_tensor(x):
-		return x.to(device).type(dtype)
-		# import pdb; pdb.set_trace()
-	return torch.tensor(x, dtype=dtype, device=device)
-
-def to_device(x, device=DEVICE):
-	if torch.is_tensor(x):
-		return x.to(device)
-	elif type(x) is dict:
-		return {k: to_device(v, device) for k, v in x.items()}
-	else:
-		print(f'Unrecognized type in `to_device`: {type(x)}')
-		pdb.set_trace()
-	# return [x.to(device) for x in xs]
-
-# def atleast_2d(x, axis=0):
-# 	'''
-# 		works for both np arrays and torch tensors
-# 	'''
-# 	while len(x.shape) < 2:
-# 		shape = (1, *x.shape) if axis == 0 else (*x.shape, 1)
-# 		x = x.reshape(*shape)
-# 	return x
-
-# def to_2d(x):
-# 	dim = x.shape[-1]
-# 	return x.reshape(-1, dim)
-
-def batchify(batch):
-	'''
-		convert a single dataset item to a batch suitable for passing to a model by
-			1) converting np arrays to torch tensors and
-			2) and ensuring that everything has a batch dimension
-	'''
-	fn = lambda x: to_torch(x[None])
-
-	batched_vals = []
-	for field in batch._fields:
-		val = getattr(batch, field)
-		val = apply_dict(fn, val) if type(val) is dict else fn(val)
-		batched_vals.append(val)
-	return type(batch)(*batched_vals)
-
-def apply_dict(fn, d, *args, **kwargs):
-	return {
-		k: fn(v, *args, **kwargs)
-		for k, v in d.items()
-	}
-
-def normalize(x):
-	"""
-		scales `x` to [0, 1]
-	"""
-	x = x - x.min()
-	x = x / x.max()
-	return x
-
-def to_img(x):
-    normalized = normalize(x)
-    array = to_np(normalized)
-    array = np.transpose(array, (1,2,0))
-    return (array * 255).astype(np.uint8)
-
-def set_device(device):
-	DEVICE = device
-	if 'cuda' in device:
-		torch.set_default_tensor_type(torch.cuda.FloatTensor)
-
-def batch_to_device(batch, device='cuda:0'):
-    vals = [
-        to_device(getattr(batch, field), device)
-        for field in batch._fields
-    ]
-    return type(batch)(*vals)
-
-def _to_str(num):
-	if num >= 1e6:
-		return f'{(num/1e6):.2f} M'
-	else:
-		return f'{(num/1e3):.2f} k'
-
-#-----------------------------------------------------------------------------#
-#----------------------------- parameter counting ----------------------------#
-#-----------------------------------------------------------------------------#
-
-def param_to_module(param):
-	module_name = param[::-1].split('.', maxsplit=1)[-1][::-1]
-	return module_name
-
-def report_parameters(model, topk=10):
-	counts = {k: p.numel() for k, p in model.named_parameters()}
-	n_parameters = sum(counts.values())
-	print(f'[ utils/arrays ] Total parameters: {_to_str(n_parameters)}')
-
-	modules = dict(model.named_modules())
-	sorted_keys = sorted(counts, key=lambda x: -counts[x])
-	max_length = max([len(k) for k in sorted_keys])
-	for i in range(topk):
-		key = sorted_keys[i]
-		count = counts[key]
-		module = param_to_module(key)
-		print(' '*8, f'{key:10}: {_to_str(count)} | {modules[module]}')
-
-	remaining_parameters = sum([counts[k] for k in sorted_keys[topk:]])
-	print(' '*8, f'... and {len(counts)-topk} others accounting for {_to_str(remaining_parameters)} parameters')
-	return n_parameters
diff --git a/diffuser/diffuser/utils/cloud.py b/diffuser/diffuser/utils/cloud.py
deleted file mode 100644
index 6fb8ba6..0000000
--- a/diffuser/diffuser/utils/cloud.py
+++ /dev/null
@@ -1,18 +0,0 @@
-import shlex
-import subprocess
-import pdb
-
-def sync_logs(logdir, bucket, background=False):
-	## remove prefix 'logs' on google cloud
-	destination = 'logs' + logdir.split('logs')[-1]
-	upload_blob(logdir, destination, bucket, background)
-
-def upload_blob(source, destination, bucket, background):
-	command = f'gsutil -m -o GSUtil:parallel_composite_upload_threshold=150M rsync -r {source} {bucket}/{destination}'
-	print(f'[ utils/cloud ] Syncing bucket: {command}')
-	command = shlex.split(command)
-
-	if background:
-		subprocess.Popen(command)
-	else:
-		subprocess.call(command)
diff --git a/diffuser/diffuser/utils/colab.py b/diffuser/diffuser/utils/colab.py
deleted file mode 100644
index 3106210..0000000
--- a/diffuser/diffuser/utils/colab.py
+++ /dev/null
@@ -1,124 +0,0 @@
-import os
-import numpy as np
-import einops
-import matplotlib.pyplot as plt
-from tqdm import tqdm
-
-try:
-    import io
-    import base64
-    from IPython.display import HTML
-    from IPython import display as ipythondisplay
-except:
-    print('[ utils/colab ] Warning: not importing colab dependencies')
-
-from .serialization import mkdir
-from .arrays import to_torch, to_np
-from .video import save_video
-
-
-def run_diffusion(model, dataset, obs, n_samples=1, device='cuda:0', **diffusion_kwargs):
-  ## normalize observation for model
-  obs = dataset.normalizer.normalize(obs, 'observations')
-
-  ## add a batch dimension and repeat for multiple samples
-  ## [ observation_dim ] --> [ n_samples x observation_dim ]
-  obs = obs[None].repeat(n_samples, axis=0)
-
-  ## format `conditions` input for model
-  conditions = {
-    0: to_torch(obs, device=device)
-  }
-
-  samples, diffusion = model.conditional_sample(conditions,
-        return_diffusion=True, verbose=False, **diffusion_kwargs)
-
-  ## [ n_samples x (n_diffusion_steps + 1) x horizon x (action_dim + observation_dim)]
-  diffusion = to_np(diffusion)
-
-  ## extract observations
-  ## [ n_samples x (n_diffusion_steps + 1) x horizon x observation_dim ]
-  normed_observations = diffusion[:, :, :, dataset.action_dim:]
-
-  ## unnormalize observation samples from model
-  observations = dataset.normalizer.unnormalize(normed_observations, 'observations')
-
-  ## [ (n_diffusion_steps + 1) x n_samples x horizon x observation_dim ]
-  observations = einops.rearrange(observations,
-                                  'batch steps horizon dim -> steps batch horizon dim')
-
-  return observations
-
-
-def show_diffusion(renderer, observations, n_repeat=100, substep=1, filename='diffusion.mp4', savebase='/content/videos'):
-    '''
-        observations : [ n_diffusion_steps x batch_size x horizon x observation_dim ]
-    '''
-    mkdir(savebase)
-    savepath = os.path.join(savebase, filename)
-
-    subsampled = observations[::substep]
-
-    images = []
-    for t in tqdm(range(len(subsampled))):
-        observation = subsampled[t]
-
-        img = renderer.composite(None, observation)
-        images.append(img)
-    images = np.stack(images, axis=0)
-
-    ## pause at the end of video
-    images = np.concatenate([
-        images,
-        images[-1:].repeat(n_repeat, axis=0)
-    ], axis=0)
-
-    save_video(savepath, images)
-    show_video(savepath)
-
-
-def show_sample(renderer, observations, filename='sample.mp4', savebase='/content/videos'):
-    '''
-        observations : [ batch_size x horizon x observation_dim ]
-    '''
-
-    mkdir(savebase)
-    savepath = os.path.join(savebase, filename)
-
-    images = []
-    for rollout in observations:
-        ## [ horizon x height x width x channels ]
-        img = renderer.renders(rollout, partial=True)
-        images.append(img)
-
-    ## [ horizon x height x (batch_size * width) x channels ]
-    images = np.concatenate(images, axis=2)
-    
-    save_video(savepath, images)
-    show_video(savepath, height=200)
-
-
-def show_samples(renderer, observations_l, figsize=12):
-    '''
-      observations_l : [ [ n_diffusion_steps x batch_size x horizon x observation_dim ], ... ]
-    '''
-
-    images = []
-    for observations in observations_l:
-      path = observations[-1]
-      img = renderer.composite(None, path)
-      images.append(img)
-    images = np.concatenate(images, axis=0)
-
-    plt.imshow(images)
-    plt.axis('off')
-    plt.gcf().set_size_inches(figsize, figsize)
-
-
-def show_video(path, height=400):
-  video = io.open(path, 'r+b').read()
-  encoded = base64.b64encode(video)
-  ipythondisplay.display(HTML(data='''<video alt="test" autoplay 
-              loop controls style="height: {0}px;">
-              <source src="data:video/mp4;base64,{1}" type="video/mp4" />
-           </video>'''.format(height, encoded.decode('ascii'))))
diff --git a/diffuser/diffuser/utils/config.py b/diffuser/diffuser/utils/config.py
deleted file mode 100644
index fe83bcb..0000000
--- a/diffuser/diffuser/utils/config.py
+++ /dev/null
@@ -1,68 +0,0 @@
-import os
-import collections
-import importlib
-import pickle
-
-def import_class(_class):
-    if type(_class) is not str: return _class
-    ## 'diffusion' on standard installs
-    repo_name = __name__.split('.')[0]
-    ## eg, 'utils'
-    module_name = '.'.join(_class.split('.')[:-1])
-    ## eg, 'Renderer'
-    class_name = _class.split('.')[-1]
-    ## eg, 'diffusion.utils'
-    module = importlib.import_module(f'{repo_name}.{module_name}')
-    ## eg, diffusion.utils.Renderer
-    _class = getattr(module, class_name)
-    print(f'[ utils/config ] Imported {repo_name}.{module_name}:{class_name}')
-    return _class
-
-class Config(collections.Mapping):
-
-    def __init__(self, _class, verbose=True, savepath=None, device=None, **kwargs):
-        self._class = import_class(_class)
-        self._device = device
-        self._dict = {}
-
-        for key, val in kwargs.items():
-            self._dict[key] = val
-
-        if verbose:
-            print(self)
-
-        if savepath is not None:
-            savepath = os.path.join(*savepath) if type(savepath) is tuple else savepath
-            pickle.dump(self, open(savepath, 'wb'))
-            print(f'[ utils/config ] Saved config to: {savepath}\n')
-
-    def __repr__(self):
-        string = f'\n[utils/config ] Config: {self._class}\n'
-        for key in sorted(self._dict.keys()):
-            val = self._dict[key]
-            string += f'    {key}: {val}\n'
-        return string
-
-    def __iter__(self):
-        return iter(self._dict)
-
-    def __getitem__(self, item):
-        return self._dict[item]
-
-    def __len__(self):
-        return len(self._dict)
-
-    def __getattr__(self, attr):
-        if attr == '_dict' and '_dict' not in vars(self):
-            self._dict = {}
-            return self._dict
-        try:
-            return self._dict[attr]
-        except KeyError:
-            raise AttributeError(attr)
-
-    def __call__(self, *args, **kwargs):
-        instance = self._class(*args, **kwargs, **self._dict)
-        if self._device:
-            instance = instance.to(self._device)
-        return instance
diff --git a/diffuser/diffuser/utils/git_utils.py b/diffuser/diffuser/utils/git_utils.py
deleted file mode 100644
index 5225862..0000000
--- a/diffuser/diffuser/utils/git_utils.py
+++ /dev/null
@@ -1,40 +0,0 @@
-import os
-import git
-import pdb
-
-PROJECT_PATH = os.path.dirname(
-    os.path.realpath(os.path.join(__file__, '..', '..')))
-
-def get_repo(path=PROJECT_PATH, search_parent_directories=True):
-    repo = git.Repo(
-        path, search_parent_directories=search_parent_directories)
-    return repo
-
-def get_git_rev(*args, **kwargs):
-    try:
-        repo = get_repo(*args, **kwargs)
-        if repo.head.is_detached:
-            git_rev = repo.head.object.name_rev
-        else:
-            git_rev = repo.active_branch.commit.name_rev
-    except:
-        git_rev = None
-
-    return git_rev
-
-def git_diff(*args, **kwargs):
-    repo = get_repo(*args, **kwargs)
-    diff = repo.git.diff()
-    return diff
-
-def save_git_diff(savepath, *args, **kwargs):
-    diff = git_diff(*args, **kwargs)
-    with open(savepath, 'w') as f:
-        f.write(diff)
-
-if __name__ == '__main__':
-
-    git_rev = get_git_rev()
-    print(git_rev)
-
-    save_git_diff('diff_test.txt')
\ No newline at end of file
diff --git a/diffuser/diffuser/utils/iql.py b/diffuser/diffuser/utils/iql.py
deleted file mode 100644
index 36d3ec6..0000000
--- a/diffuser/diffuser/utils/iql.py
+++ /dev/null
@@ -1,41 +0,0 @@
-import os
-import numpy as np
-import jax
-import jax.numpy as jnp
-import functools
-import pdb
-
-from diffuser.iql.common import Model
-from diffuser.iql.value_net import DoubleCritic
-
-def load_q(env, loadpath, hidden_dims=(256, 256), seed=42):
-    print(f'[ utils/iql ] Loading Q: {loadpath}')
-    observations = env.observation_space.sample()[np.newaxis]
-    actions = env.action_space.sample()[np.newaxis]
-
-    rng = jax.random.PRNGKey(seed)
-    rng, key = jax.random.split(rng)
-
-    critic_def = DoubleCritic(hidden_dims)
-    critic = Model.create(critic_def,
-                          inputs=[key, observations, actions])
-
-    ## allows for relative paths
-    loadpath = os.path.expanduser(loadpath)
-    critic = critic.load(loadpath)
-    return critic
-
-class JaxWrapper:
-
-    def __init__(self, env, loadpath, *args, **kwargs):
-        self.model = load_q(env, loadpath)
-
-    @functools.partial(jax.jit, static_argnames=('self'), device=jax.devices('cpu')[0])
-    def forward(self, xs):
-        Qs = self.model(*xs)
-        Q = jnp.minimum(*Qs)
-        return Q
-
-    def __call__(self, *xs):
-        Q = self.forward(xs)
-        return np.array(Q)
diff --git a/diffuser/diffuser/utils/progress.py b/diffuser/diffuser/utils/progress.py
deleted file mode 100644
index b0c6c47..0000000
--- a/diffuser/diffuser/utils/progress.py
+++ /dev/null
@@ -1,181 +0,0 @@
-import time
-import math
-import pdb
-
-class Progress:
-
-	def __init__(self, total, name = 'Progress', ncol=3, max_length=20, indent=0, line_width=100, speed_update_freq=100):
-		self.total = total
-		self.name = name
-		self.ncol = ncol
-		self.max_length = max_length
-		self.indent = indent
-		self.line_width = line_width
-		self._speed_update_freq = speed_update_freq
-
-		self._step = 0
-		self._prev_line = '\033[F'
-		self._clear_line = ' ' * self.line_width
-
-		self._pbar_size = self.ncol * self.max_length
-		self._complete_pbar = '#' * self._pbar_size
-		self._incomplete_pbar = ' ' * self._pbar_size
-
-		self.lines = ['']
-		self.fraction = '{} / {}'.format(0, self.total)
-
-		self.resume()
-
-		
-	def update(self, description, n=1):
-		self._step += n
-		if self._step % self._speed_update_freq == 0:
-			self._time0 = time.time()
-			self._step0 = self._step
-		self.set_description(description)
-
-	def resume(self):
-		self._skip_lines = 1
-		print('\n', end='')
-		self._time0 = time.time()
-		self._step0 = self._step
-
-	def pause(self):
-		self._clear()
-		self._skip_lines = 1
-
-	def set_description(self, params=[]):
-
-		if type(params) == dict:
-			params = sorted([
-					(key, val)
-					for key, val in params.items()
-				])
-
-		############
-		# Position #
-		############
-		self._clear()
-
-		###########
-		# Percent #
-		###########
-		percent, fraction = self._format_percent(self._step, self.total)
-		self.fraction = fraction
-
-		#########
-		# Speed #
-		#########
-		speed = self._format_speed(self._step)
-
-		##########
-		# Params #
-		##########
-		num_params = len(params)
-		nrow = math.ceil(num_params / self.ncol)
-		params_split = self._chunk(params, self.ncol)
-		params_string, lines = self._format(params_split)
-		self.lines = lines
-
-
-		description = '{} | {}{}'.format(percent, speed, params_string)
-		print(description)
-		self._skip_lines = nrow + 1
-
-	def append_description(self, descr):
-		self.lines.append(descr)
-
-	def _clear(self):
-		position = self._prev_line * self._skip_lines
-		empty = '\n'.join([self._clear_line for _ in range(self._skip_lines)])
-		print(position, end='')
-		print(empty)
-		print(position, end='')
-		
-	def _format_percent(self, n, total):
-		if total:
-			percent = n / float(total)
-
-			complete_entries = int(percent * self._pbar_size)
-			incomplete_entries = self._pbar_size - complete_entries
-
-			pbar = self._complete_pbar[:complete_entries] + self._incomplete_pbar[:incomplete_entries]
-			fraction = '{} / {}'.format(n, total)
-			string = '{} [{}] {:3d}%'.format(fraction, pbar, int(percent*100))
-		else:
-			fraction = '{}'.format(n)
-			string = '{} iterations'.format(n)
-		return string, fraction
-
-	def _format_speed(self, n):
-		num_steps = n - self._step0
-		t = time.time() - self._time0
-		speed = num_steps / t
-		string = '{:.1f} Hz'.format(speed)
-		if num_steps > 0:
-			self._speed = string
-		return string
-
-	def _chunk(self, l, n):
-		return [l[i:i+n] for i in range(0, len(l), n)]
-
-	def _format(self, chunks):
-		lines = [self._format_chunk(chunk) for chunk in chunks]
-		lines.insert(0,'')
-		padding = '\n' + ' '*self.indent
-		string = padding.join(lines)
-		return string, lines
-
-	def _format_chunk(self, chunk):
-		line = ' | '.join([self._format_param(param) for param in chunk])
-		return line
-
-	def _format_param(self, param):
-		k, v = param
-		return '{} : {}'.format(k, v)[:self.max_length]
-
-	def stamp(self):
-		if self.lines != ['']:
-			params = ' | '.join(self.lines)
-			string = '[ {} ] {}{} | {}'.format(self.name, self.fraction, params, self._speed)
-			self._clear()
-			print(string, end='\n')
-			self._skip_lines = 1
-		else:
-			self._clear()
-			self._skip_lines = 0
-
-	def close(self):
-		self.pause()
-
-class Silent:
-
-	def __init__(self, *args, **kwargs):
-		pass
-
-	def __getattr__(self, attr):
-		return lambda *args: None
-
-
-if __name__ == '__main__':
-	silent = Silent()
-	silent.update()
-	silent.stamp()
-
-	num_steps = 1000
-	progress = Progress(num_steps)
-	for i in range(num_steps):
-		progress.update()
-		params = [
-			['A', '{:06d}'.format(i)],
-			['B', '{:06d}'.format(i)],
-			['C', '{:06d}'.format(i)],
-			['D', '{:06d}'.format(i)],
-			['E', '{:06d}'.format(i)],
-			['F', '{:06d}'.format(i)],
-			['G', '{:06d}'.format(i)],
-			['H', '{:06d}'.format(i)],
-        ]
-		progress.set_description(params)
-		time.sleep(0.01)
-	progress.close()
diff --git a/diffuser/diffuser/utils/pybullet_utils.py b/diffuser/diffuser/utils/pybullet_utils.py
deleted file mode 100644
index e62ac6a..0000000
--- a/diffuser/diffuser/utils/pybullet_utils.py
+++ /dev/null
@@ -1,4960 +0,0 @@
-from __future__ import print_function
-
-import collections
-import colorsys
-import inspect
-import json
-import math
-import os
-import pickle
-import platform
-import signal
-import numpy as np
-import pybullet as p
-import random
-import sys
-import time
-import datetime
-import shutil
-import cProfile
-import pstats
-
-from collections import defaultdict, deque, namedtuple
-from itertools import product, combinations, count, cycle, islice
-from multiprocessing import TimeoutError
-from contextlib import contextmanager
-
-from .transformations import quaternion_from_matrix, unit_vector, euler_from_quaternion, quaternion_slerp
-
-directory = os.path.dirname(os.path.abspath(__file__))
-sys.path.append(os.path.join(directory, '../motion'))
-
-#from ..motion.motion_planners.rrt_connect import birrt, direct_path
-
-# from future_builtins import map, filter
-# from builtins import input # TODO - use future
-try:
-    user_input = raw_input
-except NameError:
-    user_input = input
-
-INF = np.inf
-PI = np.pi
-EPSILON = 1e-6
-DEFAULT_TIME_STEP = 1./240. # seconds
-
-Interval = namedtuple('Interval', ['lower', 'upper']) # AABB
-UNIT_LIMITS = Interval(0., 1.)
-CIRCULAR_LIMITS = Interval(-PI, PI)
-UNBOUNDED_LIMITS = Interval(-INF, INF)
-
-# Resources
-# https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit
-# http://www.cs.kent.edu/~ruttan/GameEngines/lectures/Bullet_User_Manual
-
-#####################################
-
-DRAKE_PATH = 'models/drake/'
-
-# Models
-
-# Robots
-# MODEL_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, 'models/'))
-MODEL_DIRECTORY = '/home/janner/mount/blujoco/external/kuka'
-
-ROOMBA_URDF = 'models/turtlebot/roomba.urdf'
-TURTLEBOT_URDF = 'models/turtlebot/turtlebot_holonomic.urdf'
-DRAKE_IIWA_URDF = 'models/drake/iiwa_description/urdf/iiwa14_polytope_collision.urdf'
-WSG_50_URDF = 'models/drake/wsg_50_description/urdf/wsg_50_mesh_visual.urdf' # wsg_50 | wsg_50_mesh_visual | wsg_50_mesh_collision
-#SCHUNK_URDF = 'models/drake/wsg_50_description/sdf/schunk_wsg_50.sdf'
-PANDA_HAND_URDF = "models/franka_description/robots/hand.urdf"
-PANDA_ARM_URDF = "models/franka_description/robots/panda_arm_hand.urdf"
-
-# PyBullet Robots
-#PYBULLET_DIRECTORY = add_data_path()
-KUKA_IIWA_URDF = 'kuka_iiwa/model.urdf'
-KUKA_IIWA_GRIPPER_SDF = 'kuka_iiwa/kuka_with_gripper.sdf'
-R2D2_URDF = 'r2d2.urdf'
-MINITAUR_URDF = 'quadruped/minitaur.urdf'
-HUMANOID_MJCF = 'mjcf/humanoid.xml'
-HUSKY_URDF = 'husky/husky.urdf'
-RACECAR_URDF = 'racecar/racecar.urdf' # racecar_differential.urdf
-PR2_GRIPPER = 'pr2_gripper.urdf'
-PANDA_URDF = 'franka_panda/panda.urdf'
-
-# PyBullet wsg50 robots
-# wsg50_one_motor_gripper.sdf - no visual
-# wsg50_one_motor_gripper_free_base.sdf - seg fault
-# wsg50_one_motor_gripper_left_finger.urdf - no fingers
-# wsg50_one_motor_gripper_new.sdf - no visual
-# wsg50_one_motor_gripper_new_free_base.sdf - octopus
-# wsg50_one_motor_gripper_no_finger.sdf - no visual
-# wsg50_one_motor_gripper_right_finger.urdf - no fingers
-WSG_GRIPPER = 'gripper/wsg50_one_motor_gripper_new.sdf'
-
-# PyBullet Objects
-KIVA_SHELF_SDF = 'kiva_shelf/model.sdf'
-FLOOR_URDF = 'plane.urdf'
-TABLE_URDF = 'table/table.urdf'
-
-# Objects
-SMALL_BLOCK_URDF = 'models/drake/objects/block_for_pick_and_place.urdf'
-BLOCK_URDF = 'models/drake/objects/block_for_pick_and_place_mid_size.urdf'
-SINK_URDF = 'models/sink.urdf'
-STOVE_URDF = 'models/stove.urdf'
-
-#####################################
-
-# I/O
-
-SEPARATOR = '\n' + 50*'-' + '\n'
-
-#def inf_generator():
-#    return iter(int, 1)
-
-inf_generator = count
-
-List = lambda *args: list(args)
-Tuple = lambda *args: tuple(args)
-
-def empty_sequence():
-    return iter([])
-
-def irange(start, end=None, step=1):
-    if end is None:
-        end = start
-        start = 0
-    n = start
-    while n < end:
-        yield n
-        n += step
-
-def count_until(max_iterations=INF, max_time=INF):
-    start_time = time.time()
-    assert (max_iterations < INF) or (max_time < INF)
-    for iteration in irange(max_iterations):
-        if elapsed_time(start_time) >= max_time:
-            break
-        yield iteration
-
-def print_separator(n=50):
-    print('\n' + n*'-' + '\n')
-
-def is_remote():
-    return 'SSH_CONNECTION' in os.environ
-
-def is_darwin(): # TODO: change loading accordingly
-    return platform.system() == 'Darwin' # platform.release()
-    #return sys.platform == 'darwin'
-
-def get_python_version():
-    return sys.version_info[0]
-
-def read(filename):
-    with open(filename, 'r') as f:
-        return f.read()
-
-def write(filename, string):
-    with open(filename, 'w') as f:
-        f.write(string)
-
-def read_pickle(filename):
-    # Can sometimes read pickle3 from python2 by calling twice
-    with open(filename, 'rb') as f:
-        try:
-            return pickle.load(f)
-        except UnicodeDecodeError as e:
-            return pickle.load(f, encoding='latin1')
-
-def write_pickle(filename, data):  # NOTE - cannot pickle lambda or nested functions
-    with open(filename, 'wb') as f:
-        pickle.dump(data, f)
-
-def read_json(path):
-    return json.loads(read(path))
-
-def write_json(path, data):
-    with open(path, 'w') as f:
-        json.dump(data, f, indent=2, sort_keys=True)
-
-def safe_remove(path):
-    if os.path.exists(path):
-        if os.path.isdir(path):
-            shutil.rmtree(path)
-        else:
-            os.remove(path)
-
-def ensure_dir(f):
-    d = os.path.dirname(f)
-    if not os.path.exists(d):
-        os.makedirs(d)
-
-def list_paths(directory):
-    return sorted(os.path.abspath(os.path.join(directory, filename))
-                  for filename in os.listdir(directory))
-
-##################################################
-
-def safe_zip(sequence1, sequence2): # TODO: *args
-    sequence1, sequence2 = list(sequence1), list(sequence2)
-    assert len(sequence1) == len(sequence2)
-    return list(zip(sequence1, sequence2))
-
-def get_pairs(sequence):
-    # TODO: lazy version
-    sequence = list(sequence)
-    return safe_zip(sequence[:-1], sequence[1:])
-
-def get_wrapped_pairs(sequence):
-    # TODO: lazy version
-    sequence = list(sequence)
-    # zip(sequence, sequence[-1:] + sequence[:-1])
-    return safe_zip(sequence, sequence[1:] + sequence[:1])
-
-def clip(value, min_value=-INF, max_value=+INF):
-    return min(max(min_value, value), max_value)
-
-def randomize(iterable): # TODO: bisect
-    sequence = list(iterable)
-    random.shuffle(sequence)
-    return sequence
-
-def get_random_seed():
-    return random.getstate()[1][1]
-
-def get_numpy_seed():
-    return np.random.get_state()[1][0]
-
-def set_random_seed(seed=None):
-    if seed is not None:
-        random.seed(seed)
-
-def wrap_numpy_seed(seed):
-    return seed % (2**32) # int | hash
-
-def set_numpy_seed(seed=None):
-    # These generators are different and independent
-    if seed is not None:
-        np.random.seed(wrap_numpy_seed(seed))
-        #print('Seed:', seed)
-
-DATE_FORMAT = '%y-%m-%d_%H-%M-%S'
-
-def get_date():
-    return datetime.datetime.now().strftime(DATE_FORMAT)
-
-def implies(p1, p2):
-    return not p1 or p2
-
-def roundrobin(*iterables):
-    # https://docs.python.org/3.1/library/itertools.html#recipes
-    "roundrobin('ABC', 'D', 'EF') --> A D E B F C"
-    # Recipe credited to George Sakkis
-    pending = len(iterables)
-    nexts = cycle(iter(it).__next__ for it in iterables)
-    while pending:
-        try:
-            for next in nexts:
-                yield next()
-        except StopIteration:
-            pending -= 1
-            nexts = cycle(islice(nexts, pending))
-
-def chunks(sequence, n=1):
-    for i in range(0, len(sequence), n):
-        yield sequence[i:i + n]
-
-def get_function_name(depth=1):
-    return inspect.stack()[depth][3]
-
-def load_yaml(path):
-    import yaml
-    # grep -r --include="*.py" "yaml\." *
-    # yaml.dump()
-    with open(path, 'r') as f:
-        try:
-            return yaml.safe_load(f)
-        except yaml.YAMLError as exc:
-            raise exc
-
-def flatten(iterable_of_iterables):
-    return (item for iterables in iterable_of_iterables for item in iterables)
-
-def find(test, sequence):
-    for item in sequence:
-        if test(item):
-            return item
-    return None
-
-def merge_dicts(*args):
-    result = {}
-    for d in args:
-        result.update(d)
-    return result
-    # return dict(reduce(operator.add, [d.items() for d in args]))
-
-def str_from_object(obj):  # str_object
-    if type(obj) in [list]: #, np.ndarray):
-        return '[{}]'.format(', '.join(str_from_object(item) for item in obj))
-    if type(obj) in [tuple]:
-        return '({})'.format(', '.join(str_from_object(item) for item in obj))
-    if type(obj) in [set, frozenset]:
-        return '{{{}}}'.format(', '.join(sorted(str_from_object(item) for item in obj)))
-    if type(obj) in [dict, defaultdict]: # isinstance(obj, dict):
-        return '{{{}}}'.format(', '.join('{}: {}'.format(*pair) for pair in sorted(
-            tuple(map(str_from_object, pair)) for pair in obj.items())))
-    #if type(obj) in (float, np.float64):
-    #    obj = round(obj, 3)
-    #    if obj == 0: obj = 0  # NOTE - catches -0.0 bug
-    #    return '%.3f' % obj
-    #if isinstance(obj, types.FunctionType):
-    #    return obj.__name__
-    return str(obj)
-    #return repr(obj)
-
-def safe_sample(collection, k=1):
-    collection = list(collection)
-    if len(collection) <= k:
-        return collection
-    return random.sample(collection, k)
-
-class OrderedSet(collections.OrderedDict, collections.MutableSet):
-    # TODO: https://stackoverflow.com/questions/1653970/does-python-have-an-ordered-set
-    def __init__(self, seq=()): # known special case of set.__init__
-        #super(OrderedSet, self).__init__()
-        self.update(seq)
-    def update(self, *args, **kwargs):
-        if kwargs:
-            raise TypeError('update() takes no keyword arguments')
-        for s in args:
-            for e in s:
-                self.add(e)
-    def add(self, elem):
-        self[elem] = None
-    def discard(self, elem):
-        self.pop(elem, None)
-    def __le__(self, other):
-        return all(e in other for e in self)
-    def __lt__(self, other):
-        return self <= other and self != other
-    def __ge__(self, other):
-        return all(e in self for e in other)
-    def __gt__(self, other):
-        return self >= other and self != other
-    def __repr__(self):
-        return 'OrderedSet([%s])' % (', '.join(map(repr, self.keys())))
-    def __str__(self):
-        return '{%s}' % (', '.join(map(repr, self.keys())))
-    difference = property(lambda self: self.__sub__)
-    difference_update = property(lambda self: self.__isub__)
-    intersection = property(lambda self: self.__and__)
-    intersection_update = property(lambda self: self.__iand__)
-    issubset = property(lambda self: self.__le__)
-    issuperset = property(lambda self: self.__ge__)
-    symmetric_difference = property(lambda self: self.__xor__)
-    symmetric_difference_update = property(lambda self: self.__ixor__)
-    union = property(lambda self: self.__or__)
-
-##################################################
-
-BYTES_PER_KILOBYTE = math.pow(2, 10)
-BYTES_PER_GIGABYTE = math.pow(2, 30)
-KILOBYTES_PER_GIGABYTE = BYTES_PER_GIGABYTE / BYTES_PER_KILOBYTE
-
-def get_memory_in_kb():
-    # https://pypi.org/project/psutil/
-    # https://psutil.readthedocs.io/en/latest/
-    import psutil
-    #rss: aka "Resident Set Size", this is the non-swapped physical memory a process has used. (bytes)
-    #vms: aka "Virtual Memory Size", this is the total amount of virtual memory used by the process. (bytes)
-    #shared: (Linux) memory that could be potentially shared with other processes.
-    #text (Linux, BSD): aka TRS (text resident set) the amount of memory devoted to executable code.
-    #data (Linux, BSD): aka DRS (data resident set) the amount of physical memory devoted to other than executable code.
-    #lib (Linux): the memory used by shared libraries.
-    #dirty (Linux): the number of dirty pages.
-    #pfaults (macOS): number of page faults.
-    #pageins (macOS): number of actual pageins.
-    process = psutil.Process(os.getpid())
-    #process.pid()
-    #process.ppid()
-    pmem = process.memory_info() # this seems to actually get the current memory!
-    return pmem.vms / BYTES_PER_KILOBYTE
-    #print(process.memory_full_info())
-    #print(process.memory_percent())
-    # process.rlimit(psutil.RLIMIT_NOFILE)  # set resource limits (Linux only)
-    #print(psutil.virtual_memory())
-    #print(psutil.swap_memory())
-    #print(psutil.pids())
-
-def raise_timeout(signum, frame):
-    raise TimeoutError()
-
-@contextmanager
-def timeout(duration):
-    # TODO: function that wraps around
-    # https://www.jujens.eu/posts/en/2018/Jun/02/python-timeout-function/
-    # https://code-maven.com/python-timeout
-    # https://pypi.org/project/func-timeout/
-    # https://pypi.org/project/timeout-decorator/
-    # https://eli.thegreenplace.net/2011/08/22/how-not-to-set-a-timeout-on-a-computation-in-python
-    # https://docs.python.org/3/library/signal.html
-    # https://docs.python.org/3/library/contextlib.html
-    # https://stackoverflow.com/a/22348885
-    assert 0 < duration
-    if duration == INF:
-        yield
-        return
-    # Register a function to raise a TimeoutError on the signal
-    signal.signal(signal.SIGALRM, raise_timeout)
-    # Schedule the signal to be sent after ``duration``
-    signal.alarm(int(math.ceil(duration)))
-    try:
-        yield
-    except TimeoutError as e:
-        print('Timeout after {} sec'.format(duration))
-        #traceback.print_exc()
-        pass
-    finally:
-        # Unregister the signal so it won't be triggered
-        # if the timeout is not reached
-        signal.signal(signal.SIGALRM, signal.SIG_IGN)
-
-def log_time(method):
-    """
-    A decorator for methods which will time the method
-    and then emit a log.debug message with the method name
-    and how long it took to execute.
-    """
-    # https://github.com/mikedh/trimesh/blob/60dae2352875f48c4476e01052829e8b9166d9e5/trimesh/constants.py#L126
-    import logging
-    log = logging.getLogger()
-    def timed(*args, **kwargs):
-        tic = now()
-        result = method(*args, **kwargs)
-        log.debug('%s executed in %.4f seconds.',
-                  method.__name__,
-                  now() - tic)
-        return result
-    timed.__name__ = method.__name__
-    timed.__doc__ = method.__doc__
-    return timed
-
-def cached_fn(fn, cache=True, **global_kargs):
-    # https://docs.python.org/3/library/functools.html#functools.cache
-    def normal(*args, **local_kwargs):
-        kwargs = dict(global_kargs)
-        kwargs.update(local_kwargs)
-        return fn(*args, **kwargs)
-    if not cache:
-        return normal
-
-    #from functools import cache # # New in version 3.9
-    #from functools import lru_cache as cache
-    #@cache(maxsize=None, typed=False)
-    @cache_decorator
-    def wrapped(*args, **local_kwargs):
-        return normal(*args, **local_kwargs)
-    return wrapped
-
-def cache_decorator(function):
-    """
-    A decorator for class methods, replaces @property
-    but will store and retrieve function return values
-    in object cache.
-    Parameters
-    ------------
-    function : method
-      This is used as a decorator:
-      ```
-      @cache_decorator
-      def foo(self, things):
-        return 'happy days'
-      ```
-    """
-    # https://github.com/mikedh/trimesh/blob/60dae2352875f48c4476e01052829e8b9166d9e5/trimesh/caching.py#L64
-    from functools import wraps
-    #from functools import cached_property # TODO: New in version 3.8
-
-    # use wraps to preserve docstring
-    @wraps(function)
-    def get_cached(*args, **kwargs):
-        """
-        Only execute the function if its value isn't stored
-        in cache already.
-        """
-        self = args[0]
-        # use function name as key in cache
-        name = function.__name__
-        # do the dump logic ourselves to avoid
-        # verifying cache twice per call
-        self._cache.verify()
-        # access cache dict to avoid automatic validation
-        # since we already called cache.verify manually
-        if name in self._cache.cache:
-            # already stored so return value
-            return self._cache.cache[name]
-        # value not in cache so execute the function
-        value = function(*args, **kwargs)
-        # store the value
-        if self._cache.force_immutable and hasattr(
-                value, 'flags') and len(value.shape) > 0:
-            value.flags.writeable = False
-
-        self._cache.cache[name] = value
-
-        return value
-
-    # all cached values are also properties
-    # so they can be accessed like value attributes
-    # rather than functions
-    return property(get_cached)
-
-#####################################
-
-class HideOutput(object):
-    # https://stackoverflow.com/questions/5081657/how-do-i-prevent-a-c-shared-library-to-print-on-stdout-in-python
-    # https://stackoverflow.com/questions/4178614/suppressing-output-of-module-calling-outside-library
-    # https://stackoverflow.com/questions/4675728/redirect-stdout-to-a-file-in-python/22434262#22434262
-    '''
-    A context manager that block stdout for its scope, usage:
-
-    with HideOutput():
-        os.system('ls -l')
-    '''
-    DEFAULT_ENABLE = True
-    def __init__(self, enable=None):
-        if enable is None:
-            enable = self.DEFAULT_ENABLE
-        self.enable = enable
-        if not self.enable:
-            return
-        sys.stdout.flush()
-        self._origstdout = sys.stdout
-        self._oldstdout_fno = os.dup(sys.stdout.fileno())
-        self._devnull = os.open(os.devnull, os.O_WRONLY)
-
-    def __enter__(self):
-        if not self.enable:
-            return
-        self.fd = 1
-        #self.fd = sys.stdout.fileno()
-        self._newstdout = os.dup(self.fd)
-        os.dup2(self._devnull, self.fd)
-        os.close(self._devnull)
-        sys.stdout = os.fdopen(self._newstdout, 'w')
-
-    def __exit__(self, exc_type, exc_val, exc_tb):
-        if not self.enable:
-            return
-        sys.stdout.close()
-        sys.stdout = self._origstdout
-        sys.stdout.flush()
-        os.dup2(self._oldstdout_fno, self.fd)
-        os.close(self._oldstdout_fno) # Added
-
-#####################################
-
-# Colors
-
-RGB = namedtuple('RGB', ['red', 'green', 'blue'])
-RGBA = namedtuple('RGBA', ['red', 'green', 'blue', 'alpha'])
-MAX_RGB = 2**8 - 1
-
-RED = RGBA(1, 0, 0, 1)
-GREEN = RGBA(0, 1, 0, 1)
-BLUE = RGBA(0, 0, 1, 1)
-BLACK = RGBA(0, 0, 0, 1)
-WHITE = RGBA(1, 1, 1, 1)
-BROWN = RGBA(0.396, 0.263, 0.129, 1)
-TAN = RGBA(0.824, 0.706, 0.549, 1)
-GREY = RGBA(0.5, 0.5, 0.5, 1)
-YELLOW = RGBA(1, 1, 0, 1)
-TRANSPARENT = RGBA(0, 0, 0, 0)
-
-ACHROMATIC_COLORS = {
-    'white': WHITE,
-    'grey': GREY,
-    'black': BLACK,
-}
-
-CHROMATIC_COLORS = {
-    'red': RED,
-    'green': GREEN,
-    'blue': BLUE,
-}
-
-COLOR_FROM_NAME = merge_dicts(ACHROMATIC_COLORS, CHROMATIC_COLORS)
-
-def remove_alpha(color):
-    return RGB(*color[:3])
-
-def apply_alpha(color, alpha=1.):
-    if color is None:
-        return None
-    red, green, blue = color[:3]
-    return RGBA(red, green, blue, alpha)
-
-def spaced_colors(n, s=1, v=1):
-    return [RGB(*colorsys.hsv_to_rgb(h, s, v)) for h in np.linspace(0, 1, n, endpoint=False)]
-
-#####################################
-
-# Savers
-
-class Saver(object):
-    # TODO: contextlib
-    def save(self):
-        pass
-    def restore(self):
-        raise NotImplementedError()
-    def __enter__(self):
-        # TODO: move the saving to enter?
-        self.save()
-        #return self
-    def __exit__(self, type, value, traceback):
-        self.restore()
-
-class ClientSaver(Saver):
-    def __init__(self, new_client=None):
-        self.client = CLIENT
-        if new_client is not None:
-            set_client(new_client)
-
-    def restore(self):
-        set_client(self.client)
-
-    def __repr__(self):
-        return '{}({})'.format(self.__class__.__name__, self.client)
-
-class VideoSaver(Saver):
-    def __init__(self, path):
-        self.path = path
-        if path is None:
-            self.log_id = None
-        else:
-            name, ext = os.path.splitext(path)
-            assert ext == '.mp4'
-            # STATE_LOGGING_PROFILE_TIMINGS, STATE_LOGGING_ALL_COMMANDS
-            # p.submitProfileTiming('pythontest")
-            self.log_id = p.startStateLogging(p.STATE_LOGGING_VIDEO_MP4, fileName=path, physicsClientId=CLIENT)
-
-    def restore(self):
-        if self.log_id is not None:
-            p.stopStateLogging(self.log_id)
-            print('Saved', self.path)
-
-class Profiler(Saver):
-    fields = ['tottime', 'cumtime', None]
-    def __init__(self, field='tottime', num=10):
-        assert field in self.fields
-        self.field = field
-        self.num = num
-        if field is None:
-            return
-        self.pr = cProfile.Profile()
-    def save(self):
-        if self.field is None:
-            return
-        self.pr.enable()
-        return self.pr
-    def restore(self):
-        if self.field is None:
-            return
-        self.pr.disable()
-        stream = None
-        #stream = io.StringIO()
-        stats = pstats.Stats(self.pr, stream=stream).sort_stats(self.field) # TODO: print multiple
-        stats.print_stats(self.num)
-        return stats
-
-#####################################
-
-class PoseSaver(Saver):
-    def __init__(self, body, pose=None):
-        self.body = body
-        if pose is None:
-            pose = get_pose(self.body)
-        self.pose = pose
-        self.velocity = get_velocity(self.body)
-
-    def apply_mapping(self, mapping):
-        self.body = mapping.get(self.body, self.body)
-
-    def restore(self):
-        set_pose(self.body, self.pose)
-        set_velocity(self.body, *self.velocity)
-
-    def __repr__(self):
-        return '{}({})'.format(self.__class__.__name__, self.body)
-
-class ConfSaver(Saver):
-    def __init__(self, body, joints=None, positions=None):
-        self.body = body
-        if joints is None:
-            joints = get_movable_joints(self.body)
-        self.joints = joints
-        if positions is None:
-            positions = get_joint_positions(self.body, self.joints)
-        self.positions = positions
-        self.velocities = get_joint_velocities(self.body, self.joints)
-
-    @property
-    def conf(self):
-        return self.positions
-
-    def apply_mapping(self, mapping):
-        self.body = mapping.get(self.body, self.body)
-
-    def restore(self):
-        #set_configuration(self.body, self.conf)
-        #set_joint_positions(self.body, self.joints, self.positions)
-        set_joint_states(self.body, self.joints, self.positions, self.velocities)
-        #set_joint_velocities(self.body, self.joints, self.velocities)
-
-    def __repr__(self):
-        return '{}({})'.format(self.__class__.__name__, self.body)
-
-class BodySaver(Saver):
-    def __init__(self, body, **kwargs): #, pose=None):
-        #if pose is None:
-        #    pose = get_pose(body)
-        self.body = body
-        self.pose_saver = PoseSaver(body)
-        self.conf_saver = ConfSaver(body, **kwargs)
-        self.savers = [self.pose_saver, self.conf_saver]
-
-    def apply_mapping(self, mapping):
-        for saver in self.savers:
-            saver.apply_mapping(mapping)
-
-    def restore(self):
-        for saver in self.savers:
-            saver.restore()
-
-    def __repr__(self):
-        return '{}({})'.format(self.__class__.__name__, self.body)
-
-class WorldSaver(Saver):
-    def __init__(self, bodies=None):
-        if bodies is None:
-            bodies = get_bodies()
-        self.bodies = bodies
-        self.body_savers = [BodySaver(body) for body in self.bodies]
-        # TODO: add/remove new bodies
-        # TODO: save the camera pose
-
-    def restore(self):
-        for body_saver in self.body_savers:
-            body_saver.restore()
-
-#####################################
-
-# Simulation
-
-CLIENTS = {} # TODO: rename to include locked
-CLIENT = 0
-
-def get_client(client=None):
-    if client is None:
-        return CLIENT
-    return client
-
-def set_client(client):
-    global CLIENT
-    CLIENT = client
-
-ModelInfo = namedtuple('URDFInfo', ['name', 'path', 'fixed_base', 'scale'])
-
-INFO_FROM_BODY = {}
-
-def get_model_info(body):
-    key = (CLIENT, body)
-    return INFO_FROM_BODY.get(key, None)
-
-def get_urdf_flags(cache=False, cylinder=False):
-    # by default, Bullet disables self-collision
-    # URDF_INITIALIZE_SAT_FEATURES
-    # URDF_ENABLE_CACHED_GRAPHICS_SHAPES seems to help
-    # but URDF_INITIALIZE_SAT_FEATURES does not (might need to be provided a mesh)
-    # flags = p.URDF_INITIALIZE_SAT_FEATURES | p.URDF_ENABLE_CACHED_GRAPHICS_SHAPES
-    flags = 0
-    if cache:
-        flags |= p.URDF_ENABLE_CACHED_GRAPHICS_SHAPES
-    if cylinder:
-        flags |= p.URDF_USE_IMPLICIT_CYLINDER
-    return flags
-
-def load_pybullet(filename, fixed_base=False, scale=1., **kwargs):
-    # fixed_base=False implies infinite base mass
-    with LockRenderer():
-        if filename.endswith('.urdf'):
-            flags = get_urdf_flags(**kwargs)
-            body = p.loadURDF(filename, useFixedBase=fixed_base, flags=flags,
-                              globalScaling=scale, physicsClientId=CLIENT)
-        elif filename.endswith('.sdf'):
-            body = p.loadSDF(filename, physicsClientId=CLIENT)
-        elif filename.endswith('.xml'):
-            body = p.loadMJCF(filename, physicsClientId=CLIENT)
-        elif filename.endswith('.bullet'):
-            body = p.loadBullet(filename, physicsClientId=CLIENT)
-        elif filename.endswith('.obj'):
-            # TODO: fixed_base => mass = 0?
-            body = create_obj(filename, scale=scale, **kwargs)
-        else:
-            raise ValueError(filename)
-    INFO_FROM_BODY[CLIENT, body] = ModelInfo(None, filename, fixed_base, scale)
-    return body
-
-def set_caching(cache):
-    p.setPhysicsEngineParameter(enableFileCaching=int(cache), physicsClientId=CLIENT)
-
-def load_model_info(info):
-    # TODO: disable file caching to reuse old filenames
-    # p.setPhysicsEngineParameter(enableFileCaching=0, physicsClientId=CLIENT)
-    if info.path.endswith('.urdf'):
-        return load_pybullet(info.path, fixed_base=info.fixed_base, scale=info.scale)
-    if info.path.endswith('.obj'):
-        mass = STATIC_MASS if info.fixed_base else 1.
-        return create_obj(info.path, mass=mass, scale=info.scale)
-    raise NotImplementedError(info.path)
-
-URDF_FLAGS = [p.URDF_USE_INERTIA_FROM_FILE,
-              p.URDF_USE_SELF_COLLISION,
-              p.URDF_USE_SELF_COLLISION_EXCLUDE_PARENT,
-              p.URDF_USE_SELF_COLLISION_EXCLUDE_ALL_PARENTS]
-
-def get_model_path(rel_path): # TODO: add to search path
-    directory = os.path.dirname(os.path.abspath(__file__))
-    return os.path.join(directory, rel_path)
-
-def load_model(rel_path, pose=None, **kwargs):
-    # TODO: error with loadURDF when loading MESH visual and CYLINDER collision
-    # abs_path = get_model_path(rel_path)
-    abs_path = os.path.join(MODEL_DIRECTORY, rel_path)
-    add_data_path()
-    #with LockRenderer():
-    body = load_pybullet(abs_path, **kwargs)
-    if pose is not None:
-        set_pose(body, pose)
-    return body
-
-#TOOLS_VERSION = date.date()
-
-def get_version(): # year-month-0-day format
-    s = str(p.getAPIVersion(physicsClientId=CLIENT))
-    return datetime.date(year=int(s[:4]), month=int(s[4:6]), day=int(s[7:9]))
-
-#####################################
-
-# class World(object):
-#     def __init__(self, client):
-#         self.client = client
-#         self.bodies = {}
-#     def activate(self):
-#         set_client(self.client)
-#     def load(self, path, name=None, fixed_base=False, scale=1.):
-#         body = p.loadURDF(path, useFixedBase=fixed_base, physicsClientId=self.client)
-#         self.bodies[body] = URDFInfo(name, path, fixed_base, scale)
-#         return body
-#     def remove(self, body):
-#         del self.bodies[body]
-#         return p.removeBody(body, physicsClientId=self.client)
-#     def reset(self):
-#         p.resetSimulation(physicsClientId=self.client)
-#         self.bodies = {}
-#     # TODO: with statement
-#     def copy(self):
-#         raise NotImplementedError()
-#     def __repr__(self):
-#         return '{}({})'.format(self.__class__.__name__, len(self.bodies))
-
-#####################################
-
-now = time.time
-
-def elapsed_time(start_time):
-    return time.time() - start_time
-
-MouseEvent = namedtuple('MouseEvent', ['eventType', 'mousePosX', 'mousePosY', 'buttonIndex', 'buttonState'])
-
-def get_mouse_events():
-    return list(MouseEvent(*event) for event in p.getMouseEvents(physicsClientId=CLIENT))
-
-def update_viewer():
-    # https://docs.python.org/2/library/select.html
-    # events = p.getKeyboardEvents() # TODO: only works when the viewer is in focus
-    get_mouse_events()
-    # for k, v in keys.items():
-    #    #p.KEY_IS_DOWN, p.KEY_WAS_RELEASED, p.KEY_WAS_TRIGGERED
-    #    if (k == p.B3G_RETURN) and (v & p.KEY_WAS_TRIGGERED):
-    #        return
-    # time.sleep(1e-3) # Doesn't work
-    # disable_gravity()
-
-def wait_for_duration(duration): #, dt=0):
-    t0 = time.time()
-    while elapsed_time(t0) <= duration:
-        update_viewer()
-
-def simulate_for_duration(duration):
-    dt = get_time_step()
-    for i in range(int(duration / dt)):
-        step_simulation()
-
-def get_time_step():
-    # {'gravityAccelerationX', 'useRealTimeSimulation', 'gravityAccelerationZ', 'numSolverIterations',
-    # 'gravityAccelerationY', 'numSubSteps', 'fixedTimeStep'}
-    return p.getPhysicsEngineParameters(physicsClientId=CLIENT)['fixedTimeStep']
-
-def enable_separating_axis_test():
-    p.setPhysicsEngineParameter(enableSAT=1, physicsClientId=CLIENT)
-    #p.setCollisionFilterPair()
-    #p.setCollisionFilterGroupMask()
-    #p.setInternalSimFlags()
-    # enableFileCaching: Set to 0 to disable file caching, such as .obj wavefront file loading
-    #p.getAPIVersion() # TODO: check that API is up-to-date
-
-def simulate_for_sim_duration(sim_duration, real_dt=0, frequency=INF):
-    t0 = time.time()
-    sim_dt = get_time_step()
-    sim_time = 0
-    last_print = 0
-    while sim_time < sim_duration:
-        if frequency < (sim_time - last_print):
-            print('Sim time: {:.3f} | Real time: {:.3f}'.format(sim_time, elapsed_time(t0)))
-            last_print = sim_time
-        step_simulation()
-        sim_time += sim_dt
-        time.sleep(real_dt)
-
-def wait_for_user(message='Press enter to continue'):
-    if has_gui() and is_darwin():
-        # OS X doesn't multi-thread the OpenGL visualizer
-        #wait_for_interrupt()
-        return threaded_input(message)
-    return user_input(message)
-
-def wait_if_gui(*args, **kwargs):
-    if has_gui():
-        wait_for_user(*args, **kwargs)
-
-def is_unlocked():
-    return CLIENTS[CLIENT] is True
-
-def wait_if_unlocked(*args, **kwargs):
-    if is_unlocked():
-        wait_for_user(*args, **kwargs)
-
-def wait_for_interrupt(max_time=np.inf):
-    """
-    Hold Ctrl to move the camera as well as zoom
-    """
-    print('Press Ctrl-C to continue')
-    try:
-        wait_for_duration(max_time)
-    except KeyboardInterrupt:
-        pass
-    finally:
-        print()
-
-def set_preview(enable):
-    # lightPosition, shadowMapResolution, shadowMapWorldSize
-    p.configureDebugVisualizer(p.COV_ENABLE_GUI, enable, physicsClientId=CLIENT)
-    p.configureDebugVisualizer(p.COV_ENABLE_RGB_BUFFER_PREVIEW, enable, physicsClientId=CLIENT)
-    p.configureDebugVisualizer(p.COV_ENABLE_DEPTH_BUFFER_PREVIEW, enable, physicsClientId=CLIENT)
-    p.configureDebugVisualizer(p.COV_ENABLE_SEGMENTATION_MARK_PREVIEW, enable, physicsClientId=CLIENT)
-    #p.configureDebugVisualizer(p.COV_ENABLE_SINGLE_STEP_RENDERING, True, physicsClientId=CLIENT)
-    #p.configureDebugVisualizer(p.COV_ENABLE_WIREFRAME, True, physicsClientId=CLIENT)
-
-def enable_preview():
-    set_preview(enable=True)
-
-def disable_preview():
-    set_preview(enable=False)
-
-def set_renderer(enable):
-    client = CLIENT
-    if not has_gui(client):
-        return
-    CLIENTS[client] = enable
-    p.configureDebugVisualizer(p.COV_ENABLE_RENDERING, int(enable), physicsClientId=client)
-
-class LockRenderer(Saver):
-    # disabling rendering temporary makes adding objects faster
-    def __init__(self, lock=True):
-        self.client = CLIENT
-        self.state = CLIENTS[self.client]
-        # skip if the visualizer isn't active
-        if has_gui(self.client) and lock:
-            set_renderer(enable=False)
-
-    def restore(self):
-        if not has_gui(self.client):
-            return
-        assert self.state is not None
-        if self.state != CLIENTS[self.client]:
-           set_renderer(enable=self.state)
-
-def connect(use_gui=True, shadows=True, color=None, width=None, height=None):
-    # Shared Memory: execute the physics simulation and rendering in a separate process
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/examples/vrminitaur.py#L7
-    # make sure to compile pybullet with PYBULLET_USE_NUMPY enabled
-    if use_gui and not is_darwin() and ('DISPLAY' not in os.environ):
-        use_gui = False
-        print('No display detected!')
-    method = p.GUI if use_gui else p.DIRECT
-    with HideOutput():
-        #  --window_backend=2 --render_device=0'
-        # options="--mp4=\"test.mp4\' --mp4fps=240"
-        options = ''
-        if color is not None:
-            options += '--background_color_red={} --background_color_green={} --background_color_blue={}'.format(*color)
-        if width is not None:
-            options += '--width={}'.format(width)
-        if height is not None:
-            options += '--height={}'.format(height)
-        sim_id = p.connect(method, options=options) # key=None,
-        #sim_id = p.connect(p.GUI, options='--opengl2') if use_gui else p.connect(p.DIRECT)
-
-    assert 0 <= sim_id
-    #sim_id2 = p.connect(p.SHARED_MEMORY)
-    #print(sim_id, sim_id2)
-    CLIENTS[sim_id] = True if use_gui else None
-    if use_gui:
-        # p.COV_ENABLE_PLANAR_REFLECTION
-        # p.COV_ENABLE_SINGLE_STEP_RENDERING
-        disable_preview()
-        p.configureDebugVisualizer(p.COV_ENABLE_TINY_RENDERER, False, physicsClientId=sim_id) # TODO: does this matter?
-        p.configureDebugVisualizer(p.COV_ENABLE_SHADOWS, shadows, physicsClientId=sim_id)
-        p.configureDebugVisualizer(p.COV_ENABLE_MOUSE_PICKING, False, physicsClientId=sim_id) # mouse moves meshes
-        p.configureDebugVisualizer(p.COV_ENABLE_KEYBOARD_SHORTCUTS, False, physicsClientId=sim_id)
-
-    # you can also use GUI mode, for faster OpenGL rendering (instead of TinyRender CPU)
-    #visualizer_options = {
-    #    p.COV_ENABLE_WIREFRAME: 1,
-    #    p.COV_ENABLE_SHADOWS: 0,
-    #    p.COV_ENABLE_RENDERING: 0,
-    #    p.COV_ENABLE_TINY_RENDERER: 1,
-    #    p.COV_ENABLE_RGB_BUFFER_PREVIEW: 0,
-    #    p.COV_ENABLE_DEPTH_BUFFER_PREVIEW: 0,
-    #    p.COV_ENABLE_SEGMENTATION_MARK_PREVIEW: 0,
-    #    p.COV_ENABLE_VR_RENDER_CONTROLLERS: 0,
-    #    p.COV_ENABLE_VR_PICKING: 0,
-    #    p.COV_ENABLE_VR_TELEPORTING: 0,
-    #}
-    #for pair in visualizer_options.items():
-    #    p.configureDebugVisualizer(*pair)
-    return sim_id
-
-def threaded_input(*args, **kwargs):
-    # OS X doesn't multi-thread the OpenGL visualizer
-    # http://openrave.org/docs/0.8.2/_modules/openravepy/misc/#SetViewerUserThread
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/examples/userData.py
-    # https://github.com/bulletphysics/bullet3/tree/master/examples/ExampleBrowser
-    #from pybullet_utils import bullet_client
-    #from pybullet_utils.bullet_client import BulletClient
-    #server = bullet_client.BulletClient(connection_mode=p.SHARED_MEMORY_SERVER) # GUI_SERVER
-    #sim_id = p.connect(p.GUI)
-    #print(dir(server))
-    #client = bullet_client.BulletClient(connection_mode=p.SHARED_MEMORY)
-    #sim_id = p.connect(p.SHARED_MEMORY)
-
-    #threading = __import__('threading')
-    import threading
-    data = []
-    thread = threading.Thread(target=lambda: data.append(user_input(*args, **kwargs)), args=[])
-    thread.start()
-    #threading.enumerate()
-    #thread_id = 0
-    #for tid, tobj in threading._active.items():
-    #    if tobj is thread:
-    #        thread_id = tid
-    #        break
-    try:
-        while thread.is_alive():
-            update_viewer()
-    finally:
-        thread.join()
-    return data[-1]
-
-def disconnect():
-    # TODO: change CLIENT?
-    if CLIENT in CLIENTS:
-        del CLIENTS[CLIENT]
-    with HideOutput():
-        return p.disconnect(physicsClientId=CLIENT)
-
-def is_connected():
-    #return p.isConnected(physicsClientId=CLIENT)
-    return p.getConnectionInfo(physicsClientId=CLIENT)['isConnected']
-
-def get_connection(client=None):
-    return p.getConnectionInfo(physicsClientId=get_client(client))['connectionMethod']
-
-def has_gui(client=None):
-    return get_connection(get_client(client)) == p.GUI
-
-def get_data_path():
-    import pybullet_data
-    return pybullet_data.getDataPath()
-
-def add_data_path(data_path=None):
-    if data_path is None:
-        data_path = get_data_path()
-    p.setAdditionalSearchPath(data_path)
-    return data_path
-
-GRAVITY = 9.8
-
-def enable_gravity():
-    p.setGravity(0, 0, -GRAVITY, physicsClientId=CLIENT)
-
-def disable_gravity():
-    p.setGravity(0, 0, 0, physicsClientId=CLIENT)
-
-def step_simulation():
-    p.stepSimulation(physicsClientId=CLIENT)
-
-def update_scene():
-    # TODO: https://github.com/bulletphysics/bullet3/pull/3331
-    p.performCollisionDetection(physicsClientId=CLIENT)
-
-def set_real_time(real_time):
-    p.setRealTimeSimulation(int(real_time), physicsClientId=CLIENT)
-
-def enable_real_time():
-    set_real_time(True)
-
-def disable_real_time():
-    set_real_time(False)
-
-def update_state():
-    # TODO: this doesn't seem to automatically update still
-    disable_gravity()
-    #step_simulation()
-    #for body in get_bodies():
-    #    for link in get_links(body):
-    #        # if set to 1 (or True), the Cartesian world position/orientation
-    #        # will be recomputed using forward kinematics.
-    #        get_link_state(body, link)
-    #for body in get_bodies():
-    #    get_pose(body)
-    #    for joint in get_joints(body):
-    #        get_joint_position(body, joint)
-    #p.getKeyboardEvents()
-    #p.getMouseEvents()
-
-def reset_simulation():
-    # RESET_USE_SIMPLE_BROADPHASE
-    # RESET_USE_DEFORMABLE_WORLD
-    # RESET_USE_DISCRETE_DYNAMICS_WORLD
-    p.resetSimulation(physicsClientId=CLIENT)
-
-#####################################
-
-Pixel = namedtuple('Pixel', ['row', 'column'])
-
-def get_camera_matrix(width, height, fx, fy=None):
-    if fy is None:
-        fy = fx
-    #cx, cy = width / 2., height / 2.
-    cx, cy = (width - 1) / 2., (height - 1) / 2.
-    return np.array([[fx, 0, cx],
-                     [0, fy, cy],
-                     [0, 0, 1]])
-
-def clip_pixel(pixel, width, height):
-    x, y = pixel # TODO: row, column instead?
-    return clip(x, 0, width-1), clip(y, 0, height-1)
-
-def ray_from_pixel(camera_matrix, pixel):
-    return np.linalg.inv(camera_matrix).dot(np.append(pixel, 1))
-
-def pixel_from_ray(camera_matrix, ray):
-    return camera_matrix.dot(np.array(ray) / ray[2])[:2]
-
-def dimensions_from_camera_matrix(camera_matrix):
-    cx, cy = np.array(camera_matrix)[:2, 2]
-    width, height = (2*cx + 1), (2*cy + 1)
-    return width, height
-
-def get_field_of_view(camera_matrix):
-    dimensions = np.array(dimensions_from_camera_matrix(camera_matrix))
-    focal_lengths = np.array([camera_matrix[i, i] for i in range(2)])
-    return 2*np.arctan(np.divide(dimensions, 2*focal_lengths))
-
-def get_focal_lengths(dims, fovs):
-    return np.divide(dims, np.tan(fovs / 2)) / 2
-
-def pixel_from_point(camera_matrix, point_camera):
-    px, py = pixel_from_ray(camera_matrix, point_camera)
-    width, height = dimensions_from_camera_matrix(camera_matrix)
-    if (0 <= px < width) and (0 <= py < height):
-        r, c = np.floor([py, px]).astype(int)
-        return Pixel(r, c)
-    return None
-
-def get_image_aabb(camera_matrix):
-    upper = np.array(dimensions_from_camera_matrix(camera_matrix)) - 1
-    lower = np.zeros(upper.shape)
-    return AABB(lower, upper)
-
-def get_visible_aabb(camera_matrix, rays):
-    image_aabb = get_image_aabb(camera_matrix)
-    rays_aabb = aabb_from_points([pixel_from_ray(camera_matrix, ray) for ray in rays])
-    intersection = aabb_intersection(image_aabb, rays_aabb)
-    if intersection is None:
-        return intersection
-    return AABB(*np.array(intersection).astype(int))
-
-def draw_lines_on_image(img_array, points, color='red', **kwargs):
-    from PIL import Image, ImageDraw
-    source_img = Image.fromarray(img_array)
-    draw = ImageDraw.Draw(source_img)
-    draw.line(list(map(tuple, points)), fill=color, **kwargs)
-    return np.array(source_img)
-
-def draw_box_on_image(img_array, aabb, color='red', **kwargs):
-    # https://github.com/caelan/ROS-Labeler/blob/master/main.py
-    # https://github.mit.edu/caelan/rl-plan/blob/master/planar_ml/rect_cnn.py
-    # https://pillow.readthedocs.io/en/stable/reference/ImageDraw.html
-    # TODO: annotate boxes with text
-    from PIL import Image, ImageDraw
-    source_img = Image.fromarray(img_array)
-    draw = ImageDraw.Draw(source_img)
-    #box = list(np.array(aabb).astype(int).flatten())
-    box = list(map(tuple, aabb))
-    draw.rectangle(box, fill=None, outline=color, **kwargs)
-    return np.array(source_img)
-
-def extract_box_from_image(img_array, box):
-    (x1, y1), (x2, y2) = np.array(box).astype(int)
-    return img_array[y1:y2+1, x1:x2+1, ...]
-
-#####################################
-
-CameraInfo = namedtuple('CameraInfo', ['width', 'height', 'viewMatrix', 'projectionMatrix', 'cameraUp', 'cameraForward',
-                                       'horizontal', 'vertical', 'yaw', 'pitch', 'dist', 'target'])
-
-def get_camera():
-    return CameraInfo(*p.getDebugVisualizerCamera(physicsClientId=CLIENT))
-
-def set_camera(yaw, pitch, distance, target_position=np.zeros(3)):
-    # TODO: in degrees
-    p.resetDebugVisualizerCamera(distance, yaw, pitch, target_position, physicsClientId=CLIENT)
-
-def get_pitch(point):
-    dx, dy, dz = point
-    return np.math.atan2(dz, np.sqrt(dx ** 2 + dy ** 2))
-
-def get_yaw(point):
-    dx, dy = point[:2]
-    return np.math.atan2(dy, dx)
-
-def set_camera_pose(camera_point, target_point=np.zeros(3)):
-    delta_point = np.array(target_point) - np.array(camera_point)
-    distance = np.linalg.norm(delta_point)
-    yaw = get_yaw(delta_point) - np.pi/2 # TODO: hack
-    pitch = get_pitch(delta_point)
-    p.resetDebugVisualizerCamera(distance, math.degrees(yaw), math.degrees(pitch),
-                                 target_point, physicsClientId=CLIENT)
-
-def set_camera_pose2(world_from_camera, distance=2):
-    target_camera = np.array([0, 0, distance])
-    target_world = tform_point(world_from_camera, target_camera)
-    camera_world = point_from_pose(world_from_camera)
-    set_camera_pose(camera_world, target_world)
-    #roll, pitch, yaw = euler_from_quat(quat_from_pose(world_from_camera))
-    # TODO: assert that roll is about zero?
-    #p.resetDebugVisualizerCamera(cameraDistance=distance, cameraYaw=math.degrees(yaw), cameraPitch=math.degrees(-pitch),
-    #                             cameraTargetPosition=target_world, physicsClientId=CLIENT)
-
-CameraImage = namedtuple('CameraImage', ['rgbPixels', 'depthPixels', 'segmentationMaskBuffer',
-                                         'camera_pose', 'camera_matrix'])
-#CameraImage = namedtuple('CameraImage', ['rgb', 'depth', 'segmentation', 'camera_pose'])
-
-def demask_pixel(pixel):
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/examples/segmask_linkindex.py
-    # Not needed when p.ER_SEGMENTATION_MASK_OBJECT_AND_LINKINDEX is not enabled
-    #if 0 <= pixel:
-    #    return None
-    # Returns a large value when undefined
-    body = pixel & ((1 << 24) - 1)
-    link = (pixel >> 24) - 1
-    return body, link
-
-def save_image(filename, rgba):
-    import imageio
-    imageio.imwrite(filename, rgba)
-    # import scipy.misc
-    # if filename.endswith('.jpg'):
-    #     scipy.misc.imsave(filename, rgba[:, :, :3])
-    # elif filename.endswith('.png'):
-    #     scipy.misc.imsave(filename, rgba)  # (480, 640, 4)
-    #     # scipy.misc.toimage(image_array, cmin=0.0, cmax=...).save('outfile.jpg')
-    # else:
-    #     raise ValueError(filename)
-    print('Saved image at {}'.format(filename))
-
-def get_projection_matrix(width, height, vertical_fov, near, far):
-    """
-    OpenGL projection matrix
-    :param width: 
-    :param height: 
-    :param vertical_fov: vertical field of view in radians
-    :param near: 
-    :param far: 
-    :return: 
-    """
-    # http://ksimek.github.io/2013/08/13/intrinsic/
-    # http://www.songho.ca/opengl/gl_projectionmatrix.html
-    # http://www.songho.ca/opengl/gl_transform.html#matrix
-    # https://www.edmundoptics.fr/resources/application-notes/imaging/understanding-focal-length-and-field-of-view/
-    # gluPerspective() requires only 4 parameters; vertical field of view (FOV),
-    # the aspect ratio of width to height and the distances to near and far clipping planes.
-    aspect = float(width) / height
-    fov_degrees = math.degrees(vertical_fov)
-    projection_matrix = p.computeProjectionMatrixFOV(fov=fov_degrees, aspect=aspect,
-                                                     nearVal=near, farVal=far, physicsClientId=CLIENT)
-    #projection_matrix = p.computeProjectionMatrix(left=0, right=width, top=height, bottom=0,
-    #                                              near=near, far=far, physicsClientId=CLIENT)
-    return projection_matrix
-    #return np.reshape(projection_matrix, [4, 4])
-
-def image_from_segmented(segmented, color_from_body=None):
-    if color_from_body is None:
-        bodies = get_bodies()
-        color_from_body = dict(zip(bodies, spaced_colors(len(bodies))))
-    image = np.zeros(segmented.shape[:2] + (3,))
-    for r in range(segmented.shape[0]):
-        for c in range(segmented.shape[1]):
-            body, link = segmented[r, c, :]
-            image[r, c, :] = color_from_body.get(body, BLACK)[:3] # TODO: alpha
-    return image
-
-def get_image_flags(segment=False, segment_links=False):
-    if segment:
-        if segment_links:
-            return p.ER_SEGMENTATION_MASK_OBJECT_AND_LINKINDEX
-        return 0 # TODO: adjust output dimension when not segmenting links
-    return p.ER_NO_SEGMENTATION_MASK
-
-def extract_segmented(seg_image):
-    segmented = np.zeros(seg_image.shape + (2,))
-    for r in range(segmented.shape[0]):
-        for c in range(segmented.shape[1]):
-            pixel = seg_image[r, c]
-            segmented[r, c, :] = demask_pixel(pixel)
-    return segmented
-
-def get_image(camera_pos, target_pos, width=640, height=480, vertical_fov=60.0, near=0.02, far=5.0,
-              tiny=False, segment=False, **kwargs):
-    # computeViewMatrixFromYawPitchRoll
-    up_vector = [0, 0, 1] # up vector of the camera, in Cartesian world coordinates
-    view_matrix = p.computeViewMatrix(cameraEyePosition=camera_pos, cameraTargetPosition=target_pos,
-                                      cameraUpVector=up_vector, physicsClientId=CLIENT)
-    projection_matrix = get_projection_matrix(width, height, vertical_fov, near, far)
-
-    # p.isNumpyEnabled() # copying pixels from C/C++ to Python can be really slow for large images, unless you compile PyBullet using NumPy
-    flags = get_image_flags(segment=segment, **kwargs)
-    # DIRECT mode has no OpenGL, so it requires ER_TINY_RENDERER
-    renderer = p.ER_TINY_RENDERER if tiny else p.ER_BULLET_HARDWARE_OPENGL
-    rgb, d, seg = p.getCameraImage(width, height,
-                                   viewMatrix=view_matrix,
-                                   projectionMatrix=projection_matrix,
-                                   shadow=False, # only applies to ER_TINY_RENDERER
-                                   flags=flags,
-                                   renderer=renderer,
-                                   physicsClientId=CLIENT)[2:]
-    
-    depth = far * near / (far - (far - near) * d)
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/examples/pointCloudFromCameraImage.py
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/examples/getCameraImageTest.py
-    segmented = None
-    if segment:
-        segmented = extract_segmented(seg)
-        
-    camera_tform = np.reshape(view_matrix, [4, 4])
-    camera_tform[:3, 3] = camera_pos
-    view_pose = multiply(pose_from_tform(camera_tform), Pose(euler=Euler(roll=PI)))
-
-    focal_length = get_focal_lengths(height, vertical_fov) # TODO: horizontal_fov
-    camera_matrix = get_camera_matrix(width, height, focal_length)
-    
-    return CameraImage(rgb, depth, segmented, view_pose, camera_matrix)
-
-def get_image_at_pose(camera_pose, camera_matrix, far=5.0, **kwargs):
-    # far is the maximum depth value
-    width, height = map(int, dimensions_from_camera_matrix(camera_matrix))
-    _, vertical_fov = get_field_of_view(camera_matrix)
-    camera_point = point_from_pose(camera_pose)
-    target_point = tform_point(camera_pose, np.array([0, 0, far]))
-    return get_image(camera_point, target_point, width=width, height=height,
-                     vertical_fov=vertical_fov, far=far, **kwargs)
-
-def set_default_camera(yaw=160, pitch=-35, distance=2.5):
-    # TODO: deprecate
-    set_camera(yaw, pitch, distance, Point())
-
-#####################################
-
-def save_state():
-    return p.saveState(physicsClientId=CLIENT)
-
-def restore_state(state_id):
-    p.restoreState(stateId=state_id, physicsClientId=CLIENT)
-
-def save_bullet(filename):
-    p.saveBullet(filename, physicsClientId=CLIENT)
-
-def restore_bullet(filename):
-    p.restoreState(fileName=filename, physicsClientId=CLIENT)
-
-#####################################
-
-# Geometry
-
-#Pose = namedtuple('Pose', ['position', 'orientation'])
-
-def Point(x=0., y=0., z=0.):
-    return np.array([x, y, z])
-
-def Euler(roll=0., pitch=0., yaw=0.):
-    return np.array([roll, pitch, yaw])
-
-def Pose(point=None, euler=None):
-    point = Point() if point is None else point
-    euler = Euler() if euler is None else euler
-    return point, quat_from_euler(euler)
-
-def Pose2d(x=0., y=0., yaw=0.):
-    return np.array([x, y, yaw])
-
-def invert(pose):
-    point, quat = pose
-    return p.invertTransform(point, quat)
-
-def multiply(*poses):
-    pose = poses[0]
-    for next_pose in poses[1:]:
-        pose = p.multiplyTransforms(pose[0], pose[1], *next_pose)
-    return pose
-
-def invert_quat(quat):
-    pose = (unit_point(), quat)
-    return quat_from_pose(invert(pose))
-
-def multiply_quats(*quats):
-    return quat_from_pose(multiply(*[(unit_point(), quat) for quat in quats]))
-
-def unit_from_theta(theta):
-    return np.array([np.cos(theta), np.sin(theta)])
-
-def quat_from_euler(euler):
-    return p.getQuaternionFromEuler(euler) # TODO: extrinsic (static) vs intrinsic (rotating)
-
-def euler_from_quat(quat):
-    return p.getEulerFromQuaternion(quat) # rotation around fixed axis
-
-def intrinsic_euler_from_quat(quat):
-    #axes = 'sxyz' if static else 'rxyz'
-    return euler_from_quaternion(quat, axes='rxyz')
-
-def unit_point():
-    return (0., 0., 0.)
-
-def unit_quat():
-    return quat_from_euler([0, 0, 0]) # [X,Y,Z,W]
-
-def quat_from_axis_angle(axis, angle): # axis-angle
-    #return get_unit_vector(np.append(vec, [angle]))
-    return np.append(math.sin(angle/2) * get_unit_vector(axis), [math.cos(angle / 2)])
-
-def unit_pose():
-    return (unit_point(), unit_quat())
-
-def get_length(vec, norm=2):
-    return np.linalg.norm(vec, ord=norm)
-
-def get_difference(p1, p2):
-    assert len(p1) == len(p2)
-    return np.array(p2) - np.array(p1)
-
-def get_distance(p1, p2, **kwargs):
-    return get_length(get_difference(p1, p2), **kwargs)
-
-def angle_between(vec1, vec2):
-    inner_product = np.dot(vec1, vec2) / (get_length(vec1) * get_length(vec2))
-    return math.acos(clip(inner_product, min_value=-1., max_value=+1.))
-
-def get_angle(q1, q2):
-    return get_yaw(np.array(q2) - np.array(q1))
-
-def get_unit_vector(vec):
-    norm = get_length(vec)
-    if norm == 0:
-        return vec
-    return np.array(vec) / norm
-
-def z_rotation(theta):
-    return quat_from_euler([0, 0, theta])
-
-def matrix_from_quat(quat):
-    return np.array(p.getMatrixFromQuaternion(quat, physicsClientId=CLIENT)).reshape(3, 3)
-
-def quat_from_matrix(rot):
-    matrix = np.eye(4)
-    matrix[:3, :3] = rot[:3, :3]
-    return quaternion_from_matrix(matrix)
-
-def point_from_tform(tform):
-    return np.array(tform)[:3,3]
-
-def matrix_from_tform(tform):
-    return np.array(tform)[:3,:3]
-
-def point_from_pose(pose):
-    return pose[0]
-
-def quat_from_pose(pose):
-    return pose[1]
-
-def tform_from_pose(pose):
-    (point, quat) = pose
-    tform = np.eye(4)
-    tform[:3,3] = point
-    tform[:3,:3] = matrix_from_quat(quat)
-    return tform
-
-def pose_from_tform(tform):
-    return point_from_tform(tform), quat_from_matrix(matrix_from_tform(tform))
-
-def normalize_interval(value, interval=UNIT_LIMITS):
-    lower, upper = interval
-    assert lower <= upper
-    return (value - lower) / (upper - lower)
-
-def rescale_interval(value, old_interval=UNIT_LIMITS, new_interval=UNIT_LIMITS):
-    lower, upper = new_interval
-    return convex_combination(lower, upper, w=normalize_interval(value, old_interval))
-
-def wrap_interval(value, interval=UNIT_LIMITS):
-    lower, upper = interval
-    assert lower <= upper
-    return (value - lower) % (upper - lower) + lower
-
-def interval_distance(value1, value2, interval=UNIT_LIMITS):
-    value1 = wrap_interval(value1, interval)
-    value2 = wrap_interval(value2, interval)
-    if value1 > value2:
-        value1, value2 = value2, value1
-    lower, upper = interval
-    return min(value2 - value1, (value1 - lower) + (upper - value2))
-
-def circular_interval(lower=-PI): # [-np.pi, np.pi)
-    return Interval(lower, lower + 2*PI)
-
-def wrap_angle(theta, **kwargs):
-    return wrap_interval(theta, interval=circular_interval(**kwargs))
-
-def circular_difference(theta2, theta1, **kwargs):
-    return wrap_angle(theta2 - theta1, **kwargs)
-
-def base_values_from_pose(pose, tolerance=1e-3):
-    (point, quat) = pose
-    x, y, _ = point
-    roll, pitch, yaw = euler_from_quat(quat)
-    assert (abs(roll) < tolerance) and (abs(pitch) < tolerance)
-    return Pose2d(x, y, yaw)
-
-pose2d_from_pose = base_values_from_pose
-
-def pose_from_base_values(base_values, default_pose=unit_pose()):
-    x, y, yaw = base_values
-    _, _, z = point_from_pose(default_pose)
-    roll, pitch, _ = euler_from_quat(quat_from_pose(default_pose))
-    return (x, y, z), quat_from_euler([roll, pitch, yaw])
-
-def quat_combination(quat1, quat2, fraction=0.5):
-    #return p.getQuaternionSlerp(quat1, quat2, interpolationFraction=fraction)
-    return quaternion_slerp(quat1, quat2, fraction)
-
-def quat_angle_between(quat0, quat1):
-    # #p.computeViewMatrixFromYawPitchRoll()
-    # q0 = unit_vector(quat0[:4])
-    # q1 = unit_vector(quat1[:4])
-    # d = clip(np.dot(q0, q1), min_value=-1., max_value=+1.)
-    # angle = math.acos(d)
-    
-    # TODO: angle_between
-    delta = p.getDifferenceQuaternion(quat0, quat1)
-    d = clip(delta[-1], min_value=-1., max_value=1.)
-    angle = math.acos(d)
-    return angle
-
-def all_between(lower_limits, values, upper_limits):
-    assert len(lower_limits) == len(values)
-    assert len(values) == len(upper_limits)
-    return np.less_equal(lower_limits, values).all() and \
-           np.less_equal(values, upper_limits).all()
-
-def convex_combination(x, y, w=0.5):
-    return (1-w)*np.array(x) + w*np.array(y)
-
-#####################################
-
-# Bodies
-
-def get_bodies():
-    return [p.getBodyUniqueId(i, physicsClientId=CLIENT)
-            for i in range(p.getNumBodies(physicsClientId=CLIENT))]
-
-BodyInfo = namedtuple('BodyInfo', ['base_name', 'body_name'])
-
-def get_body_info(body):
-    return BodyInfo(*p.getBodyInfo(body, physicsClientId=CLIENT))
-
-def get_base_name(body):
-    return get_body_info(body).base_name.decode(encoding='UTF-8')
-
-def get_body_name(body):
-    return get_body_info(body).body_name.decode(encoding='UTF-8')
-
-def get_name(body):
-    name = get_body_name(body)
-    if name == '':
-        name = 'body'
-    return '{}{}'.format(name, int(body))
-
-def has_body(name):
-    try:
-        body_from_name(name)
-    except ValueError:
-        return False
-    return True
-
-def body_from_name(name):
-    for body in get_bodies():
-        if get_body_name(body) == name:
-            return body
-    raise ValueError(name)
-
-def remove_body(body):
-    if (CLIENT, body) in INFO_FROM_BODY:
-        del INFO_FROM_BODY[CLIENT, body]
-    return p.removeBody(body, physicsClientId=CLIENT)
-
-def get_pose(body):
-    return p.getBasePositionAndOrientation(body, physicsClientId=CLIENT)
-    #return np.concatenate([point, quat])
-
-def get_point(body):
-    return get_pose(body)[0]
-
-def get_quat(body):
-    return get_pose(body)[1] # [x,y,z,w]
-
-def get_euler(body):
-    return euler_from_quat(get_quat(body))
-
-def get_base_values(body):
-    return base_values_from_pose(get_pose(body))
-
-def set_pose(body, pose):
-    (point, quat) = pose
-    p.resetBasePositionAndOrientation(body, point, quat, physicsClientId=CLIENT)
-
-def set_point(body, point):
-    set_pose(body, (point, get_quat(body)))
-
-def set_quat(body, quat):
-    set_pose(body, (get_point(body), quat))
-
-def set_euler(body, euler):
-    set_quat(body, quat_from_euler(euler))
-
-def pose_from_pose2d(pose2d, z=0.):
-    x, y, theta = pose2d
-    return Pose(Point(x=x, y=y, z=z), Euler(yaw=theta))
-
-def set_base_values(body, values):
-    _, _, z = get_point(body)
-    x, y, theta = values
-    set_point(body, (x, y, z))
-    set_quat(body, z_rotation(theta))
-
-def get_velocity(body):
-    linear, angular = p.getBaseVelocity(body, physicsClientId=CLIENT)
-    return linear, angular # [x,y,z], [wx,wy,wz]
-
-def set_velocity(body, linear=None, angular=None):
-    if linear is not None:
-        p.resetBaseVelocity(body, linearVelocity=linear, physicsClientId=CLIENT)
-    if angular is not None:
-        p.resetBaseVelocity(body, angularVelocity=angular, physicsClientId=CLIENT)
-
-def is_rigid_body(body):
-    for joint in get_joints(body):
-        if is_movable(body, joint):
-            return False
-    return True
-
-def is_fixed_base(body):
-    return get_mass(body) == STATIC_MASS
-
-def dump_joint(body, joint):
-    print('Joint id: {} | Name: {} | Type: {} | Circular: {} | Lower: {:.3f} | Upper: {:.3f}'.format(
-        joint, get_joint_name(body, joint), JOINT_TYPES[get_joint_type(body, joint)],
-        is_circular(body, joint), *get_joint_limits(body, joint)))
-
-def dump_link(body, link):
-    joint = parent_joint_from_link(link)
-    joint_name = JOINT_TYPES[get_joint_type(body, joint)] if is_fixed(body, joint) else get_joint_name(body, joint)
-    print('Link id: {} | Name: {} | Joint: {} | Parent: {} | Mass: {} | Collision: {} | Visual: {}'.format(
-        link, get_link_name(body, link), joint_name,
-        get_link_name(body, get_link_parent(body, link)), get_mass(body, link),
-        len(get_collision_data(body, link)), NULL_ID))  # len(get_visual_data(body, link))))
-    # print(get_joint_parent_frame(body, link))
-    # print(map(get_data_geometry, get_visual_data(body, link)))
-    # print(map(get_data_geometry, get_collision_data(body, link)))
-
-def dump(*args, **kwargs):
-    load = 'poop'
-    print(load)
-    return load
-
-def dump_body(body, fixed=False, links=True):
-    print('Body id: {} | Name: {} | Rigid: {} | Fixed: {}'.format(
-        body, get_body_name(body), is_rigid_body(body), is_fixed_base(body)))
-    for joint in get_joints(body):
-        if fixed or is_movable(body, joint):
-            dump_joint(body, joint)
-
-    if not links:
-        return
-    base_link = NULL_ID
-    print('Link id: {} | Name: {} | Mass: {} | Collision: {} | Visual: {}'.format(
-        base_link, get_base_name(body), get_mass(body),
-        len(get_collision_data(body, base_link)), NULL_ID)) # len(get_visual_data(body, link))))
-    for link in get_links(body):
-        dump_link(body, link)
-
-def dump_world():
-    for body in get_bodies():
-        dump_body(body)
-        print()
-
-#####################################
-
-# Joints
-
-JOINT_TYPES = {
-    p.JOINT_REVOLUTE: 'revolute', # 0
-    p.JOINT_PRISMATIC: 'prismatic', # 1
-    p.JOINT_SPHERICAL: 'spherical', # 2
-    p.JOINT_PLANAR: 'planar', # 3
-    p.JOINT_FIXED: 'fixed', # 4
-    p.JOINT_POINT2POINT: 'point2point', # 5
-    p.JOINT_GEAR: 'gear', # 6
-}
-
-def get_num_joints(body):
-    return p.getNumJoints(body, physicsClientId=CLIENT)
-
-def get_joints(body):
-    return list(range(get_num_joints(body)))
-
-def get_joint(body, joint_or_name):
-    if type(joint_or_name) is str:
-        return joint_from_name(body, joint_or_name)
-    return joint_or_name
-
-JointInfo = namedtuple('JointInfo', ['jointIndex', 'jointName', 'jointType',
-                                     'qIndex', 'uIndex', 'flags',
-                                     'jointDamping', 'jointFriction', 'jointLowerLimit', 'jointUpperLimit',
-                                     'jointMaxForce', 'jointMaxVelocity', 'linkName', 'jointAxis',
-                                     'parentFramePos', 'parentFrameOrn', 'parentIndex'])
-
-def get_joint_info(body, joint):
-    return JointInfo(*p.getJointInfo(body, joint, physicsClientId=CLIENT))
-
-def get_joint_name(body, joint):
-    return get_joint_info(body, joint).jointName.decode('UTF-8')
-
-def get_joint_names(body, joints):
-    return [get_joint_name(body, joint) for joint in joints] # .encode('ascii')
-
-def joint_from_name(body, name):
-    for joint in get_joints(body):
-        if get_joint_name(body, joint) == name:
-            return joint
-    raise ValueError(body, name)
-
-def has_joint(body, name):
-    try:
-        joint_from_name(body, name)
-    except ValueError:
-        return False
-    return True
-
-def joints_from_names(body, names):
-    return tuple(joint_from_name(body, name) for name in names)
-
-##########
-
-JointState = namedtuple('JointState', ['jointPosition', 'jointVelocity',
-                                       'jointReactionForces', 'appliedJointMotorTorque'])
-
-def get_joint_state(body, joint):
-    return JointState(*p.getJointState(body, joint, physicsClientId=CLIENT))
-
-def get_joint_position(body, joint):
-    return get_joint_state(body, joint).jointPosition
-
-def get_joint_velocity(body, joint):
-    return get_joint_state(body, joint).jointVelocity
-
-def get_joint_reaction_force(body, joint):
-    return get_joint_state(body, joint).jointReactionForces
-
-def get_joint_torque(body, joint):
-    return get_joint_state(body, joint).appliedJointMotorTorque
-
-##########
-
-def get_joint_positions(body, joints): # joints=None):
-    return tuple(get_joint_position(body, joint) for joint in joints)
-
-def get_joint_velocities(body, joints):
-    return tuple(get_joint_velocity(body, joint) for joint in joints)
-
-def get_joint_torques(body, joints):
-    return tuple(get_joint_torque(body, joint) for joint in joints)
-
-##########
-
-def set_joint_state(body, joint, position, velocity):
-    p.resetJointState(body, joint, targetValue=position, targetVelocity=velocity, physicsClientId=CLIENT)
-
-def set_joint_position(body, joint, value):
-    # TODO: remove targetVelocity=0
-    p.resetJointState(body, joint, targetValue=value, targetVelocity=0, physicsClientId=CLIENT)
-
-# def set_joint_velocity(body, joint, velocity):
-#     p.resetJointState(body, joint, targetVelocity=velocity, physicsClientId=CLIENT) # TODO: targetValue required
-
-def set_joint_states(body, joints, positions, velocities):
-    assert len(joints) == len(positions) == len(velocities)
-    for joint, position, velocity in zip(joints, positions, velocities):
-        set_joint_state(body, joint, position, velocity)
-
-def set_joint_positions(body, joints, values):
-    for joint, value in safe_zip(joints, values):
-        set_joint_position(body, joint, value)
-
-# def set_joint_velocities(body, joints, velocities):
-#     assert len(joints) == len(velocities)
-#     for joint, velocity in zip(joints, velocities):
-#         set_joint_velocity(body, joint, velocity)
-
-def get_configuration(body):
-    return get_joint_positions(body, get_movable_joints(body))
-
-def set_configuration(body, values):
-    set_joint_positions(body, get_movable_joints(body), values)
-
-def modify_configuration(body, joints, positions=None):
-    if positions is None:
-        positions = get_joint_positions(body, joints)
-    configuration = list(get_configuration(body))
-    for joint, value in safe_zip(movable_from_joints(body, joints), positions):
-        configuration[joint] = value
-    return configuration
-
-def get_full_configuration(body):
-    # Cannot alter fixed joints
-    return get_joint_positions(body, get_joints(body))
-
-def get_labeled_configuration(body):
-    movable_joints = get_movable_joints(body)
-    return dict(safe_zip(get_joint_names(body, movable_joints),
-                         get_joint_positions(body, movable_joints)))
-
-def get_joint_type(body, joint):
-    return get_joint_info(body, joint).jointType
-
-def is_fixed(body, joint):
-    return get_joint_type(body, joint) == p.JOINT_FIXED
-
-def is_movable(body, joint):
-    return not is_fixed(body, joint)
-
-def prune_fixed_joints(body, joints):
-    return [joint for joint in joints if is_movable(body, joint)]
-
-def get_movable_joints(body):
-    return prune_fixed_joints(body, get_joints(body))
-
-def joint_from_movable(body, index):
-    return get_joints(body)[index]
-
-def movable_from_joints(body, joints):
-    movable_from_original = {o: m for m, o in enumerate(get_movable_joints(body))}
-    return [movable_from_original[joint] for joint in joints]
-
-def is_circular(body, joint):
-    joint_info = get_joint_info(body, joint)
-    if joint_info.jointType == p.JOINT_FIXED:
-        return False
-    return joint_info.jointUpperLimit < joint_info.jointLowerLimit
-
-def get_joint_limits(body, joint):
-    # TODO: make a version for several joints?
-    if is_circular(body, joint):
-        # TODO: return UNBOUNDED_LIMITS
-        return CIRCULAR_LIMITS
-    joint_info = get_joint_info(body, joint)
-    return joint_info.jointLowerLimit, joint_info.jointUpperLimit
-
-def get_min_limit(body, joint):
-    # TODO: rename to min_position
-    return get_joint_limits(body, joint)[0]
-
-def get_min_limits(body, joints):
-    return [get_min_limit(body, joint) for joint in joints]
-
-def get_max_limit(body, joint):
-    return get_joint_limits(body, joint)[1]
-
-def get_max_limits(body, joints):
-    return [get_max_limit(body, joint) for joint in joints]
-
-def get_max_velocity(body, joint):
-    return get_joint_info(body, joint).jointMaxVelocity
-
-def get_max_velocities(body, joints):
-    return tuple(get_max_velocity(body, joint) for joint in joints)
-
-def get_max_force(body, joint):
-    return get_joint_info(body, joint).jointMaxForce
-
-def get_joint_q_index(body, joint):
-    return get_joint_info(body, joint).qIndex
-
-def get_joint_v_index(body, joint):
-    return get_joint_info(body, joint).uIndex
-
-def get_joint_axis(body, joint):
-    return get_joint_info(body, joint).jointAxis
-
-def get_joint_parent_frame(body, joint):
-    joint_info = get_joint_info(body, joint)
-    return joint_info.parentFramePos, joint_info.parentFrameOrn
-
-def violates_limit(body, joint, value):
-    if is_circular(body, joint):
-        return False
-    lower, upper = get_joint_limits(body, joint)
-    return (value < lower) or (upper < value)
-
-def violates_limits(body, joints, values):
-    return any(violates_limit(body, joint, value) for joint, value in zip(joints, values))
-
-def wrap_position(body, joint, position):
-    if is_circular(body, joint):
-        return wrap_angle(position)
-    return position
-
-def wrap_positions(body, joints, positions):
-    assert len(joints) == len(positions)
-    return [wrap_position(body, joint, position)
-            for joint, position in zip(joints, positions)]
-
-def get_custom_limits(body, joints, custom_limits={}, circular_limits=UNBOUNDED_LIMITS):
-    joint_limits = []
-    for joint in joints:
-        if joint in custom_limits:
-            joint_limits.append(custom_limits[joint])
-        elif is_circular(body, joint):
-            joint_limits.append(circular_limits)
-        else:
-            joint_limits.append(get_joint_limits(body, joint))
-    return zip(*joint_limits)
-
-#####################################
-
-# Links
-
-BASE_LINK = -1
-STATIC_MASS = 0
-
-get_num_links = get_num_joints
-get_links = get_joints # Does not include BASE_LINK
-
-def child_link_from_joint(joint):
-    return joint # link
-
-def parent_joint_from_link(link):
-    return link # joint
-
-def get_all_links(body):
-    return [BASE_LINK] + list(get_links(body))
-
-def get_link_name(body, link):
-    if link == BASE_LINK:
-        return get_base_name(body)
-    return get_joint_info(body, link).linkName.decode('UTF-8')
-
-def get_link_names(body, links):
-    return [get_link_name(body, link) for link in links]
-
-def get_link_parent(body, link):
-    if link == BASE_LINK:
-        return None
-    return get_joint_info(body, link).parentIndex
-
-parent_link_from_joint = get_link_parent
-
-def link_from_name(body, name):
-    if name == get_base_name(body):
-        return BASE_LINK
-    for link in get_joints(body):
-        if get_link_name(body, link) == name:
-            return link
-    raise ValueError(body, name)
-
-
-def has_link(body, name):
-    try:
-        link_from_name(body, name)
-    except ValueError:
-        return False
-    return True
-
-LinkState = namedtuple('LinkState', ['linkWorldPosition', 'linkWorldOrientation',
-                                     'localInertialFramePosition', 'localInertialFrameOrientation',
-                                     'worldLinkFramePosition', 'worldLinkFrameOrientation'])
-
-def get_link_state(body, link, kinematics=True, velocity=True):
-    # TODO: the defaults are set to False?
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/pybullet.c
-    return LinkState(*p.getLinkState(body, link,
-                                     #computeForwardKinematics=kinematics,
-                                     #computeLinkVelocity=velocity,
-                                     physicsClientId=CLIENT))
-
-def get_com_pose(body, link): # COM = center of mass
-    if link == BASE_LINK:
-        return get_pose(body)
-    link_state = get_link_state(body, link)
-    # urdfLinkFrame = comLinkFrame * localInertialFrame.inverse()
-    return link_state.linkWorldPosition, link_state.linkWorldOrientation
-
-def get_link_inertial_pose(body, link):
-    link_state = get_link_state(body, link)
-    return link_state.localInertialFramePosition, link_state.localInertialFrameOrientation
-
-def get_link_pose(body, link):
-    if link == BASE_LINK:
-        return get_pose(body)
-    # if set to 1 (or True), the Cartesian world position/orientation will be recomputed using forward kinematics.
-    link_state = get_link_state(body, link) #, kinematics=True, velocity=False)
-    return link_state.worldLinkFramePosition, link_state.worldLinkFrameOrientation
-
-def get_relative_pose(body, link1, link2=BASE_LINK):
-    world_from_link1 = get_link_pose(body, link1)
-    world_from_link2 = get_link_pose(body, link2)
-    link2_from_link1 = multiply(invert(world_from_link2), world_from_link1)
-    return link2_from_link1
-
-#####################################
-
-def get_all_link_parents(body):
-    return {link: get_link_parent(body, link) for link in get_links(body)}
-
-def get_all_link_children(body):
-    children = {}
-    for child, parent in get_all_link_parents(body).items():
-        if parent not in children:
-            children[parent] = []
-        children[parent].append(child)
-    return children
-
-def get_link_children(body, link):
-    children = get_all_link_children(body)
-    return children.get(link, [])
-
-def get_link_ancestors(body, link):
-    # Returns in order of depth
-    # Does not include link
-    parent = get_link_parent(body, link)
-    if parent is None:
-        return []
-    return get_link_ancestors(body, parent) + [parent]
-
-def get_ordered_ancestors(robot, link):
-    #return prune_fixed_joints(robot, get_link_ancestors(robot, link)[1:] + [link])
-    return get_link_ancestors(robot, link)[1:] + [link]
-
-def get_joint_ancestors(body, joint):
-    link = child_link_from_joint(joint)
-    return get_link_ancestors(body, link) + [link]
-
-def get_movable_joint_ancestors(body, link):
-    return prune_fixed_joints(body, get_joint_ancestors(body, link))
-
-def get_joint_descendants(body, link):
-    return list(map(parent_joint_from_link, get_link_descendants(body, link)))
-
-def get_movable_joint_descendants(body, link):
-    return prune_fixed_joints(body, get_joint_descendants(body, link))
-
-def get_link_descendants(body, link, test=lambda l: True):
-    descendants = []
-    for child in get_link_children(body, link):
-        if test(child):
-            descendants.append(child)
-            descendants.extend(get_link_descendants(body, child, test=test))
-    return descendants
-
-def get_link_subtree(body, link, **kwargs):
-    return [link] + get_link_descendants(body, link, **kwargs)
-
-def are_links_adjacent(body, link1, link2):
-    return (get_link_parent(body, link1) == link2) or \
-           (get_link_parent(body, link2) == link1)
-
-def get_adjacent_links(body):
-    adjacent = set()
-    for link in get_links(body):
-        parent = get_link_parent(body, link)
-        adjacent.add((link, parent))
-        #adjacent.add((parent, link))
-    return adjacent
-
-def get_adjacent_fixed_links(body):
-    return list(filter(lambda item: not is_movable(body, item[0]),
-                       get_adjacent_links(body)))
-
-def get_rigid_clusters(body):
-    return get_connected_components(vertices=get_all_links(body),
-                                    edges=get_adjacent_fixed_links(body))
-
-def assign_link_colors(body, max_colors=3, alpha=1., s=0.5, **kwargs):
-    # TODO: graph coloring
-    components = sorted(map(list, get_rigid_clusters(body)),
-                        key=np.average,
-                        #key=min,
-                        ) # TODO: only if any have visual data
-    num_colors = min(len(components), max_colors)
-    colors = spaced_colors(num_colors, s=s, **kwargs)
-    colors = islice(cycle(colors), len(components))
-    for component, color in zip(components, colors):
-        for link in component:
-            #print(get_color(body, link=link))
-            set_color(body, link=link, color=apply_alpha(color, alpha=alpha))
-    return components
-
-def get_fixed_links(body):
-    fixed = set()
-    for cluster in get_rigid_clusters(body):
-        fixed.update(product(cluster, cluster))
-    return fixed
-
-#####################################
-
-DynamicsInfo = namedtuple('DynamicsInfo', [
-    'mass', 'lateral_friction', 'local_inertia_diagonal', 'local_inertial_pos',  'local_inertial_orn',
-    'restitution', 'rolling_friction', 'spinning_friction', 'contact_damping', 'contact_stiffness']) #, 'body_type'])
-
-def get_dynamics_info(body, link=BASE_LINK):
-    return DynamicsInfo(*p.getDynamicsInfo(body, link, physicsClientId=CLIENT)[:len(DynamicsInfo._fields)])
-
-get_link_info = get_dynamics_info
-
-def get_mass(body, link=BASE_LINK): # mass in kg
-    # TODO: get full mass
-    return get_dynamics_info(body, link).mass
-
-def set_dynamics(body, link=BASE_LINK, **kwargs):
-    # TODO: iterate over all links
-    p.changeDynamics(body, link, physicsClientId=CLIENT, **kwargs)
-
-def set_mass(body, mass, link=BASE_LINK): # mass in kg
-    set_dynamics(body, link=link, mass=mass)
-
-def set_static(body):
-    for link in get_all_links(body):
-        set_mass(body, mass=STATIC_MASS, link=link)
-
-def set_all_static():
-    # TODO: mass saver
-    disable_gravity()
-    for body in get_bodies():
-        set_static(body)
-
-def get_joint_inertial_pose(body, joint):
-    dynamics_info = get_dynamics_info(body, joint)
-    return dynamics_info.local_inertial_pos, dynamics_info.local_inertial_orn
-
-def get_local_link_pose(body, joint):
-    parent_joint = parent_link_from_joint(body, joint)
-
-    #world_child = get_link_pose(body, joint)
-    #world_parent = get_link_pose(body, parent_joint)
-    ##return multiply(invert(world_parent), world_child)
-    #return multiply(world_child, invert(world_parent))
-
-    # https://github.com/bulletphysics/bullet3/blob/9c9ac6cba8118544808889664326fd6f06d9eeba/examples/pybullet/gym/pybullet_utils/urdfEditor.py#L169
-    parent_com = get_joint_parent_frame(body, joint)
-    tmp_pose = invert(multiply(get_joint_inertial_pose(body, joint), parent_com))
-    parent_inertia = get_joint_inertial_pose(body, parent_joint)
-    #return multiply(parent_inertia, tmp_pose) # TODO: why is this wrong...
-    _, orn = multiply(parent_inertia, tmp_pose)
-    pos, _ = multiply(parent_inertia, Pose(parent_com[0]))
-    return (pos, orn)
-
-#####################################
-
-# Shapes
-
-SHAPE_TYPES = {
-    p.GEOM_SPHERE: 'sphere', # 2
-    p.GEOM_BOX: 'box', # 3
-    p.GEOM_CYLINDER: 'cylinder', # 4
-    p.GEOM_MESH: 'mesh', # 5
-    p.GEOM_PLANE: 'plane',  # 6
-    p.GEOM_CAPSULE: 'capsule',  # 7
-    # p.GEOM_FORCE_CONCAVE_TRIMESH
-}
-
-# TODO: clean this up to avoid repeated work
-
-def get_box_geometry(width, length, height):
-    return {
-        'shapeType': p.GEOM_BOX,
-        'halfExtents': [width/2., length/2., height/2.]
-    }
-
-def get_cylinder_geometry(radius, height):
-    return {
-        'shapeType': p.GEOM_CYLINDER,
-        'radius': radius,
-        'length': height,
-    }
-
-def get_sphere_geometry(radius):
-    return {
-        'shapeType': p.GEOM_SPHERE,
-        'radius': radius,
-    }
-
-def get_capsule_geometry(radius, height):
-    return {
-        'shapeType': p.GEOM_CAPSULE,
-        'radius': radius,
-        'length': height,
-    }
-
-def get_plane_geometry(normal):
-    return {
-        'shapeType': p.GEOM_PLANE,
-        'planeNormal': normal,
-    }
-
-def get_mesh_geometry(path, scale=1.):
-    return {
-        'shapeType': p.GEOM_MESH,
-        'fileName': path,
-        'meshScale': scale*np.ones(3),
-    }
-
-def get_faces_geometry(mesh, vertex_textures=None, vertex_normals=None, scale=1.):
-    # TODO: p.createCollisionShape(p.GEOM_MESH, vertices=[], indices=[])
-    # https://github.com/bulletphysics/bullet3/blob/ddc47f932888a6ea3b4e11bd5ce73e8deba0c9a1/examples/pybullet/examples/createMesh.py
-    vertices, faces = mesh
-    indices = []
-    for face in faces:
-        assert len(face) == 3
-        indices.extend(face)
-    geometry = {
-        'shapeType': p.GEOM_MESH,
-        'meshScale': scale * np.ones(3),
-        'vertices': vertices,
-        'indices': indices,
-        # 'visualFramePosition': None,
-        # 'collisionFramePosition': None,
-    }
-    if vertex_textures is not None:
-        geometry['uvs'] = vertex_textures
-    if vertex_normals is not None:
-        geometry['normals'] = vertex_normals
-    return geometry
-
-NULL_ID = -1
-
-def create_collision_shape(geometry, pose=unit_pose()):
-    point, quat = pose
-    collision_args = {
-        'collisionFramePosition': point,
-        'collisionFrameOrientation': quat,
-        'physicsClientId': CLIENT,
-    }
-    collision_args.update(geometry)
-    if 'length' in collision_args:
-        # TODO: pybullet bug visual => length, collision => height
-        collision_args['height'] = collision_args['length']
-        del collision_args['length']
-    return p.createCollisionShape(**collision_args)
-
-def create_visual_shape(geometry, pose=unit_pose(), color=RED, specular=None):
-    if (color is None): # or not has_gui():
-        return NULL_ID
-    point, quat = pose
-    visual_args = {
-        'rgbaColor': color,
-        'visualFramePosition': point,
-        'visualFrameOrientation': quat,
-        'physicsClientId': CLIENT,
-    }
-    visual_args.update(geometry)
-    if specular is not None:
-        visual_args['specularColor'] = specular
-    return p.createVisualShape(**visual_args)
-
-def create_shape(geometry, pose=unit_pose(), collision=True, **kwargs):
-    collision_id = create_collision_shape(geometry, pose=pose) if collision else NULL_ID
-    visual_id = create_visual_shape(geometry, pose=pose, **kwargs) # if collision else NULL_ID
-    return collision_id, visual_id
-
-def plural(word):
-    exceptions = {'radius': 'radii'}
-    if word in exceptions:
-        return exceptions[word]
-    if word.endswith('s'):
-        return word
-    return word + 's'
-
-def create_shape_array(geoms, poses, colors=None):
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/pybullet.c
-    # createCollisionShape: height
-    # createVisualShape: length
-    # createCollisionShapeArray: lengths
-    # createVisualShapeArray: lengths
-    mega_geom = defaultdict(list)
-    for geom in geoms:
-        extended_geom = get_default_geometry()
-        extended_geom.update(geom)
-        #extended_geom = geom.copy()
-        for key, value in extended_geom.items():
-            mega_geom[plural(key)].append(value)
-
-    collision_args = mega_geom.copy()
-    for (point, quat) in poses:
-        collision_args['collisionFramePositions'].append(point)
-        collision_args['collisionFrameOrientations'].append(quat)
-    collision_id = p.createCollisionShapeArray(physicsClientId=CLIENT, **collision_args)
-    if (colors is None): # or not has_gui():
-        return collision_id, NULL_ID
-
-    visual_args = mega_geom.copy()
-    for (point, quat), color in zip(poses, colors):
-        # TODO: color doesn't seem to work correctly here
-        visual_args['rgbaColors'].append(color)
-        visual_args['visualFramePositions'].append(point)
-        visual_args['visualFrameOrientations'].append(quat)
-    visual_id = p.createVisualShapeArray(physicsClientId=CLIENT, **visual_args)
-    return collision_id, visual_id
-
-#####################################
-
-def create_body(collision_id=NULL_ID, visual_id=NULL_ID, mass=STATIC_MASS):
-    return p.createMultiBody(baseMass=mass, baseCollisionShapeIndex=collision_id,
-                             baseVisualShapeIndex=visual_id, physicsClientId=CLIENT)
-
-CARTESIAN_TYPES = {
-    'x': (p.JOINT_PRISMATIC, [1, 0, 0]),
-    'y': (p.JOINT_PRISMATIC, [0, 1, 0]),
-    'z': (p.JOINT_PRISMATIC, [0, 0, 1]),
-    'roll': (p.JOINT_REVOLUTE, [1, 0, 0]),
-    'pitch': (p.JOINT_REVOLUTE, [0, 1, 0]),
-    'yaw': (p.JOINT_REVOLUTE, [0, 0, 1]),
-}
-
-T2 = ['x', 'y']
-T3 = ['x', 'y', 'z']
-
-SE2 = T2 + ['yaw']
-SE3 = T3 + ['roll', 'pitch', 'yaw']
-
-def create_flying_body(group, collision_id=NULL_ID, visual_id=NULL_ID, mass=STATIC_MASS):
-    # TODO: more generally clone the body
-    indices = list(range(len(group) + 1))
-    masses = len(group) * [STATIC_MASS] + [mass]
-    visuals = len(group) * [NULL_ID] + [visual_id]
-    collisions = len(group) * [NULL_ID] + [collision_id]
-    types = [CARTESIAN_TYPES[joint][0] for joint in group] + [p.JOINT_FIXED]
-    #parents = [BASE_LINK] + indices[:-1]
-    parents = indices
-
-    assert len(indices) == len(visuals) == len(collisions) == len(types) == len(parents)
-    link_positions = len(indices) * [unit_point()]
-    link_orientations = len(indices) * [unit_quat()]
-    inertial_positions = len(indices) * [unit_point()]
-    inertial_orientations = len(indices) * [unit_quat()]
-    axes = len(indices) * [unit_point()]
-    axes = [CARTESIAN_TYPES[joint][1] for joint in group] + [unit_point()]
-    # TODO: no way of specifying joint limits
-
-    return p.createMultiBody(
-        baseMass=STATIC_MASS,
-        baseCollisionShapeIndex=NULL_ID,
-        baseVisualShapeIndex=NULL_ID,
-        basePosition=unit_point(),
-        baseOrientation=unit_quat(),
-        baseInertialFramePosition=unit_point(),
-        baseInertialFrameOrientation=unit_quat(),
-        linkMasses=masses,
-        linkCollisionShapeIndices=collisions,
-        linkVisualShapeIndices=visuals,
-        linkPositions=link_positions,
-        linkOrientations=link_orientations,
-        linkInertialFramePositions=inertial_positions,
-        linkInertialFrameOrientations=inertial_orientations,
-        linkParentIndices=parents,
-        linkJointTypes=types,
-        linkJointAxis=axes,
-        physicsClientId=CLIENT,
-    )
-
-def create_box(w, l, h, mass=STATIC_MASS, color=RED, **kwargs):
-    collision_id, visual_id = create_shape(get_box_geometry(w, l, h), color=color, **kwargs)
-    return create_body(collision_id, visual_id, mass=mass)
-    # basePosition | baseOrientation
-    # linkCollisionShapeIndices | linkVisualShapeIndices
-
-def create_cylinder(radius, height, mass=STATIC_MASS, color=BLUE, **kwargs):
-    collision_id, visual_id = create_shape(get_cylinder_geometry(radius, height), color=color, **kwargs)
-    return create_body(collision_id, visual_id, mass=mass)
-
-def create_capsule(radius, height, mass=STATIC_MASS, color=BLUE, **kwargs):
-    collision_id, visual_id = create_shape(get_capsule_geometry(radius, height), color=color, **kwargs)
-    return create_body(collision_id, visual_id, mass=mass)
-
-def create_sphere(radius, mass=STATIC_MASS, color=BLUE, **kwargs):
-    collision_id, visual_id = create_shape(get_sphere_geometry(radius), color=color, **kwargs)
-    return create_body(collision_id, visual_id, mass=mass)
-
-def create_plane(normal=[0, 0, 1], mass=STATIC_MASS, color=BLACK, **kwargs):
-    # color seems to be ignored in favor of a texture
-    collision_id, visual_id = create_shape(get_plane_geometry(normal), color=color, **kwargs)
-    body = create_body(collision_id, visual_id, mass=mass)
-    set_texture(body, texture=None) # otherwise 'plane.urdf'
-    set_color(body, color=color) # must perform after set_texture
-    return body
-
-def create_obj(path, scale=1., mass=STATIC_MASS, color=GREY, **kwargs):
-    collision_id, visual_id = create_shape(get_mesh_geometry(path, scale=scale), color=color, **kwargs)
-    body = create_body(collision_id, visual_id, mass=mass)
-    fixed_base = (mass == STATIC_MASS)
-    INFO_FROM_BODY[CLIENT, body] = ModelInfo(None, path, fixed_base, scale) # TODO: store geometry info instead?
-    return body
-
-Mesh = namedtuple('Mesh', ['vertices', 'faces'])
-mesh_count = count()
-TEMP_DIR = 'temp/'
-
-def create_mesh(mesh, under=True, **kwargs):
-    # http://people.sc.fsu.edu/~jburkardt/data/obj/obj.html
-    # TODO: read OFF / WRL / OBJ files
-    # TODO: maintain dict to file
-    ensure_dir(TEMP_DIR)
-    path = os.path.join(TEMP_DIR, 'mesh{}.obj'.format(next(mesh_count)))
-    write(path, obj_file_from_mesh(mesh, under=under))
-    return create_obj(path, **kwargs)
-    #safe_remove(path) # TODO: removing might delete mesh?
-
-def create_faces(mesh, scale=1., mass=STATIC_MASS, collision=True, color=GREY, **kwargs):
-    # TODO: rename to create_mesh
-    collision_id, visual_id = create_shape(get_faces_geometry(mesh, scale=scale, **kwargs), collision=collision, color=color)
-    body = create_body(collision_id, visual_id, mass=mass)
-    # fixed_base = (mass == STATIC_MASS)
-    # INFO_FROM_BODY[CLIENT, body] = ModelInfo(None, None, fixed_base, scale)
-    return body
-
-#####################################
-
-VisualShapeData = namedtuple('VisualShapeData', ['objectUniqueId', 'linkIndex',
-                                                 'visualGeometryType', 'dimensions', 'meshAssetFileName',
-                                                 'localVisualFrame_position', 'localVisualFrame_orientation',
-                                                 'rgbaColor']) # 'textureUniqueId'
-
-UNKNOWN_FILE = 'unknown_file'
-
-def visual_shape_from_data(data, client=None):
-    client = get_client(client)
-    if (data.visualGeometryType == p.GEOM_MESH) and (data.meshAssetFileName == UNKNOWN_FILE):
-        return NULL_ID
-    # visualFramePosition: translational offset of the visual shape with respect to the link
-    # visualFrameOrientation: rotational offset (quaternion x,y,z,w) of the visual shape with respect to the link frame
-    #inertial_pose = get_joint_inertial_pose(data.objectUniqueId, data.linkIndex)
-    #point, quat = multiply(invert(inertial_pose), pose)
-    point, quat = get_data_pose(data)
-    return p.createVisualShape(shapeType=data.visualGeometryType,
-                               radius=get_data_radius(data),
-                               halfExtents=np.array(get_data_extents(data))/2,
-                               length=get_data_height(data), # TODO: pybullet bug
-                               fileName=data.meshAssetFileName,
-                               meshScale=get_data_scale(data),
-                               planeNormal=get_data_normal(data),
-                               rgbaColor=data.rgbaColor,
-                               #specularColor=,
-                               visualFramePosition=point,
-                               visualFrameOrientation=quat,
-                               physicsClientId=client)
-
-def get_visual_data(body, link=BASE_LINK):
-    # TODO: might require the viewer to be active
-    visual_data = [VisualShapeData(*tup) for tup in p.getVisualShapeData(body, physicsClientId=CLIENT)]
-    return list(filter(lambda d: d.linkIndex == link, visual_data))
-
-# object_unique_id and linkIndex seem to be noise
-CollisionShapeData = namedtuple('CollisionShapeData', ['object_unique_id', 'linkIndex',
-                                                       'geometry_type', 'dimensions', 'filename',
-                                                       'local_frame_pos', 'local_frame_orn'])
-
-def collision_shape_from_data(data, body, link, client=None):
-    client = get_client(client)
-    if (data.geometry_type == p.GEOM_MESH) and (data.filename == UNKNOWN_FILE):
-        return NULL_ID
-    pose = multiply(get_joint_inertial_pose(body, link), get_data_pose(data))
-    point, quat = pose
-    # TODO: the visual data seems affected by the collision data
-    return p.createCollisionShape(shapeType=data.geometry_type,
-                                  radius=get_data_radius(data),
-                                  # halfExtents=get_data_extents(data.geometry_type, data.dimensions),
-                                  halfExtents=np.array(get_data_extents(data)) / 2,
-                                  height=get_data_height(data),
-                                  fileName=data.filename.decode(encoding='UTF-8'),
-                                  meshScale=get_data_scale(data),
-                                  planeNormal=get_data_normal(data),
-                                  flags=p.GEOM_FORCE_CONCAVE_TRIMESH,
-                                  collisionFramePosition=point,
-                                  collisionFrameOrientation=quat,
-                                  physicsClientId=client)
-    #return p.createCollisionShapeArray()
-
-def clone_visual_shape(body, link, client=None):
-    client = get_client(client)
-    #if not has_gui(client):
-    #    return NULL_ID
-    visual_data = get_visual_data(body, link)
-    if not visual_data:
-        return NULL_ID
-    assert (len(visual_data) == 1)
-    return visual_shape_from_data(visual_data[0], client)
-
-def clone_collision_shape(body, link, client=None):
-    client = get_client(client)
-    collision_data = get_collision_data(body, link)
-    if not collision_data:
-        return NULL_ID
-    assert (len(collision_data) == 1)
-    # TODO: can do CollisionArray
-    return collision_shape_from_data(collision_data[0], body, link, client)
-
-def clone_body(body, links=None, collision=True, visual=True, client=None):
-    # TODO: names are not retained
-    # TODO: error with createMultiBody link poses on PR2
-    # localVisualFrame_position: position of local visual frame, relative to link/joint frame
-    # localVisualFrame orientation: orientation of local visual frame relative to link/joint frame
-    # parentFramePos: joint position in parent frame
-    # parentFrameOrn: joint orientation in parent frame
-    client = get_client(client) # client is the new client for the body
-    if links is None:
-        links = get_links(body)
-    #movable_joints = [joint for joint in links if is_movable(body, joint)]
-    new_from_original = {}
-    base_link = get_link_parent(body, links[0]) if links else BASE_LINK
-    new_from_original[base_link] = NULL_ID
-
-    masses = []
-    collision_shapes = []
-    visual_shapes = []
-    positions = [] # list of local link positions, with respect to parent
-    orientations = [] # list of local link orientations, w.r.t. parent
-    inertial_positions = [] # list of local inertial frame pos. in link frame
-    inertial_orientations = [] # list of local inertial frame orn. in link frame
-    parent_indices = []
-    joint_types = []
-    joint_axes = []
-    for i, link in enumerate(links):
-        new_from_original[link] = i
-        joint_info = get_joint_info(body, link)
-        dynamics_info = get_dynamics_info(body, link)
-        masses.append(dynamics_info.mass)
-        collision_shapes.append(clone_collision_shape(body, link, client) if collision else NULL_ID)
-        visual_shapes.append(clone_visual_shape(body, link, client) if visual else NULL_ID)
-        point, quat = get_local_link_pose(body, link)
-        positions.append(point)
-        orientations.append(quat)
-        inertial_positions.append(dynamics_info.local_inertial_pos)
-        inertial_orientations.append(dynamics_info.local_inertial_orn)
-        parent_indices.append(new_from_original[joint_info.parentIndex] + 1) # TODO: need the increment to work
-        joint_types.append(joint_info.jointType)
-        joint_axes.append(joint_info.jointAxis)
-    # https://github.com/bulletphysics/bullet3/blob/9c9ac6cba8118544808889664326fd6f06d9eeba/examples/pybullet/gym/pybullet_utils/urdfEditor.py#L169
-
-    base_dynamics_info = get_dynamics_info(body, base_link)
-    base_point, base_quat = get_link_pose(body, base_link)
-    new_body = p.createMultiBody(baseMass=base_dynamics_info.mass,
-                                 baseCollisionShapeIndex=clone_collision_shape(body, base_link, client) if collision else NULL_ID,
-                                 baseVisualShapeIndex=clone_visual_shape(body, base_link, client) if visual else NULL_ID,
-                                 basePosition=base_point,
-                                 baseOrientation=base_quat,
-                                 baseInertialFramePosition=base_dynamics_info.local_inertial_pos,
-                                 baseInertialFrameOrientation=base_dynamics_info.local_inertial_orn,
-                                 linkMasses=masses,
-                                 linkCollisionShapeIndices=collision_shapes,
-                                 linkVisualShapeIndices=visual_shapes,
-                                 linkPositions=positions,
-                                 linkOrientations=orientations,
-                                 linkInertialFramePositions=inertial_positions,
-                                 linkInertialFrameOrientations=inertial_orientations,
-                                 linkParentIndices=parent_indices,
-                                 linkJointTypes=joint_types,
-                                 linkJointAxis=joint_axes,
-                                 physicsClientId=client)
-    #set_configuration(new_body, get_joint_positions(body, movable_joints)) # Need to use correct client
-    for joint, value in zip(range(len(links)), get_joint_positions(body, links)):
-        # TODO: check if movable?
-        p.resetJointState(new_body, joint, value, targetVelocity=0, physicsClientId=client)
-    return new_body
-
-def clone_world(client=None, exclude=[]):
-    visual = has_gui(client)
-    mapping = {}
-    for body in get_bodies():
-        if body not in exclude:
-            new_body = clone_body(body, collision=True, visual=visual, client=client)
-            mapping[body] = new_body
-    return mapping
-
-#####################################
-
-def get_mesh_data(obj, link=BASE_LINK, shape_index=0, visual=True):
-    flags = 0 if visual else p.MESH_DATA_SIMULATION_MESH
-    #collisionShapeIndex = shape_index
-    return Mesh(*p.getMeshData(obj, linkIndex=link, flags=flags, physicsClientId=CLIENT))
-
-def get_collision_data(body, link=BASE_LINK):
-    # TODO: try catch
-    return [CollisionShapeData(*tup) for tup in p.getCollisionShapeData(body, link, physicsClientId=CLIENT)]
-
-def get_data_type(data):
-    return data.geometry_type if isinstance(data, CollisionShapeData) else data.visualGeometryType
-
-def get_data_filename(data):
-    return (data.filename if isinstance(data, CollisionShapeData)
-            else data.meshAssetFileName).decode(encoding='UTF-8')
-
-def get_data_pose(data):
-    if isinstance(data, CollisionShapeData):
-        return (data.local_frame_pos, data.local_frame_orn)
-    return (data.localVisualFrame_position, data.localVisualFrame_orientation)
-
-def get_default_geometry():
-    return {
-        'halfExtents': DEFAULT_EXTENTS,
-        'radius': DEFAULT_RADIUS,
-        'length': DEFAULT_HEIGHT, # 'height'
-        'fileName': DEFAULT_MESH,
-        'meshScale': DEFAULT_SCALE,
-        'planeNormal': DEFAULT_NORMAL,
-    }
-
-DEFAULT_MESH = ''
-
-DEFAULT_EXTENTS = [1, 1, 1]
-
-def get_data_extents(data):
-    """
-    depends on geometry type:
-    for GEOM_BOX: extents,
-    for GEOM_SPHERE dimensions[0] = radius,
-    for GEOM_CAPSULE and GEOM_CYLINDER, dimensions[0] = height (length), dimensions[1] = radius.
-    For GEOM_MESH, dimensions is the scaling factor.
-    :return:
-    """
-    geometry_type = get_data_type(data)
-    dimensions = data.dimensions
-    if geometry_type == p.GEOM_BOX:
-        return dimensions
-    return DEFAULT_EXTENTS
-
-DEFAULT_RADIUS = 0.5
-
-def get_data_radius(data):
-    geometry_type = get_data_type(data)
-    dimensions = data.dimensions
-    if geometry_type == p.GEOM_SPHERE:
-        return dimensions[0]
-    if geometry_type in (p.GEOM_CYLINDER, p.GEOM_CAPSULE):
-        return dimensions[1]
-    return DEFAULT_RADIUS
-
-DEFAULT_HEIGHT = 1
-
-def get_data_height(data):
-    geometry_type = get_data_type(data)
-    dimensions = data.dimensions
-    if geometry_type in (p.GEOM_CYLINDER, p.GEOM_CAPSULE):
-        return dimensions[0]
-    return DEFAULT_HEIGHT
-
-DEFAULT_SCALE = [1, 1, 1]
-
-def get_data_scale(data):
-    geometry_type = get_data_type(data)
-    dimensions = data.dimensions
-    if geometry_type == p.GEOM_MESH:
-        return dimensions
-    return DEFAULT_SCALE
-
-DEFAULT_NORMAL = [0, 0, 1]
-
-def get_data_normal(data):
-    geometry_type = get_data_type(data)
-    dimensions = data.dimensions
-    if geometry_type == p.GEOM_PLANE:
-        return dimensions
-    return DEFAULT_NORMAL
-
-def get_data_geometry(data):
-    geometry_type = get_data_type(data)
-    if geometry_type == p.GEOM_SPHERE:
-        parameters = [get_data_radius(data)]
-    elif geometry_type == p.GEOM_BOX:
-        parameters = [get_data_extents(data)]
-    elif geometry_type in (p.GEOM_CYLINDER, p.GEOM_CAPSULE):
-        parameters = [get_data_height(data), get_data_radius(data)]
-    elif geometry_type == p.GEOM_MESH:
-        parameters = [get_data_filename(data), get_data_scale(data)]
-    elif geometry_type == p.GEOM_PLANE:
-        parameters = [get_data_extents(data)]
-    else:
-        raise ValueError(geometry_type)
-    return SHAPE_TYPES[geometry_type], parameters
-
-def get_color(body, **kwargs):
-    # TODO: average over texture
-    visual_data = get_visual_data(body, **kwargs)
-    if not visual_data:
-        # TODO: no viewer implies no visual data
-        return None
-    return visual_data[0].rgbaColor
-
-def set_color(body, color, link=BASE_LINK, shape_index=NULL_ID):
-    """
-    Experimental for internal use, recommended ignore shapeIndex or leave it -1.
-    Intention was to let you pick a specific shape index to modify,
-    since URDF (and SDF etc) can have more than 1 visual shape per link.
-    This shapeIndex matches the list ordering returned by getVisualShapeData.
-    :param body:
-    :param color: RGBA
-    :param link:
-    :param shape_index:
-    :return:
-    """
-    # specularColor
-    if link is None:
-        return set_all_color(body, color)
-    return p.changeVisualShape(body, link, shapeIndex=shape_index, rgbaColor=color,
-                               #textureUniqueId=None, specularColor=None,
-                               physicsClientId=CLIENT)
-
-def set_all_color(body, color):
-    for link in get_all_links(body):
-        set_color(body, color, link)
-
-def set_texture(body, texture=None, link=BASE_LINK, shape_index=NULL_ID):
-    if texture is None:
-        texture = NULL_ID
-    return p.changeVisualShape(body, link, shapeIndex=shape_index, textureUniqueId=texture,
-                               physicsClientId=CLIENT)
-
-#####################################
-
-# Bounding box
-
-DEFAULT_AABB_BUFFER = 0.02
-
-AABB = namedtuple('AABB', ['lower', 'upper'])
-
-def aabb_from_points(points):
-    return AABB(np.min(points, axis=0), np.max(points, axis=0))
-
-def aabb_union(aabbs):
-    if not aabbs:
-        return None
-    return aabb_from_points(np.vstack([aabb for aabb in aabbs]))
-
-def aabb_overlap(aabb1, aabb2):
-    if (aabb1 is None) or (aabb2 is None):
-        return False
-    lower1, upper1 = aabb1
-    lower2, upper2 = aabb2
-    return np.less_equal(lower1, upper2).all() and \
-           np.less_equal(lower2, upper1).all()
-
-def aabb_empty(aabb):
-    lower, upper = aabb
-    return np.less(upper, lower).any()
-
-def is_aabb_degenerate(aabb):
-    return get_aabb_volume(aabb) <= 0.
-
-def aabb_intersection(*aabbs):
-    # https://github.mit.edu/caelan/lis-openrave/blob/master/manipulation/bodies/bounding_volumes.py
-    lower = np.max([lower for lower, _ in aabbs], axis=0)
-    upper = np.min([upper for _, upper in aabbs], axis=0)
-    aabb = AABB(lower, upper)
-    if aabb_empty(aabb):
-        return None
-    return aabb
-
-def get_subtree_aabb(body, root_link=BASE_LINK):
-    return aabb_union(get_aabb(body, link) for link in get_link_subtree(body, root_link))
-
-def get_aabbs(body, links=None, only_collision=True):
-    if links is None:
-        links = get_all_links(body)
-    if only_collision:
-        # TODO: return the null bounding box
-        links = [link for link in links if get_collision_data(body, link)]
-    return [get_aabb(body, link=link) for link in links]
-
-def get_aabb(body, link=None, **kwargs):
-    # Note that the query is conservative and may return additional objects that don't have actual AABB overlap.
-    # This happens because the acceleration structures have some heuristic that enlarges the AABBs a bit
-    # (extra margin and extruded along the velocity vector).
-    # Contact points with distance exceeding this threshold are not processed by the LCP solver.
-    # AABBs are extended by this number. Defaults to 0.02 in Bullet 2.x
-    #p.setPhysicsEngineParameter(contactBreakingThreshold=0.0, physicsClientId=CLIENT)
-    # Computes the AABB of the collision geometry
-    if link is None:
-        return aabb_union(get_aabbs(body, **kwargs))
-    return AABB(*p.getAABB(body, linkIndex=link, physicsClientId=CLIENT))
-
-get_lower_upper = get_aabb
-
-def get_aabb_center(aabb):
-    lower, upper = aabb
-    return (np.array(lower) + np.array(upper)) / 2.
-
-def get_aabb_extent(aabb):
-    lower, upper = aabb
-    return np.array(upper) - np.array(lower)
-
-def get_center_extent(body, **kwargs):
-    aabb = get_aabb(body, **kwargs)
-    return get_aabb_center(aabb), get_aabb_extent(aabb)
-
-def aabb2d_from_aabb(aabb):
-    (lower, upper) = aabb
-    return AABB(lower[:2], upper[:2])
-
-def aabb_contains_aabb(contained, container):
-    lower1, upper1 = contained
-    lower2, upper2 = container
-    return np.less_equal(lower2, lower1).all() and \
-           np.less_equal(upper1, upper2).all()
-    #return np.all(lower2 <= lower1) and np.all(upper1 <= upper2)
-
-def aabb_contains_point(point, container):
-    lower, upper = container
-    return np.less_equal(lower, point).all() and \
-           np.less_equal(point, upper).all()
-    #return np.all(lower <= point) and np.all(point <= upper)
-
-def sample_aabb(aabb):
-    lower, upper = aabb
-    return np.random.uniform(lower, upper)
-
-def get_bodies_in_region(aabb):
-    (lower, upper) = aabb
-    #step_simulation() # Like visibility, need to step first
-    bodies = p.getOverlappingObjects(lower, upper, physicsClientId=CLIENT)
-    return [] if bodies is None else sorted(bodies)
-
-def get_aabb_volume(aabb):
-    if aabb_empty(aabb):
-        return 0.
-    return np.prod(get_aabb_extent(aabb))
-
-def get_aabb_area(aabb):
-    return get_aabb_volume(aabb2d_from_aabb(aabb))
-
-def get_aabb_vertices(aabb):
-    d = len(aabb[0])
-    return [tuple(aabb[i[k]][k] for k in range(d))
-            for i in product(range(len(aabb)), repeat=d)]
-
-def get_aabb_edges(aabb):
-    d = len(aabb[0])
-    vertices = list(product(range(len(aabb)), repeat=d))
-    lines = []
-    for i1, i2 in combinations(vertices, 2):
-        if sum(i1[k] != i2[k] for k in range(d)) == 1:
-            p1 = [aabb[i1[k]][k] for k in range(d)]
-            p2 = [aabb[i2[k]][k] for k in range(d)]
-            lines.append((p1, p2))
-    return lines
-
-def aabb_from_extent_center(extent, center=None):
-    if center is None:
-        center = np.zeros(len(extent))
-    else:
-        center = np.array(center)
-    half_extent = np.array(extent) / 2.
-    lower = center - half_extent
-    upper = center + half_extent
-    return AABB(lower, upper)
-
-def scale_aabb(aabb, scale):
-    center = get_aabb_center(aabb)
-    extent = get_aabb_extent(aabb)
-    if np.isscalar(scale):
-        scale = scale * np.ones(len(extent))
-    new_extent = np.multiply(scale, extent)
-    return aabb_from_extent_center(new_extent, center)
-
-def buffer_aabb(aabb, buffer):
-    if aabb is None:
-        return aabb
-    extent = get_aabb_extent(aabb)
-    if np.isscalar(buffer):
-        if buffer == 0.:
-            return aabb
-        buffer = buffer * np.ones(len(extent))
-    new_extent = np.add(2*buffer, extent)
-    center = get_aabb_center(aabb)
-    return aabb_from_extent_center(new_extent, center)
-
-#####################################
-
-OOBB = namedtuple('OOBB', ['aabb', 'pose'])
-
-def oobb_from_points(points): # Not necessarily minimal volume
-    points = np.array(points).T
-    d = points.shape[0]
-    mu = np.resize(np.mean(points, axis=1), (d, 1))
-    centered = points - mu
-    u, _, _ = np.linalg.svd(centered)
-    if np.linalg.det(u) < 0:
-        u[:, 1] *= -1
-    # TODO: rotate such that z is up
-
-    aabb = aabb_from_points(np.dot(u.T, centered).T)
-    tform = np.identity(4)
-    tform[:d, :d] = u
-    tform[:d, 3] = mu.T
-    return OOBB(aabb, pose_from_tform(tform))
-
-def oobb_contains_point(point, container):
-    aabb, pose = container
-    return aabb_contains_point(tform_point(invert(pose), point), aabb)
-
-def tform_oobb(affine, oobb):
-    aabb, pose = oobb
-    return OOBB(aabb, multiply(affine, pose))
-
-def aabb_from_oobb(oobb):
-    aabb, pose = oobb
-    return aabb_from_points(tform_points(pose, get_aabb_vertices(aabb)))
-
-#####################################
-
-# AABB approximation
-
-def vertices_from_data(data):
-    geometry_type = get_data_type(data)
-    #if geometry_type == p.GEOM_SPHERE:
-    #    parameters = [get_data_radius(data)]
-    if geometry_type == p.GEOM_BOX:
-        extents = np.array(get_data_extents(data))
-        aabb = aabb_from_extent_center(extents)
-        vertices = get_aabb_vertices(aabb)
-    elif geometry_type in (p.GEOM_CYLINDER, p.GEOM_CAPSULE):
-        # TODO: p.URDF_USE_IMPLICIT_CYLINDER
-        radius, height = get_data_radius(data), get_data_height(data)
-        extents = np.array([2*radius, 2*radius, height])
-        aabb = aabb_from_extent_center(extents)
-        vertices = get_aabb_vertices(aabb)
-    elif geometry_type == p.GEOM_SPHERE:
-        radius = get_data_radius(data)
-        extents = 2*radius*np.ones(3)
-        aabb = aabb_from_extent_center(extents)
-        vertices = get_aabb_vertices(aabb)
-    elif geometry_type == p.GEOM_MESH:
-        filename, scale = get_data_filename(data), get_data_scale(data)
-        if filename == UNKNOWN_FILE:
-            raise RuntimeError(filename)
-        # _, ext = os.path.splitext(filename)
-        # if ext != '.obj':
-        #     raise RuntimeError(filename)
-        mesh = read_obj(filename, decompose=False)
-        vertices = [scale*np.array(vertex) for vertex in mesh.vertices]
-        # TODO: could compute AABB here for improved speed at the cost of being conservative
-    #elif geometry_type == p.GEOM_PLANE:
-    #   parameters = [get_data_extents(data)]
-    else:
-        raise NotImplementedError(geometry_type)
-    return vertices
-
-def oobb_from_data(data):
-    link_from_data = get_data_pose(data)
-    vertices_data = vertices_from_data(data)
-    return OOBB(aabb_from_points(vertices_data), link_from_data)
-
-def vertices_from_link(body, link=BASE_LINK, collision=True):
-    # TODO: get_mesh_data(body, link=link)
-    # In local frame
-    vertices = []
-    # PyBullet creates multiple collision elements (with unknown_file) when nonconvex
-    get_data = get_collision_data if collision else get_visual_data
-    for data in get_data(body, link):
-        # TODO: get_visual_data usually has a valid mesh file unlike get_collision_data
-        # TODO: apply the inertial frame
-        vertices.extend(apply_affine(get_data_pose(data), vertices_from_data(data)))
-    return vertices
-
-OBJ_MESH_CACHE = {}
-
-def vertices_from_rigid(body, link=BASE_LINK):
-    assert implies(link == BASE_LINK, get_num_links(body) == 0)
-    try:
-        vertices = vertices_from_link(body, link)
-    except RuntimeError:
-        info = get_model_info(body)
-        assert info is not None
-        _, ext = os.path.splitext(info.path)
-        if ext == '.obj':
-            if info.path not in OBJ_MESH_CACHE:
-                OBJ_MESH_CACHE[info.path] = read_obj(info.path, decompose=False)
-            mesh = OBJ_MESH_CACHE[info.path]
-            vertices = mesh.vertices
-        else:
-            raise NotImplementedError(ext)
-    return vertices
-
-def approximate_as_prism(body, body_pose=unit_pose(), **kwargs):
-    # TODO: make it just orientation
-    vertices = apply_affine(body_pose, vertices_from_rigid(body, **kwargs))
-    aabb = aabb_from_points(vertices)
-    return get_aabb_center(aabb), get_aabb_extent(aabb)
-    #with PoseSaver(body):
-    #    set_pose(body, body_pose)
-    #    set_velocity(body, linear=np.zeros(3), angular=np.zeros(3))
-    #    return get_center_extent(body, **kwargs)
-
-def approximate_as_cylinder(body, **kwargs):
-    center, (width, length, height) = approximate_as_prism(body, **kwargs)
-    diameter = (width + length) / 2  # TODO: check that these are close
-    return center, (diameter, height)
-
-#####################################
-
-# Collision
-
-MAX_DISTANCE = 0. # 0. | 1e-3
-
-CollisionPair = namedtuple('Collision', ['body', 'links'])
-
-def get_buffered_aabb(body, max_distance=MAX_DISTANCE, **kwargs):
-    body, links = parse_body(body, **kwargs)
-    return buffer_aabb(aabb_union(get_aabbs(body, links=links)), buffer=max_distance)
-
-def get_unbuffered_aabb(body, **kwargs):
-    return get_buffered_aabb(body, max_distance=-DEFAULT_AABB_BUFFER/2., **kwargs)
-
-def contact_collision():
-    step_simulation()
-    return len(p.getContactPoints(physicsClientId=CLIENT)) != 0
-
-ContactResult = namedtuple('ContactResult', ['contactFlag', 'bodyUniqueIdA', 'bodyUniqueIdB',
-                                             'linkIndexA', 'linkIndexB', 'positionOnA', 'positionOnB',
-                                             'contactNormalOnB', 'contactDistance', 'normalForce'])
-
-def flatten_links(body, links=None):
-    if links is None:
-        links = get_all_links(body)
-    return {CollisionPair(body, frozenset([link])) for link in links}
-
-def parse_body(body, link=None):
-    return body if isinstance(body, tuple) else CollisionPair(body, link)
-
-def expand_links(body, **kwargs):
-    body, links = parse_body(body, **kwargs)
-    if links is None:
-        links = get_all_links(body)
-    return CollisionPair(body, links)
-
-CollisionInfo = namedtuple('CollisionInfo',
-                           '''
-                           contactFlag
-                           bodyUniqueIdA
-                           bodyUniqueIdB
-                           linkIndexA
-                           linkIndexB
-                           positionOnA
-                           positionOnB
-                           contactNormalOnB
-                           contactDistance
-                           normalForce
-                           lateralFriction1
-                           lateralFrictionDir1
-                           lateralFriction2
-                           lateralFrictionDir2
-                           '''.split())
-
-def draw_collision_info(collision_info, **kwargs):
-    point1 = collision_info.positionOnA
-    point2 = collision_info.positionOnB
-    #point1 = point2 + np.array(collision_info.contactNormalOnB)*collision_info.contactDistance
-    handles = [add_line(point1, point2, **kwargs)]
-    for point in [point1, point2]:
-        handles.extend(draw_point(point, **kwargs))
-    return handles
-
-def get_closest_points(body1, body2, link1=None, link2=None, max_distance=MAX_DISTANCE, use_aabb=False):
-    if use_aabb and not aabb_overlap(get_buffered_aabb(body1, link1, max_distance=max_distance/2.),
-                                     get_buffered_aabb(body2, link2, max_distance=max_distance/2.)):
-        return []
-    if (link1 is None) and (link2 is None):
-        results = p.getClosestPoints(bodyA=body1, bodyB=body2, distance=max_distance, physicsClientId=CLIENT)
-    elif link2 is None:
-        results = p.getClosestPoints(bodyA=body1, bodyB=body2, linkIndexA=link1,
-                                     distance=max_distance, physicsClientId=CLIENT)
-    elif link1 is None:
-        results = p.getClosestPoints(bodyA=body1, bodyB=body2, linkIndexB=link2,
-                                     distance=max_distance, physicsClientId=CLIENT)
-    else:
-        results = p.getClosestPoints(bodyA=body1, bodyB=body2, linkIndexA=link1, linkIndexB=link2,
-                                     distance=max_distance, physicsClientId=CLIENT)
-    return [CollisionInfo(*info) for info in results]
-
-def pairwise_link_collision(body1, link1, body2, link2=BASE_LINK, **kwargs):
-    return len(get_closest_points(body1, body2, link1=link1, link2=link2, **kwargs)) != 0
-
-def any_link_pair_collision(body1, links1, body2, links2=None, **kwargs):
-    # TODO: this likely isn't needed anymore
-    if links1 is None:
-        links1 = get_all_links(body1)
-    if links2 is None:
-        links2 = get_all_links(body2)
-    for link1, link2 in product(links1, links2):
-        if (body1 == body2) and (link1 == link2):
-            continue
-        if pairwise_link_collision(body1, link1, body2, link2, **kwargs):
-            return True
-    return False
-
-link_pairs_collision = any_link_pair_collision
-
-def body_collision(body1, body2, **kwargs):
-    return len(get_closest_points(body1, body2, **kwargs)) != 0
-
-def pairwise_collision(body1, body2, **kwargs):
-    if isinstance(body1, tuple) or isinstance(body2, tuple):
-        body1, links1 = expand_links(body1)
-        body2, links2 = expand_links(body2)
-        return any_link_pair_collision(body1, links1, body2, links2, **kwargs)
-    return body_collision(body1, body2, **kwargs)
-
-def pairwise_collisions(body, obstacles, link=None, **kwargs):
-    return any(pairwise_collision(body1=body, body2=other, link1=link, **kwargs)
-               for other in obstacles if body != other)
-
-#def single_collision(body, max_distance=1e-3):
-#    return len(p.getClosestPoints(body, max_distance=max_distance)) != 0
-
-def single_collision(body, **kwargs):
-    return pairwise_collisions(body, get_bodies(), **kwargs)
-
-#####################################
-
-Ray = namedtuple('Ray', ['start', 'end'])
-
-def get_ray(ray):
-    start, end = ray
-    return np.array(end) - np.array(start)
-
-RayResult = namedtuple('RayResult', ['objectUniqueId', 'linkIndex',
-                                     'hit_fraction', 'hit_position', 'hit_normal']) # TODO: store Ray here
-
-def ray_collision(ray):
-    # TODO: be careful to disable gravity and set static masses for everything
-    step_simulation() # Needed for some reason
-    start, end = ray
-    result, = p.rayTest(start, end, physicsClientId=CLIENT)
-    # TODO: assign hit_position to be the end?
-    return RayResult(*result)
-
-def batch_ray_collision(rays, threads=1):
-    assert 1 <= threads <= p.MAX_RAY_INTERSECTION_BATCH_SIZE
-    if not rays:
-        return []
-    step_simulation() # Needed for some reason
-    ray_starts = [start for start, _ in rays]
-    ray_ends = [end for _, end in rays]
-    return [RayResult(*tup) for tup in p.rayTestBatch(
-        ray_starts, ray_ends,
-        numThreads=threads,
-        #parentObjectUniqueId=
-        #parentLinkIndex=
-        physicsClientId=CLIENT)]
-
-def get_ray_from_to(mouseX, mouseY, farPlane=10000):
-    # https://github.com/bulletphysics/bullet3/blob/afa4fb54505fd071103b8e2e8793c38fd40f6fb6/examples/pybullet/examples/pointCloudFromCameraImage.py
-    # https://github.com/bulletphysics/bullet3/blob/afa4fb54505fd071103b8e2e8793c38fd40f6fb6/examples/pybullet/examples/addPlanarReflection.py
-    width, height, _, _, _, camForward, horizon, vertical, _, _, dist, camTarget = p.getDebugVisualizerCamera()
-    rayFrom = camPos = np.array(camTarget) - dist * np.array(camForward)
-    rayForward = farPlane*get_unit_vector(np.array(camTarget) - rayFrom)
-    dHor = np.array(horizon) / float(width)
-    dVer = np.array(vertical) / float(height)
-    #rayToCenter = rayFrom + rayForward
-    rayTo = rayFrom + rayForward - 0.5*(np.array(horizon) - np.array(vertical)) + (mouseX*dHor - mouseY*dVer)
-    return Ray(rayFrom, rayTo)
-
-#####################################
-
-# Joint motion planning
-
-def uniform_generator(d):
-    while True:
-        yield np.random.uniform(size=d)
-
-def sample_norm(mu, sigma, lower=0., upper=INF):
-    # scipy.stats.truncnorm
-    assert lower <= upper
-    if lower == upper:
-        return lower
-    if sigma == 0.:
-        assert lower <= mu <= upper
-        return mu
-    while True:
-        x = random.gauss(mu=mu, sigma=sigma)
-        if lower <= x <= upper:
-            return x
-
-def halton_generator(d, seed=None):
-    import ghalton
-    if seed is None:
-        seed = random.randint(0, 1000)
-    #sequencer = ghalton.Halton(d)
-    sequencer = ghalton.GeneralizedHalton(d, seed)
-    #sequencer.reset()
-    while True:
-        [weights] = sequencer.get(1)
-        yield np.array(weights)
-
-def unit_generator(d, use_halton=False):
-    if use_halton:
-        try:
-            import ghalton
-        except ImportError:
-            print('ghalton is not installed (https://pypi.org/project/ghalton/)')
-            use_halton = False
-    return halton_generator(d) if use_halton else uniform_generator(d)
-
-def interval_generator(lower, upper, **kwargs):
-    assert len(lower) == len(upper)
-    assert np.less_equal(lower, upper).all()
-    if np.equal(lower, upper).all():
-        return iter([lower])
-    return (convex_combination(lower, upper, w=weights) for weights in unit_generator(d=len(lower), **kwargs))
-
-def get_sample_fn(body, joints, custom_limits={}, **kwargs):
-    lower_limits, upper_limits = get_custom_limits(body, joints, custom_limits, circular_limits=CIRCULAR_LIMITS)
-    generator = interval_generator(lower_limits, upper_limits, **kwargs)
-    def fn():
-        return tuple(next(generator))
-    return fn
-
-def get_halton_sample_fn(body, joints, **kwargs):
-    return get_sample_fn(body, joints, use_halton=True, **kwargs)
-
-def get_difference_fn(body, joints):
-    circular_joints = [is_circular(body, joint) for joint in joints]
-
-    def fn(q2, q1):
-        return tuple(circular_difference(value2, value1) if circular else (value2 - value1)
-                     for circular, value2, value1 in zip(circular_joints, q2, q1))
-    return fn
-
-def get_default_weights(body, joints, weights=None):
-    if weights is not None:
-        return weights
-    # TODO: derive from resolutions
-    # TODO: use the energy resulting from the mass matrix here?
-    return 1*np.ones(len(joints)) # TODO: use velocities here
-
-def get_distance_fn(body, joints, weights=None): #, norm=2):
-    weights = get_default_weights(body, joints, weights)
-    difference_fn = get_difference_fn(body, joints)
-    def fn(q1, q2):
-        diff = np.array(difference_fn(q2, q1))
-        return np.sqrt(np.dot(weights, diff * diff))
-        #return np.linalg.norm(np.multiply(weights * diff), ord=norm)
-    return fn
-
-def get_duration_fn(body, joints, velocities=None, norm=INF):
-    # TODO: integrate with get_distance_fn weights
-    # TODO: integrate with get_nonholonomic_distance_fn
-    if velocities is None:
-        velocities = np.array(get_max_velocities(body, joints))
-    difference_fn = get_difference_fn(body, joints)
-    def fn(q1, q2):
-        distances = np.array(difference_fn(q2, q1))
-        durations = np.divide(distances, np.abs(velocities))
-        return np.linalg.norm(durations, ord=norm)
-    return fn
-
-def get_refine_fn(body, joints, num_steps=0):
-    difference_fn = get_difference_fn(body, joints)
-    num_steps = num_steps + 1
-    def fn(q1, q2):
-        q = q1
-        for i in range(num_steps):
-            positions = (1. / (num_steps - i)) * np.array(difference_fn(q2, q)) + q
-            q = tuple(positions)
-            #q = tuple(wrap_positions(body, joints, positions))
-            yield q
-    return fn
-
-def refine_path(body, joints, waypoints, num_steps):
-    refine_fn = get_refine_fn(body, joints, num_steps)
-    refined_path = []
-    for v1, v2 in get_pairs(waypoints):
-        refined_path.extend(refine_fn(v1, v2))
-    return refined_path
-
-DEFAULT_RESOLUTION = math.radians(3) # 0.05
-
-def get_default_resolutions(body, joints, resolutions=None):
-    if resolutions is not None:
-        return resolutions
-    return DEFAULT_RESOLUTION*np.ones(len(joints))
-
-def get_extend_fn(body, joints, resolutions=None, norm=2):
-    # norm = 1, 2, INF
-    resolutions = get_default_resolutions(body, joints, resolutions)
-    difference_fn = get_difference_fn(body, joints)
-    def fn(q1, q2):
-        #steps = int(np.max(np.abs(np.divide(difference_fn(q2, q1), resolutions))))
-        steps = int(np.linalg.norm(np.divide(difference_fn(q2, q1), resolutions), ord=norm))
-        refine_fn = get_refine_fn(body, joints, num_steps=steps)
-        return refine_fn(q1, q2)
-    return fn
-
-def remove_redundant(path, tolerance=1e-3):
-    assert path
-    new_path = [path[0]]
-    for conf in path[1:]:
-        difference = np.array(new_path[-1]) - np.array(conf)
-        if not np.allclose(np.zeros(len(difference)), difference, atol=tolerance, rtol=0):
-            new_path.append(conf)
-    return new_path
-
-def waypoints_from_path(path, tolerance=1e-3):
-    path = remove_redundant(path, tolerance=tolerance)
-    if len(path) < 2:
-        return path
-    difference_fn = lambda q2, q1: np.array(q2) - np.array(q1)
-    #difference_fn = get_difference_fn(body, joints) # TODO: account for wrap around or use adjust_path
-
-    waypoints = [path[0]]
-    last_conf = path[1]
-    last_difference = get_unit_vector(difference_fn(last_conf, waypoints[-1]))
-    for conf in path[2:]:
-        difference = get_unit_vector(difference_fn(conf, waypoints[-1]))
-        if not np.allclose(last_difference, difference, atol=tolerance, rtol=0):
-            waypoints.append(last_conf)
-            difference = get_unit_vector(difference_fn(conf, waypoints[-1]))
-        last_conf = conf
-        last_difference = difference
-    waypoints.append(last_conf)
-    return waypoints
-
-def adjust_path(robot, joints, path):
-    difference_fn = get_difference_fn(robot, joints)
-    differences = [difference_fn(q2, q1) for q1, q2 in get_pairs(path)]
-    adjusted_path = [np.array(get_joint_positions(robot, joints))] # Assumed the same as path[0] mod rotation
-    for difference in differences:
-        if not np.array_equal(difference, np.zeros(len(joints))):
-            adjusted_path.append(adjusted_path[-1] + difference)
-    return adjusted_path
-
-def get_moving_links(body, joints):
-    moving_links = set()
-    for joint in joints:
-        link = child_link_from_joint(joint)
-        if link not in moving_links:
-            moving_links.update(get_link_subtree(body, link))
-    return list(moving_links)
-
-def get_moving_pairs(body, moving_joints):
-    """
-    Check all fixed and moving pairs
-    Do not check all fixed and fixed pairs
-    Check all moving pairs with a common
-    """
-    moving_links = get_moving_links(body, moving_joints)
-    for link1, link2 in combinations(moving_links, 2):
-        ancestors1 = set(get_joint_ancestors(body, link1)) & set(moving_joints)
-        ancestors2 = set(get_joint_ancestors(body, link2)) & set(moving_joints)
-        if ancestors1 != ancestors2:
-            yield link1, link2
-
-def get_self_link_pairs(body, joints, disabled_collisions=set(), only_moving=True):
-    moving_links = get_moving_links(body, joints)
-    fixed_links = list(set(get_links(body)) - set(moving_links))
-    check_link_pairs = list(product(moving_links, fixed_links))
-    if only_moving:
-        check_link_pairs.extend(get_moving_pairs(body, joints))
-    else:
-        check_link_pairs.extend(combinations(moving_links, 2))
-    check_link_pairs = list(filter(lambda pair: not are_links_adjacent(body, *pair), check_link_pairs))
-    check_link_pairs = list(filter(lambda pair: (pair not in disabled_collisions) and
-                                                (pair[::-1] not in disabled_collisions), check_link_pairs))
-    return check_link_pairs
-
-def get_collision_fn(body, joints, obstacles, attachments, self_collisions, disabled_collisions,
-                     custom_limits={}, use_aabb=False, cache=False, max_distance=MAX_DISTANCE, **kwargs):
-    # TODO: convert most of these to keyword arguments
-    check_link_pairs = get_self_link_pairs(body, joints, disabled_collisions) if self_collisions else []
-    moving_links = frozenset(get_moving_links(body, joints))
-    attached_bodies = [attachment.child for attachment in attachments]
-    moving_bodies = [CollisionPair(body, moving_links)] + list(map(parse_body, attached_bodies))
-    #moving_bodies = list(flatten(flatten_links(*pair) for pair in moving_bodies)) # Introduces overhead
-    #moving_bodies = [body] + [attachment.child for attachment in attachments]
-    lower_limits, upper_limits = get_custom_limits(body, joints, custom_limits)
-    get_obstacle_aabb = cached_fn(get_buffered_aabb, cache=cache, max_distance=max_distance/2., **kwargs)
-    # TODO: sort bodies by bounding box size
-
-    def collision_fn(q, verbose=False):
-        if not all_between(lower_limits, q, upper_limits):
-            #print('Joint limits violated')
-            if verbose: print(lower_limits, q, upper_limits)
-            return True
-        set_joint_positions(body, joints, q)
-        for attachment in attachments:
-            attachment.assign()
-        #wait_for_duration(1e-2)
-        get_moving_aabb = cached_fn(get_buffered_aabb, cache=True, max_distance=max_distance/2., **kwargs)
-
-        for link1, link2 in check_link_pairs:
-            # Self-collisions should not have the max_distance parameter
-            # TODO: self-collisions between body and attached_bodies (except for the link adjacent to the robot)
-            if (not use_aabb or aabb_overlap(get_moving_aabb(body), get_moving_aabb(body))) and \
-                    pairwise_link_collision(body, link1, body, link2): #, **kwargs):
-                #print(get_body_name(body), get_link_name(body, link1), get_link_name(body, link2))
-                if verbose: print(body, link1, body, link2)
-                return True
-        #step_simulation()
-        # for body1 in moving_bodies:
-        #     for body2, _ in get_bodies_in_region(get_moving_aabb(body1)):
-        #         if (body2 in obstacles) and pairwise_collision(body1, body2, **kwargs):
-        #             #print(get_body_name(body1), get_body_name(body2))
-        #             if verbose: print(body1, body2)
-        #             return True
-        for body1, body2 in product(moving_bodies, obstacles):
-            if (not use_aabb or aabb_overlap(get_moving_aabb(body1), get_obstacle_aabb(body2))) \
-                    and pairwise_collision(body1, body2, **kwargs):
-                #print(get_body_name(body1), get_body_name(body2))
-                if verbose: print(body1, body2)
-                return True
-        return False
-    return collision_fn
-
-def interpolate_joint_waypoints(body, joints, waypoints, resolutions=None,
-                                collision_fn=lambda *args, **kwargs: False, **kwargs):
-    # TODO: unify with refine_path
-    extend_fn = get_extend_fn(body, joints, resolutions=resolutions, **kwargs)
-    path = waypoints[:1]
-    for waypoint in waypoints[1:]:
-        assert len(joints) == len(waypoint)
-        for q in list(extend_fn(path[-1], waypoint)):
-            if collision_fn(q):
-                return None
-            path.append(q) # TODO: could instead yield
-    return path
-
-def plan_waypoints_joint_motion(body, joints, waypoints, start_conf=None, obstacles=[], attachments=[],
-                                self_collisions=True, disabled_collisions=set(),
-                                resolutions=None, custom_limits={}, max_distance=MAX_DISTANCE,
-                                use_aabb=False, cache=True):
-    if start_conf is None:
-        start_conf = get_joint_positions(body, joints)
-    assert len(start_conf) == len(joints)
-    collision_fn = get_collision_fn(body, joints, obstacles, attachments, self_collisions, disabled_collisions,
-                                    custom_limits=custom_limits, max_distance=max_distance,
-                                    use_aabb=use_aabb, cache=cache)
-    waypoints = [start_conf] + list(waypoints)
-    for i, waypoint in enumerate(waypoints):
-        if collision_fn(waypoint):
-            #print('Warning: waypoint configuration {}/{} is in collision'.format(i, len(waypoints)))
-            return None
-    return interpolate_joint_waypoints(body, joints, waypoints, resolutions=resolutions, collision_fn=collision_fn)
-
-def plan_direct_joint_motion(body, joints, end_conf, **kwargs):
-    return plan_waypoints_joint_motion(body, joints, [end_conf], **kwargs)
-
-def check_initial_end(start_conf, end_conf, collision_fn, verbose=True):
-    # TODO: collision_fn might not accept kwargs
-    if collision_fn(start_conf, verbose=verbose):
-        print('Warning: initial configuration is in collision')
-        return False
-    if collision_fn(end_conf, verbose=verbose):
-        print('Warning: end configuration is in collision')
-        return False
-    return True
-
-def plan_joint_motion(body, joints, end_conf, obstacles=[], attachments=[],
-                      self_collisions=True, disabled_collisions=set(),
-                      weights=None, resolutions=None, max_distance=MAX_DISTANCE,
-                      use_aabb=False, cache=True, custom_limits={}, **kwargs):
-
-    assert len(joints) == len(end_conf)
-    if (weights is None) and (resolutions is not None):
-        weights = np.reciprocal(resolutions)
-    sample_fn = get_sample_fn(body, joints, custom_limits=custom_limits)
-    distance_fn = get_distance_fn(body, joints, weights=weights)
-    extend_fn = get_extend_fn(body, joints, resolutions=resolutions)
-    collision_fn = get_collision_fn(body, joints, obstacles, attachments, self_collisions, disabled_collisions,
-                                    custom_limits=custom_limits, max_distance=max_distance,
-                                    use_aabb=use_aabb, cache=cache)
-
-    start_conf = get_joint_positions(body, joints)
-
-    if not check_initial_end(start_conf, end_conf, collision_fn):
-        return None
-    return birrt(start_conf, end_conf, distance_fn, sample_fn, extend_fn, collision_fn, **kwargs)
-    #return plan_lazy_prm(start_conf, end_conf, sample_fn, extend_fn, collision_fn)
-
-plan_holonomic_motion = plan_joint_motion
-
-def plan_lazy_prm(start_conf, end_conf, sample_fn, extend_fn, collision_fn, **kwargs):
-    # TODO: cost metric based on total robot movement (encouraging greater distances possibly)
-    from motion_planners.lazy_prm import lazy_prm
-    path, samples, edges, colliding_vertices, colliding_edges = lazy_prm(
-        start_conf, end_conf, sample_fn, extend_fn, collision_fn, num_samples=200, **kwargs)
-    if path is None:
-        return path
-
-    #lower, upper = get_custom_limits(body, joints, circular_limits=CIRCULAR_LIMITS)
-    def draw_fn(q): # TODO: draw edges instead of vertices
-        return np.append(q[:2], [1e-3])
-        #return np.array([1, 1, 0.25])*(q + np.array([0., 0., np.pi]))
-    handles = []
-    for q1, q2 in get_pairs(path):
-        handles.append(add_line(draw_fn(q1), draw_fn(q2), color=GREEN))
-    for i1, i2 in edges:
-        color = BLUE
-        if any(colliding_vertices.get(i, False) for i in (i1, i2)) or colliding_vertices.get((i1, i2), False):
-            color = RED
-        elif not colliding_vertices.get((i1, i2), True):
-            color = BLACK
-        handles.append(add_line(draw_fn(samples[i1]), draw_fn(samples[i2]), color=color))
-    wait_if_gui()
-    return path
-
-#####################################
-
-def get_closest_angle_fn(body, joints, weights=None, reversible=True, linear_tol=0., **kwargs):
-    assert len(joints) == 3
-    weights = get_default_weights(body, joints, weights)
-    linear_distance_fn = get_distance_fn(body, joints[:2], weights=weights[:2])
-    angular_distance_fn = get_distance_fn(body, joints[2:], weights=weights[2:])
-
-    def closest_fn(q1, q2):
-        linear_distance = linear_distance_fn(q1[:2], q2[:2])
-        if linear_distance < linear_tol:
-            angle = None
-            angular_distance = angular_distance_fn(q1[2:], q2[2:])
-            return angle, angular_distance
-
-        angle_and_distance = []
-        for direction in [0, PI] if reversible else [0]: # TODO: previously was [PI]
-            angle = get_angle(q1[:2], q2[:2]) + direction
-            distance = angular_distance_fn(q1[2:], [angle]) \
-                       + linear_distance \
-                       + angular_distance_fn([angle], q2[2:])
-            angle_and_distance.append((angle, distance))
-        return min(angle_and_distance, key=lambda pair: pair[1])
-    return closest_fn
-
-def get_nonholonomic_distance_fn(body, joints, **kwargs):
-    closest_angle_fn = get_closest_angle_fn(body, joints, **kwargs)
-    #distance_fn = get_distance_fn(body, joints, **kwargs) # TODO: close enough threshold
-
-    def distance_fn(q1, q2):
-        _, distance = closest_angle_fn(q1, q2)
-        return distance
-    return distance_fn
-
-def get_nonholonomic_extend_fn(body, joints, resolutions=None, angular_tol=0., **kwargs):
-    assert len(joints) == 3
-    resolutions = get_default_resolutions(body, joints, resolutions)
-    linear_extend_fn = get_extend_fn(body, joints[:2], resolutions[:2])
-    angular_extend_fn = get_extend_fn(body, joints[2:], resolutions[2:])
-    closest_angle_fn = get_closest_angle_fn(body, joints, **kwargs)
-
-    def extend_fn(q1, q2):
-        angle, _ = closest_angle_fn(q1, q2)
-        if angle is None:
-            return [np.append(q1[:2], aq) for aq in angular_extend_fn(q1[2:], q2[2:])] # TODO: average?
-        path = []
-        if abs(circular_difference(angle, q1[2])) >= angular_tol:
-            path.extend(np.append(q1[:2], aq) for aq in angular_extend_fn(q1[2:], [angle]))
-        path.extend(np.append(lq, [angle]) for lq in linear_extend_fn(q1[:2], q2[:2]))
-        if abs(circular_difference(q2[2], angle)) >= angular_tol:
-            path.extend(np.append(q2[:2], aq) for aq in angular_extend_fn([angle], q2[2:]))
-        return path
-    return extend_fn
-
-def plan_nonholonomic_motion(body, joints, end_conf, obstacles=[], attachments=[],
-                             self_collisions=True, disabled_collisions=set(),
-                             weights=None, resolutions=None, reversible=True,
-                             linear_tol=EPSILON, angular_tol=0.,
-                             max_distance=MAX_DISTANCE, use_aabb=False, cache=True, custom_limits={}, **kwargs):
-
-    assert len(joints) == len(end_conf)
-    sample_fn = get_sample_fn(body, joints, custom_limits=custom_limits)
-    distance_fn = get_nonholonomic_distance_fn(body, joints, weights=weights, reversible=reversible,
-                                               linear_tol=linear_tol) #, angular_tol=angular_tol)
-    extend_fn = get_nonholonomic_extend_fn(body, joints, resolutions=resolutions, reversible=reversible,
-                                           linear_tol=linear_tol, angular_tol=angular_tol)
-    collision_fn = get_collision_fn(body, joints, obstacles, attachments,
-                                    self_collisions, disabled_collisions,
-                                    custom_limits=custom_limits, max_distance=max_distance,
-                                    use_aabb=use_aabb, cache=cache)
-
-    start_conf = get_joint_positions(body, joints)
-    if not check_initial_end(start_conf, end_conf, collision_fn):
-        return None
-    return birrt(start_conf, end_conf, distance_fn, sample_fn, extend_fn, collision_fn, **kwargs)
-
-plan_differential_motion = plan_nonholonomic_motion
-
-#####################################
-
-# SE(2) pose motion planning
-
-def get_base_difference_fn():
-    def fn(q2, q1):
-        dx, dy = np.array(q2[:2]) - np.array(q1[:2])
-        dtheta = circular_difference(q2[2], q1[2])
-        return (dx, dy, dtheta)
-    return fn
-
-def get_base_distance_fn(weights=1*np.ones(3)):
-    difference_fn = get_base_difference_fn()
-    def fn(q1, q2):
-        difference = np.array(difference_fn(q2, q1))
-        return np.sqrt(np.dot(weights, difference * difference))
-    return fn
-
-def plan_base_motion(body, end_conf, base_limits, obstacles=[], direct=False,
-                     weights=1*np.ones(3), resolutions=0.05*np.ones(3),
-                     max_distance=MAX_DISTANCE, **kwargs):
-    def sample_fn():
-        x, y = np.random.uniform(*base_limits)
-        theta = np.random.uniform(*CIRCULAR_LIMITS)
-        return (x, y, theta)
-
-
-    difference_fn = get_base_difference_fn()
-    distance_fn = get_base_distance_fn(weights=weights)
-
-    def extend_fn(q1, q2):
-        steps = np.abs(np.divide(difference_fn(q2, q1), resolutions))
-        n = int(np.max(steps)) + 1
-        q = q1
-        for i in range(n):
-            q = tuple((1. / (n - i)) * np.array(difference_fn(q2, q)) + q)
-            yield q
-            # TODO: should wrap these joints
-
-    def collision_fn(q):
-        # TODO: update this function
-        set_base_values(body, q)
-        return any(pairwise_collision(body, obs, max_distance=max_distance) for obs in obstacles)
-
-    start_conf = get_base_values(body)
-    if not check_initial_end(start_conf, end_conf, collision_fn):
-        return None
-    if direct:
-        return direct_path(start_conf, end_conf, extend_fn, collision_fn)
-    return birrt(start_conf, end_conf, distance_fn,
-                 sample_fn, extend_fn, collision_fn, **kwargs)
-
-#####################################
-
-# Placements
-
-# TODO: extend these to oobbs
-
-def stable_z_on_aabb(body, aabb):
-    center, extent = get_center_extent(body)
-    _, upper = aabb
-    return (upper + extent/2 + (get_point(body) - center))[2]
-
-def stable_z(body, surface, surface_link=None):
-    return stable_z_on_aabb(body, get_aabb(surface, link=surface_link))
-
-def is_placed_on_aabb(body, bottom_aabb, above_epsilon=1e-2, below_epsilon=0.0):
-    assert (0 <= above_epsilon) and (0 <= below_epsilon)
-    top_aabb = get_aabb(body) # TODO: approximate_as_prism
-    top_z_min = top_aabb[0][2]
-    bottom_z_max = bottom_aabb[1][2]
-    return ((bottom_z_max - below_epsilon) <= top_z_min <= (bottom_z_max + above_epsilon)) and \
-           (aabb_contains_aabb(aabb2d_from_aabb(top_aabb), aabb2d_from_aabb(bottom_aabb)))
-
-def is_placement(body, surface, **kwargs):
-    return is_placed_on_aabb(body, get_aabb(surface), **kwargs)
-
-def is_center_on_aabb(body, bottom_aabb, above_epsilon=1e-2, below_epsilon=0.0):
-    # TODO: compute AABB in origin
-    # TODO: use center of mass?
-    assert (0 <= above_epsilon) and (0 <= below_epsilon)
-    center, extent = get_center_extent(body) # TODO: approximate_as_prism
-    base_center = center - np.array([0, 0, extent[2]])/2
-    top_z_min = base_center[2]
-    bottom_z_max = bottom_aabb[1][2]
-    return ((bottom_z_max - abs(below_epsilon)) <= top_z_min <= (bottom_z_max + abs(above_epsilon))) and \
-           (aabb_contains_point(base_center[:2], aabb2d_from_aabb(bottom_aabb)))
-
-def is_center_stable(body, surface, **kwargs):
-    return is_center_on_aabb(body, get_aabb(surface), **kwargs)
-
-def sample_placement_on_aabb(top_body, bottom_aabb, top_pose=unit_pose(),
-                             percent=0.8, max_attempts=50, epsilon=1e-3):
-    # TODO: transform into the coordinate system of the bottom
-    # TODO: maybe I should instead just require that already in correct frame
-    for _ in range(max_attempts):
-        theta = np.random.uniform(*CIRCULAR_LIMITS)
-        rotation = Euler(yaw=theta)
-        set_pose(top_body, multiply(Pose(euler=rotation), top_pose))
-        center, extent = get_center_extent(top_body)
-        lower = (np.array(bottom_aabb[0]) + percent*extent/2)[:2] # TODO: scale_aabb
-        upper = (np.array(bottom_aabb[1]) - percent*extent/2)[:2]
-        aabb = AABB(lower, upper)
-        if aabb_empty(aabb):
-            continue
-        x, y = sample_aabb(aabb)
-        z = (bottom_aabb[1] + extent/2.)[2] + epsilon
-        point = np.array([x, y, z]) + (get_point(top_body) - center)
-        pose = multiply(Pose(point, rotation), top_pose)
-        set_pose(top_body, pose)
-        return pose
-    return None
-
-def sample_placement(top_body, bottom_body, bottom_link=None, **kwargs):
-    bottom_aabb = get_aabb(bottom_body, link=bottom_link)
-    return sample_placement_on_aabb(top_body, bottom_aabb, **kwargs)
-
-#####################################
-
-# Reachability
-
-def sample_reachable_base(robot, point, reachable_range=(0.25, 1.0)):
-    radius = np.random.uniform(*reachable_range)
-    x, y = radius*unit_from_theta(np.random.uniform(-np.pi, np.pi)) + point[:2]
-    yaw = np.random.uniform(*CIRCULAR_LIMITS)
-    base_values = (x, y, yaw)
-    #set_base_values(robot, base_values)
-    return base_values
-
-def uniform_pose_generator(robot, gripper_pose, **kwargs):
-    point = point_from_pose(gripper_pose)
-    while True:
-        base_values = sample_reachable_base(robot, point, **kwargs)
-        if base_values is None:
-            break
-        yield base_values
-        #set_base_values(robot, base_values)
-        #yield get_pose(robot)
-
-def custom_limits_from_base_limits(robot, base_limits, yaw_limit=None):
-    # TODO: unify with SS-Replan
-    x_limits, y_limits = zip(*base_limits)
-    custom_limits = {
-        joint_from_name(robot, 'x'): x_limits,
-        joint_from_name(robot, 'y'): y_limits,
-    }
-    if yaw_limit is not None:
-        custom_limits.update({
-            joint_from_name(robot, 'theta'): yaw_limit,
-        })
-    return custom_limits
-
-#####################################
-
-# Constraints - applies forces when not satisfied
-
-def get_constraints():
-    """
-    getConstraintUniqueId will take a serial index in range 0..getNumConstraints,  and reports the constraint unique id.
-    Note that the constraint unique ids may not be contiguous, since you may remove constraints.
-    """
-    return [p.getConstraintUniqueId(i, physicsClientId=CLIENT)
-            for i in range(p.getNumConstraints(physicsClientId=CLIENT))]
-
-def remove_constraint(constraint):
-    p.removeConstraint(constraint, physicsClientId=CLIENT)
-
-ConstraintInfo = namedtuple('ConstraintInfo', ['parentBodyUniqueId', 'parentJointIndex',
-                                               'childBodyUniqueId', 'childLinkIndex', 'constraintType',
-                                               'jointAxis', 'jointPivotInParent', 'jointPivotInChild',
-                                               'jointFrameOrientationParent', 'jointFrameOrientationChild', 'maxAppliedForce'])
-
-def get_constraint_info(constraint): # getConstraintState
-    # TODO: four additional arguments
-    return ConstraintInfo(*p.getConstraintInfo(constraint, physicsClientId=CLIENT)[:11])
-
-def get_fixed_constraints():
-    fixed_constraints = []
-    for constraint in get_constraints():
-        constraint_info = get_constraint_info(constraint)
-        if constraint_info.constraintType == p.JOINT_FIXED:
-            fixed_constraints.append(constraint)
-    return fixed_constraints
-
-def add_pose_constraint(body, pose=None, max_force=None):
-    link = BASE_LINK
-    if pose is None:
-        pose = get_pose(body)
-    position, quat = pose
-    constraint = p.createConstraint(body, link, -1, -1,
-                                    jointType=p.JOINT_FIXED,
-                                    jointAxis=[0, 0, 0],
-                                    parentFramePosition=unit_point(),
-                                    childFramePosition=position,
-                                    parentFrameOrientation=unit_quat(),
-                                    childFrameOrientation=quat,
-                                    physicsClientId=CLIENT)
-    if max_force is not None:
-        p.changeConstraint(constraint, maxForce=max_force, physicsClientId=CLIENT)
-    return constraint
-
-def add_fixed_constraint(body, robot, robot_link=BASE_LINK, max_force=None):
-    body_link = BASE_LINK
-    body_pose = get_pose(body)
-    #body_pose = get_com_pose(body, link=body_link)
-    #end_effector_pose = get_link_pose(robot, robot_link)
-    end_effector_pose = get_com_pose(robot, robot_link)
-    grasp_pose = multiply(invert(end_effector_pose), body_pose)
-    point, quat = grasp_pose
-    # TODO: can I do this when I'm not adjacent?
-    # joint axis in local frame (ignored for JOINT_FIXED)
-    #return p.createConstraint(robot, robot_link, body, body_link,
-    #                          p.JOINT_FIXED, jointAxis=unit_point(),
-    #                          parentFramePosition=unit_point(),
-    #                          childFramePosition=point,
-    #                          parentFrameOrientation=unit_quat(),
-    #                          childFrameOrientation=quat)
-    constraint = p.createConstraint(robot, robot_link, body, body_link,  # Both seem to work
-                                    p.JOINT_FIXED, jointAxis=unit_point(),
-                                    parentFramePosition=point,
-                                    childFramePosition=unit_point(),
-                                    parentFrameOrientation=quat,
-                                    childFrameOrientation=unit_quat(),
-                                    physicsClientId=CLIENT)
-    if max_force is not None:
-        p.changeConstraint(constraint, maxForce=max_force, physicsClientId=CLIENT)
-    return constraint
-
-def remove_fixed_constraint(body, robot, robot_link):
-    for constraint in get_fixed_constraints():
-        constraint_info = get_constraint_info(constraint)
-        if (body == constraint_info.childBodyUniqueId) and \
-                (BASE_LINK == constraint_info.childLinkIndex) and \
-                (robot == constraint_info.parentBodyUniqueId) and \
-                (robot_link == constraint_info.parentJointIndex):
-            remove_constraint(constraint)
-
-#####################################
-
-# Grasps
-
-GraspInfo = namedtuple('GraspInfo', ['get_grasps', 'approach_pose'])
-
-class Attachment(object):
-    def __init__(self, parent, parent_link, grasp_pose, child):
-        self.parent = parent # TODO: support no parent
-        self.parent_link = parent_link
-        self.grasp_pose = grasp_pose
-        self.child = child
-        #self.child_link = child_link # child_link=BASE_LINK
-    @property
-    def bodies(self):
-        return flatten_links(self.child) | flatten_links(self.parent, get_link_subtree(
-            self.parent, self.parent_link))
-    def assign(self):
-        parent_link_pose = get_link_pose(self.parent, self.parent_link)
-        child_pose = body_from_end_effector(parent_link_pose, self.grasp_pose)
-        set_pose(self.child, child_pose)
-        return child_pose
-    def apply_mapping(self, mapping):
-        self.parent = mapping.get(self.parent, self.parent)
-        self.child = mapping.get(self.child, self.child)
-    def __repr__(self):
-        return '{}({},{})'.format(self.__class__.__name__, self.parent, self.child)
-
-def create_attachment(parent, parent_link, child):
-    parent_link_pose = get_link_pose(parent, parent_link)
-    child_pose = get_pose(child)
-    grasp_pose = multiply(invert(parent_link_pose), child_pose)
-    return Attachment(parent, parent_link, grasp_pose, child)
-
-def body_from_end_effector(end_effector_pose, grasp_pose):
-    """
-    world_from_parent * parent_from_child = world_from_child
-    """
-    return multiply(end_effector_pose, grasp_pose)
-
-def end_effector_from_body(body_pose, grasp_pose):
-    """
-    grasp_pose: the body's pose in gripper's frame
-
-    world_from_child * (parent_from_child)^(-1) = world_from_parent
-    (parent: gripper, child: body to be grasped)
-
-    Pose_{world,gripper} = Pose_{world,block}*Pose_{block,gripper}
-                         = Pose_{world,block}*(Pose_{gripper,block})^{-1}
-    """
-    return multiply(body_pose, invert(grasp_pose))
-
-def approach_from_grasp(approach_pose, end_effector_pose):
-    return multiply(approach_pose, end_effector_pose)
-
-def get_grasp_pose(constraint):
-    """
-    Grasps are parent_from_child
-    """
-    constraint_info = get_constraint_info(constraint)
-    assert(constraint_info.constraintType == p.JOINT_FIXED)
-    joint_from_parent = (constraint_info.jointPivotInParent, constraint_info.jointFrameOrientationParent)
-    joint_from_child = (constraint_info.jointPivotInChild, constraint_info.jointFrameOrientationChild)
-    return multiply(invert(joint_from_parent), joint_from_child)
-
-#####################################
-
-# Control
-
-def control_joint(body, joint, position=None, velocity=0., position_gain=None, velocity_scale=None, max_force=None):
-    if position is None:
-        position = get_joint_position(body, joint)
-    kwargs = {}
-    if position_gain is not None:
-        velocity_gain = 0.1*position_gain
-        kwargs.update({
-            'positionGain': position_gain,
-            'velocityGain': velocity_gain,
-        })
-    if velocity_scale is not None:
-        max_velocity = velocity_scale*get_max_velocity(body, joint)
-        kwargs.update({
-            'maxVelocity': max_velocity,
-        })
-    if max_force is not None:
-        #max_force = get_max_force(body, joint)
-        kwargs.update({
-            'force': max_force,
-        })
-    return p.setJointMotorControl2(bodyIndex=body, # bodyUniqueId
-                                   jointIndex=joint,
-                                   controlMode=p.POSITION_CONTROL,
-                                   targetPosition=position,
-                                   targetVelocity=velocity,
-                                   physicsClientId=CLIENT, **kwargs)
-
-def control_joints(body, joints, positions=None, velocities=None, position_gain=None, velocity_scale=None, max_force=None):
-    if positions is None:
-        positions = get_joint_positions(body, joints)
-    if velocities is None:
-        velocities = [0.0] * len(joints)
-
-    if velocity_scale is not None:
-        for i, joint in enumerate(joints):
-            control_joint(body, joint, position=positions[i], velocity=velocities[i],
-                          position_gain=position_gain, velocity_scale=velocity_scale, max_force=max_force)
-        return None
-
-    kwargs = {}
-    if position_gain is not None:
-        velocity_gain = 0.1*position_gain
-        kwargs.update({
-            'positionGains': [position_gain] * len(joints),
-            'velocityGains': [velocity_gain] * len(joints),
-        })
-    if max_force is not None:
-        #max_forces = [get_max_force(body, joint) for joint in joints]
-        max_forces = [max_force] * len(joints)
-        # max_forces = [5000]*len(joints) # 20000
-        #print(max_forces)
-        kwargs.update({
-            'forces': max_forces,
-        })
-    return p.setJointMotorControlArray(bodyUniqueId=body,
-                                       jointIndices=joints,
-                                       controlMode=p.POSITION_CONTROL,
-                                       targetPositions=positions,
-                                       targetVelocities=velocities,
-                                       physicsClientId=CLIENT, **kwargs)
-
-def control_joints_hold(body, joints, positions=None, **kwargs):
-    configuration = modify_configuration(body, joints, positions)
-    return control_joints(body, get_movable_joints(body), configuration, **kwargs)
-
-def joint_controller(body, joints, target, tolerance=1e-3, timeout=INF, **kwargs):
-    assert(len(joints) == len(target))
-    dt = get_time_step()
-    time_elapsed = 0.
-    control_joints(body, joints, target, **kwargs)
-    positions = get_joint_positions(body, joints)
-    while not np.allclose(positions, target, atol=tolerance, rtol=0) and (time_elapsed < timeout):
-        yield positions
-        time_elapsed += dt
-        positions = get_joint_positions(body, joints)
-        # TODO: return timeout (or throw error)
-
-def waypoint_joint_controller(body, joints, target, tolerance=1e-3, time_step=0.1, timeout=INF, **kwargs):
-    # TODO: leading instead of waypoint?
-    assert(len(joints) == len(target))
-    # TODO: calculateInverseDynamics
-    duration_fn = get_duration_fn(body, joints)
-    dt = get_time_step() # TODO: use dt instead of time_step?
-    time_elapsed = 0.
-    #print(duration_fn(get_joint_positions(body, joints), target)) # TODO: compute waypoint from velocity
-    while time_elapsed < timeout: # TODO: timeout based on the distance
-        positions = get_joint_positions(body, joints)
-        remaining = duration_fn(positions, target)
-        if np.allclose(positions, target, atol=tolerance, rtol=0):
-            break
-        #print(np.divide(get_joint_velocities(body, joints), get_max_velocities(body, joints)))
-        w = min(remaining, time_step) / remaining
-        waypoint = convex_combination(positions, target, w=w) # Important to not include wrap around
-        control_joints(body, joints, waypoint, **kwargs)
-        yield positions
-        time_elapsed += dt
-
-def joint_controller_hold(body, joints, target=None, **kwargs):
-    """
-    Keeps other joints in place
-    """
-    configuration = modify_configuration(body, joints, target)
-    return joint_controller(body, get_movable_joints(body), configuration, **kwargs)
-
-def joint_controller_hold2(body, joints, positions, velocities=None,
-                           tolerance=1e-2 * np.pi, position_gain=0.05, velocity_gain=0.01):
-    """
-    Keeps other joints in place
-    """
-    # TODO: velocity_gain causes the PR2 to oscillate
-    if velocities is None:
-        velocities = [0.] * len(positions)
-    movable_joints = get_movable_joints(body)
-    target_positions = list(get_joint_positions(body, movable_joints))
-    #target_velocities = [0.] * len(movable_joints)
-    movable_from_original = {o: m for m, o in enumerate(movable_joints)}
-    #print(list(positions), list(velocities))
-    for joint, position, velocity in zip(joints, positions, velocities):
-        target_positions[movable_from_original[joint]] = position
-        #target_velocities[movable_from_original[joint]] = velocity
-    # return joint_controller(body, movable_joints, conf)
-
-    current_conf = get_joint_positions(body, movable_joints)
-    #forces = [get_max_force(body, joint) for joint in movable_joints]
-    while not np.allclose(current_conf, target_positions, atol=tolerance, rtol=0):
-        # TODO: only enforce velocity constraints at end
-        p.setJointMotorControlArray(body, movable_joints, p.POSITION_CONTROL,
-                                    targetPositions=target_positions,
-                                    #targetVelocities=target_velocities,
-                                    positionGains=[position_gain] * len(movable_joints),
-                                    #velocityGains=[velocity_gain] * len(movable_joints),
-                                    #maxVelocities=[0.]*len(movable_joints), # TODO: maxVelocity equivalent?
-                                    #forces=forces,
-                                    physicsClientId=CLIENT)
-        yield current_conf
-        current_conf = get_joint_positions(body, movable_joints)
-
-def trajectory_controller(body, joints, path, **kwargs):
-    for target in path:
-        for positions in joint_controller(body, joints, target, **kwargs):
-            yield positions
-
-def simulate_controller(controller, max_time=np.inf): # Allow option to sleep rather than yield?
-    sim_dt = get_time_step()
-    sim_time = 0.0
-    for _ in controller:
-        if max_time < sim_time:
-            break
-        step_simulation()
-        sim_time += sim_dt
-        yield sim_time
-
-def velocity_control_joints(body, joints, velocities):
-    #kv = 0.3
-    return p.setJointMotorControlArray(body, joints, p.VELOCITY_CONTROL,
-                                       targetVelocities=velocities,
-                                       physicsClientId=CLIENT,)
-                                       #velocityGains=[kv] * len(joints),)
-                                       #forces=forces)
-
-#####################################
-
-def compute_jacobian(robot, link, positions=None):
-    joints = get_movable_joints(robot)
-    if positions is None:
-        positions = get_joint_positions(robot, joints)
-    assert len(joints) == len(positions)
-    velocities = [0.0] * len(positions)
-    accelerations = [0.0] * len(positions)
-    translate, rotate = p.calculateJacobian(robot, link, unit_point(), positions,
-                                            velocities, accelerations, physicsClientId=CLIENT)
-    #movable_from_joints(robot, joints)
-    return list(zip(*translate)), list(zip(*rotate)) # len(joints) x 3
-
-
-def compute_joint_weights(robot, num=100):
-    # http://openrave.org/docs/0.6.6/_modules/openravepy/databases/linkstatistics/#LinkStatisticsModel
-    # TODO: use velocities instead
-    start_time = time.time()
-    joints = get_movable_joints(robot)
-    sample_fn = get_sample_fn(robot, joints)
-    weighted_jacobian = np.zeros(len(joints))
-    links = list(get_links(robot))
-    # links = {l for j in joints for l in get_link_descendants(self.robot, j)}
-    masses = [get_mass(robot, link) for link in links]  # Volume, AABB volume
-    total_mass = sum(masses)
-    for _ in range(num):
-        conf = sample_fn()
-        for mass, link in zip(masses, links):
-            translate, rotate = compute_jacobian(robot, link, conf)
-            weighted_jacobian += np.array([mass * np.linalg.norm(vec) for vec in translate]) / total_mass
-    weighted_jacobian /= num
-    print(list(weighted_jacobian))
-    print(time.time() - start_time)
-    return weighted_jacobian
-
-#####################################
-
-def inverse_kinematics_helper(robot, link, target_pose, null_space=None):
-    (target_point, target_quat) = target_pose
-    assert target_point is not None
-    if null_space is not None:
-        assert target_quat is not None
-        lower, upper, ranges, rest = null_space
-        kinematic_conf = p.calculateInverseKinematics(robot, link, target_point, lowerLimits=lower, upperLimits=upper,
-                                                      jointRanges=ranges, restPoses=rest, physicsClientId=CLIENT)
-    elif target_quat is None:
-        #ikSolver = p.IK_DLS or p.IK_SDLS
-        kinematic_conf = p.calculateInverseKinematics(robot, link, target_point,
-                                                      #lowerLimits=ll, upperLimits=ul, jointRanges=jr, restPoses=rp, jointDamping=jd,
-                                                      # solver=ikSolver, currentPosition=None, maxNumIterations=20, residualThreshold=-1,
-                                                      physicsClientId=CLIENT)
-    else:
-        # TODO: calculateInverseKinematics2
-        kinematic_conf = p.calculateInverseKinematics(robot, link, target_point, target_quat, physicsClientId=CLIENT)
-    if (kinematic_conf is None) or any(map(math.isnan, kinematic_conf)):
-        return None
-    return kinematic_conf
-
-def is_pose_close(pose, target_pose, pos_tolerance=1e-3, ori_tolerance=1e-3*np.pi):
-    (point, quat) = pose
-    (target_point, target_quat) = target_pose
-    if (target_point is not None) and not np.allclose(point, target_point, atol=pos_tolerance, rtol=0):
-        return False
-    if (target_quat is not None) and not np.allclose(quat, target_quat, atol=ori_tolerance, rtol=0):
-        # TODO: account for quaternion redundancy
-        return False
-    return True
-
-def inverse_kinematics(robot, link, target_pose, max_iterations=200, max_time=INF, custom_limits={}, **kwargs):
-    start_time = time.time()
-    movable_joints = get_movable_joints(robot)
-    for iteration in irange(max_iterations):
-        # TODO: stop is no progress (converged)
-        # TODO: stop if collision or invalid joint limits
-        if elapsed_time(start_time) >= max_time:
-            return None
-        kinematic_conf = inverse_kinematics_helper(robot, link, target_pose)
-        if kinematic_conf is None:
-            return None
-        set_joint_positions(robot, movable_joints, kinematic_conf)
-        if is_pose_close(get_link_pose(robot, link), target_pose, **kwargs):
-            break
-    else:
-        return None
-    lower_limits, upper_limits = get_custom_limits(robot, movable_joints, custom_limits)
-    if not all_between(lower_limits, kinematic_conf, upper_limits):
-        return None
-    return kinematic_conf
-
-#####################################
-
-def get_position_waypoints(start_point, direction, quat, step_size=0.01):
-    distance = get_length(direction)
-    unit_direction = get_unit_vector(direction)
-    for t in np.arange(0, distance, step_size):
-        point = start_point + t*unit_direction
-        yield (point, quat)
-    yield (start_point + direction, quat)
-
-def get_quaternion_waypoints(point, start_quat, end_quat, step_size=np.pi/16):
-    angle = quat_angle_between(start_quat, end_quat)
-    for t in np.arange(0, angle, step_size):
-        fraction = t/angle
-        quat = quat_combination(start_quat, end_quat, fraction=fraction)
-        yield (point, quat)
-    yield (point, end_quat)
-
-def get_pose_distance(pose1, pose2):
-    pos1, quat1 = pose1
-    pos2, quat2 = pose2
-    pos_distance = get_distance(pos1, pos2)
-    ori_distance = quat_angle_between(quat1, quat2)
-    return pos_distance, ori_distance
-
-def interpolate_poses(pose1, pose2, pos_step_size=0.01, ori_step_size=np.pi/16):
-    pos1, quat1 = pose1
-    pos2, quat2 = pose2
-    num_steps = max(2, int(math.ceil(max(
-        np.divide(get_pose_distance(pose1, pose2), [pos_step_size, ori_step_size])))))
-    yield pose1
-    for w in np.linspace(0, 1, num=num_steps, endpoint=True)[1:-1]:
-        pos = convex_combination(pos1, pos2, w=w)
-        quat = quat_combination(quat1, quat2, fraction=w)
-        yield (pos, quat)
-    yield pose2
-
-def interpolate(value1, value2, num_steps=2):
-    num_steps = max(num_steps, 2)
-    yield value1
-    for w in np.linspace(0, 1, num=num_steps, endpoint=True)[1:-1]:
-        yield convex_combination(value1, value2, w=w)
-    yield value2
-
-def interpolate_waypoints(interpolate_fn, waypoints, returns_first=True):
-    if len(waypoints) <= 1:
-        for waypoint in waypoints:
-            yield waypoint
-        return
-    yield waypoints[0]
-    for waypoint1, waypoint2 in get_pairs(waypoints):
-        for i, value in enumerate(interpolate_fn(waypoint1, waypoint2)):
-            if returns_first and (i == 0):
-                continue
-            yield value
-
-# def workspace_trajectory(robot, link, start_point, direction, quat, **kwargs):
-#     # TODO: pushing example
-#     # TODO: just use current configuration?
-#     # TODO: check collisions?
-#     # TODO: lower intermediate tolerance
-#     traj = []
-#     for pose in get_cartesian_waypoints(start_point, direction, quat):
-#         conf = inverse_kinematics(robot, link, pose, **kwargs)
-#         if conf is None:
-#             return None
-#         traj.append(conf)
-#     return traj
-
-#####################################
-
-NullSpace = namedtuple('Nullspace', ['lower', 'upper', 'range', 'rest'])
-
-def get_null_space(robot, joints, custom_limits={}):
-    rest_positions = get_joint_positions(robot, joints)
-    lower, upper = get_custom_limits(robot, joints, custom_limits)
-    lower = np.maximum(lower, -10*np.ones(len(joints)))
-    upper = np.minimum(upper, +10*np.ones(len(joints)))
-    joint_ranges = 10*np.ones(len(joints))
-    return NullSpace(list(lower), list(upper), list(joint_ranges), list(rest_positions))
-
-def create_sub_robot(robot, first_joint, target_link):
-    # TODO: create a class or generator for repeated use
-    selected_links = get_link_subtree(robot, first_joint) # TODO: child_link_from_joint?
-    selected_joints = prune_fixed_joints(robot, selected_links)
-    assert(target_link in selected_links)
-    sub_target_link = selected_links.index(target_link)
-    sub_robot = clone_body(robot, links=selected_links, visual=False, collision=False) # TODO: joint limits
-    assert len(selected_joints) == len(get_movable_joints(sub_robot))
-    return sub_robot, selected_joints, sub_target_link
-
-def multiple_sub_inverse_kinematics(robot, first_joint, target_link, target_pose, max_attempts=1, max_solutions=INF,
-                                    max_time=INF, custom_limits={}, first_close=True, **kwargs):
-    # TODO: gradient descent using collision_info
-    start_time = time.time()
-    ancestor_joints = prune_fixed_joints(robot, get_ordered_ancestors(robot, target_link))
-    affected_joints = ancestor_joints[ancestor_joints.index(first_joint):]
-    sub_robot, selected_joints, sub_target_link = create_sub_robot(robot, first_joint, target_link)
-    #sub_joints = get_movable_joints(sub_robot)
-    #sub_from_real = dict(safe_zip(sub_joints, selected_joints))
-    sub_joints = prune_fixed_joints(sub_robot, get_ordered_ancestors(sub_robot, sub_target_link))
-    selected_joints = affected_joints
-    #sub_from_real = dict(safe_zip(sub_joints, selected_joints))
-
-    #sample_fn = get_sample_fn(sub_robot, sub_joints, custom_limits=custom_limits) # [-PI, PI]
-    sample_fn = get_sample_fn(robot, selected_joints, custom_limits=custom_limits)
-    # lower_limits, upper_limits = get_custom_limits(robot, get_movable_joints(robot), custom_limits)
-    solutions = []
-    for attempt in irange(max_attempts):
-        if (len(solutions) >= max_solutions) or (elapsed_time(start_time) >= max_time):
-            break
-        if not first_close or (attempt >= 1): # TODO: multiple seed confs
-            sub_conf = sample_fn()
-            set_joint_positions(sub_robot, sub_joints, sub_conf)
-        sub_kinematic_conf = inverse_kinematics(sub_robot, sub_target_link, target_pose,
-                                                max_time=max_time-elapsed_time(start_time), **kwargs)
-        if sub_kinematic_conf is not None:
-            #set_configuration(sub_robot, sub_kinematic_conf)
-            sub_kinematic_conf = get_joint_positions(sub_robot, sub_joints)
-            set_joint_positions(robot, selected_joints, sub_kinematic_conf)
-            kinematic_conf = get_configuration(robot) # TODO: test on the resulting robot state (e.g. collisions)
-            #if not all_between(lower_limits, kinematic_conf, upper_limits):
-            solutions.append(kinematic_conf) # kinematic_conf | sub_kinematic_conf
-    if solutions:
-        set_configuration(robot, solutions[-1])
-    # TODO: test for redundant configurations
-    remove_body(sub_robot)
-    return solutions
-
-def plan_cartesian_motion(robot, first_joint, target_link, waypoint_poses,
-                          max_iterations=200, max_time=INF, custom_limits={}, **kwargs):
-    # TODO: fix stationary joints
-    # TODO: pass in set of movable joints and take least common ancestor
-    # TODO: update with most recent bullet updates
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/examples/inverse_kinematics.py
-    # https://github.com/bulletphysics/bullet3/blob/master/examples/pybullet/examples/inverse_kinematics_husky_kuka.py
-    # TODO: plan a path without needing to following intermediate waypoints
-
-    lower_limits, upper_limits = get_custom_limits(robot, get_movable_joints(robot), custom_limits)
-    sub_robot, selected_joints, sub_target_link = create_sub_robot(robot, first_joint, target_link)
-    sub_joints = get_movable_joints(sub_robot)
-    #null_space = get_null_space(robot, selected_joints, custom_limits=custom_limits)
-    null_space = None
-
-    solutions = []
-    for target_pose in waypoint_poses:
-        start_time = time.time()
-        for iteration in irange(max_iterations):
-            if elapsed_time(start_time) >= max_time:
-                remove_body(sub_robot)
-                return None
-            sub_kinematic_conf = inverse_kinematics_helper(sub_robot, sub_target_link, target_pose, null_space=null_space)
-            if sub_kinematic_conf is None:
-                remove_body(sub_robot)
-                return None
-            set_joint_positions(sub_robot, sub_joints, sub_kinematic_conf)
-            if is_pose_close(get_link_pose(sub_robot, sub_target_link), target_pose, **kwargs):
-                set_joint_positions(robot, selected_joints, sub_kinematic_conf)
-                kinematic_conf = get_configuration(robot)
-                if not all_between(lower_limits, kinematic_conf, upper_limits):
-                    #movable_joints = get_movable_joints(robot)
-                    #print([(get_joint_name(robot, j), l, v, u) for j, l, v, u in
-                    #       zip(movable_joints, lower_limits, kinematic_conf, upper_limits) if not (l <= v <= u)])
-                    #print("Limits violated")
-                    #wait_if_gui()
-                    remove_body(sub_robot)
-                    return None
-                #print("IK iterations:", iteration)
-                solutions.append(kinematic_conf)
-                break
-        else:
-            remove_body(sub_robot)
-            return None
-    # TODO: finally:
-    remove_body(sub_robot)
-    return solutions
-
-def sub_inverse_kinematics(robot, first_joint, target_link, target_pose, **kwargs):
-    solutions = plan_cartesian_motion(robot, first_joint, target_link, [target_pose], **kwargs)
-    if solutions:
-        return solutions[0]
-    return None
-
-#####################################
-
-def get_lifetime(lifetime):
-    if lifetime is None:
-        return 0
-    return lifetime
-
-def add_parameter(name, lower=0., upper=1., initial=0.):
-    # TODO: make a slider that controls the step in the trajectory
-    # TODO: could store a list of savers
-    return p.addUserDebugParameter(name, lower, upper, initial, physicsClientId=CLIENT)
-
-def add_button(name, initial=False):
-    # If Minimum value > maximum value a button instead of slider will appear
-    # For a button, the value of getUserDebugParameter for a button increases 1 at each button press
-    return add_parameter(name, lower=True, upper=False, initial=initial)
-
-def read_parameter(debug):
-    return p.readUserDebugParameter(debug, physicsClientId=CLIENT)
-
-def read_counter(debug):
-    return int(read_parameter(debug))
-
-def read_button(debug):
-    return read_counter(debug) % 2 == 1
-
-def add_text(text, position=unit_point(), color=BLACK, lifetime=None, parent=NULL_ID, parent_link=BASE_LINK):
-    return p.addUserDebugText(str(text), textPosition=position, textColorRGB=color[:3], # textSize=1,
-                              lifeTime=get_lifetime(lifetime), parentObjectUniqueId=parent, parentLinkIndex=parent_link,
-                              physicsClientId=CLIENT)
-
-def add_line(start, end, color=BLACK, width=1, lifetime=None, parent=NULL_ID, parent_link=BASE_LINK):
-    assert (len(start) == 3) and (len(end) == 3)
-    return p.addUserDebugLine(start, end, lineColorRGB=color[:3], lineWidth=width,
-                              lifeTime=get_lifetime(lifetime), parentObjectUniqueId=parent, parentLinkIndex=parent_link,
-                              physicsClientId=CLIENT)
-
-def remove_debug(debug):
-    p.removeUserDebugItem(debug, physicsClientId=CLIENT)
-
-remove_handle = remove_debug
-
-def remove_handles(handles):
-    with LockRenderer():
-        for handle in handles:
-            remove_debug(handle)
-    handles[:] = []
-
-def remove_all_debug():
-    p.removeAllUserDebugItems(physicsClientId=CLIENT)
-
-def add_body_name(body, name=None, **kwargs):
-    if name is None:
-        name = get_name(body)
-    with PoseSaver(body):
-        set_pose(body, unit_pose())
-        lower, upper = get_aabb(body)
-    #position = (0, 0, upper[2])
-    position = upper
-    return add_text(name, position=position, parent=body, **kwargs)  # removeUserDebugItem
-
-def add_segments(points, closed=False, **kwargs): # TODO: draw_segments
-    lines = []
-    for v1, v2 in get_pairs(points):
-        lines.append(add_line(v1, v2, **kwargs))
-    if closed:
-        lines.append(add_line(points[-1], points[0], **kwargs))
-    return lines
-
-def draw_link_name(body, link=BASE_LINK):
-    return add_text(get_link_name(body, link), position=(0, 0.2, 0),
-                    parent=body, parent_link=link)
-
-def draw_pose(pose, length=0.1, d=3, **kwargs):
-    origin_world = tform_point(pose, np.zeros(3))
-    handles = []
-    for k in range(d):
-        axis = np.zeros(3)
-        axis[k] = 1
-        axis_world = tform_point(pose, length*axis)
-        handles.append(add_line(origin_world, axis_world, color=axis, **kwargs))
-    return handles
-
-def draw_global_system(**kwargs):
-    return draw_pose(Pose(), length=1., **kwargs)
-
-def draw_pose2d(pose2d, z=0., d=2, **kwargs):
-    return draw_pose(pose_from_pose2d(pose2d, z), d=d, **kwargs)
-
-def draw_base_limits(limits, z=1e-2, **kwargs):
-    lower, upper = limits
-    vertices = [(lower[0], lower[1], z), (lower[0], upper[1], z),
-                (upper[0], upper[1], z), (upper[0], lower[1], z)]
-    return add_segments(vertices, closed=True, **kwargs)
-
-def get_circle_vertices(center, radius, n=24):
-    vertices = []
-    for i in range(n):
-        theta = i*2*math.pi/n
-        unit = unit_from_theta(theta)
-        if len(center) == 3:
-            unit = np.append(unit, [0.])
-        vertices.append(center + radius*unit)
-    return vertices
-
-def draw_circle(center, radius, n=24, **kwargs):
-    return add_segments(get_circle_vertices(center, radius, n=n), closed=True, **kwargs)
-
-def draw_aabb(aabb, **kwargs):
-    return [add_line(p1, p2, **kwargs) for p1, p2 in get_aabb_edges(aabb)]
-
-def draw_oobb(oobb, origin=False, **kwargs):
-    aabb, pose = oobb
-    handles = []
-    if origin:
-        handles.extend(draw_pose(pose, **kwargs))
-    for edge in get_aabb_edges(aabb):
-        p1, p2 = apply_affine(pose, edge)
-        handles.append(add_line(p1, p2, **kwargs))
-    return handles
-
-def draw_point(point, size=0.01, **kwargs):
-    lines = []
-    for i in range(len(point)):
-        axis = np.zeros(len(point))
-        axis[i] = 1.0
-        p1 = np.array(point) - size/2 * axis
-        p2 = np.array(point) + size/2 * axis
-        lines.append(add_line(p1, p2, **kwargs))
-    return lines
-    #extent = size * np.ones(len(point)) / 2
-    #aabb = np.array(point) - extent, np.array(point) + extent
-    #return draw_aabb(aabb, **kwargs)
-
-def get_face_edges(face):
-    #return list(combinations(face, 2))
-    return get_wrapped_pairs(face) # TODO: lines versus planes
-
-def draw_mesh(mesh, **kwargs):
-    verts, faces = mesh
-    handles = []
-    with LockRenderer():
-        for face in faces:
-            for i1, i2 in get_face_edges(face):
-                handles.append(add_line(verts[i1], verts[i2], **kwargs))
-    return handles
-
-def was_ray_hit(ray_result):
-    if ray_result is None:
-        return False
-    return ray_result.objectUniqueId != NULL_ID
-
-def get_hit_position(ray, ray_result=None):
-    if was_ray_hit(ray_result):
-        return ray_result.hit_position
-    return ray.end
-
-def draw_ray(ray, ray_result=None, visible_color=GREEN, occluded_color=RED, **kwargs):
-    if ray_result is None:
-        return [add_line(ray.start, ray.end, color=visible_color, **kwargs)]
-    hit_position = get_hit_position(ray, ray_result)
-    return [
-        add_line(ray.start, hit_position, color=visible_color, **kwargs),
-        add_line(hit_position, ray.end, color=occluded_color, **kwargs),
-    ]
-
-#####################################
-
-# Polygonal surfaces
-
-def create_rectangular_surface(width, length):
-    # TODO: unify with rectangular_mesh
-    extents = np.array([width, length, 0]) / 2.
-    unit_corners = [(-1, -1), (+1, -1), (+1, +1), (-1, +1)]
-    return [np.append(c, 0) * extents for c in unit_corners]
-
-def is_point_in_polygon(point, polygon): # TODO: rename polygon to path
-    # TODO: is_point_in_polytope
-    # TODO: aabb_contains_point
-    sign = None
-    for i in range(len(polygon)):
-        v1, v2 = np.array(polygon[i - 1][:2]), np.array(polygon[i][:2])
-        delta = v2 - v1
-        normal = np.array([-delta[1], delta[0]])
-        dist = normal.dot(point[:2] - v1)
-        if i == 0:  # TODO: equality?
-            sign = np.sign(dist)
-        elif np.sign(dist) != sign:
-            return False
-    return True
-
-def distance_from_segment(x1, y1, x2, y2, x3, y3): # x3, y3 is the point
-    # https://stackoverflow.com/questions/10983872/distance-from-a-point-to-a-polygon
-    # https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment
-    px = x2 - x1
-    py = y2 - y1
-    norm = px*px + py*py
-    u = ((x3 - x1) * px + (y3 - y1) * py) / float(norm)
-    if u > 1:
-        u = 1
-    elif u < 0:
-        u = 0
-    x = x1 + u * px
-    y = y1 + u * py
-    dx = x - x3
-    dy = y - y3
-    return math.sqrt(dx*dx + dy*dy)
-
-def tform_point(affine, point):
-    return point_from_pose(multiply(affine, Pose(point=point)))
-
-def tform_points(affine, points):
-    return [tform_point(affine, p) for p in points]
-
-apply_affine = tform_points
-
-def is_mesh_on_surface(polygon, world_from_surface, mesh, world_from_mesh, epsilon=1e-2):
-    surface_from_mesh = multiply(invert(world_from_surface), world_from_mesh)
-    points_surface = apply_affine(surface_from_mesh, mesh.vertices)
-    min_z = np.min(points_surface[:, 2])
-    return (abs(min_z) < epsilon) and all(is_point_in_polygon(point, polygon) for point in points_surface)
-
-def is_point_on_surface(polygon, world_from_surface, point_world):
-    [point_surface] = apply_affine(invert(world_from_surface), [point_world])
-    return is_point_in_polygon(point_surface, polygon[::-1])
-
-def sample_polygon_tform(polygon, points):
-    min_z = np.min(points[:, 2])
-    aabb_min = np.min(polygon, axis=0)
-    aabb_max = np.max(polygon, axis=0)
-    while True:
-        x = np.random.uniform(aabb_min[0], aabb_max[0])
-        y = np.random.uniform(aabb_min[1], aabb_max[1])
-        theta = np.random.uniform(0, 2 * np.pi)
-        point = Point(x, y, -min_z)
-        quat = Euler(yaw=theta)
-        surface_from_origin = Pose(point, quat)
-        yield surface_from_origin
-        # if all(is_point_in_polygon(p, polygon) for p in apply_affine(surface_from_origin, points)):
-        #  yield surface_from_origin
-
-def sample_surface_pose(polygon, world_from_surface, mesh):
-    for surface_from_origin in sample_polygon_tform(polygon, mesh.vertices):
-        world_from_mesh = multiply(world_from_surface, surface_from_origin)
-        if is_mesh_on_surface(polygon, world_from_surface, mesh, world_from_mesh):
-            yield world_from_mesh
-
-#####################################
-
-# Sampling edges
-
-def sample_categorical(categories):
-    from bisect import bisect
-    names = categories.keys()
-    cutoffs = np.cumsum([categories[name] for name in names])/sum(categories.values())
-    return names[bisect(cutoffs, np.random.random())]
-
-def sample_edge_point(polygon, radius):
-    edges = get_wrapped_pairs(polygon)
-    edge_weights = {i: max(get_length(v2 - v1) - 2 * radius, 0) for i, (v1, v2) in enumerate(edges)}
-    # TODO: fail if no options
-    while True:
-        index = sample_categorical(edge_weights)
-        v1, v2 = edges[index]
-        t = np.random.uniform(radius, get_length(v2 - v1) - 2 * radius)
-        yield t * get_unit_vector(v2 - v1) + v1
-
-def get_closest_edge_point(polygon, point):
-    # TODO: always pick perpendicular to the edge
-    edges = get_wrapped_pairs(polygon)
-    best = None
-    for v1, v2 in edges:
-        proj = (v2 - v1)[:2].dot((point - v1)[:2])
-        if proj <= 0:
-            closest = v1
-        elif get_length((v2 - v1)[:2]) <= proj:
-            closest = v2
-        else:
-            closest = proj * get_unit_vector((v2 - v1))
-        if (best is None) or (get_length((point - closest)[:2]) < get_length((point - best)[:2])):
-            best = closest
-    return best
-
-def sample_edge_pose(polygon, world_from_surface, mesh):
-    radius = max(get_length(v[:2]) for v in mesh.vertices)
-    origin_from_base = Pose(Point(z=p.min(mesh.vertices[:, 2])))
-    for point in sample_edge_point(polygon, radius):
-        theta = np.random.uniform(0, 2 * np.pi)
-        surface_from_origin = Pose(point, Euler(yaw=theta))
-        yield multiply(world_from_surface, surface_from_origin, origin_from_base)
-
-#####################################
-
-# Convex Hulls
-
-def convex_hull(points):
-    from scipy.spatial import ConvexHull
-    # TODO: cKDTree is faster, but KDTree can do all pairs closest
-    hull = ConvexHull(list(points), incremental=False)
-    new_indices = {i: ni for ni, i in enumerate(hull.vertices)}
-    vertices = hull.points[hull.vertices, :]
-    faces = np.vectorize(lambda i: new_indices[i])(hull.simplices)
-    return Mesh(vertices.tolist(), faces.tolist())
-
-def convex_signed_area(vertices):
-    if len(vertices) < 3:
-        return 0.
-    vertices = [np.array(v[:2]) for v in vertices]
-    segments = get_wrapped_pairs(vertices)
-    return sum(np.cross(v1, v2) for v1, v2 in segments) / 2.
-
-def convex_area(vertices):
-    return abs(convex_signed_area(vertices))
-
-def convex_centroid(vertices):
-    # TODO: also applies to non-overlapping polygons
-    vertices = [np.array(v[:2]) for v in vertices]
-    segments = get_wrapped_pairs(vertices)
-    return sum((v1 + v2)*np.cross(v1, v2) for v1, v2 in segments) / (6.*convex_signed_area(vertices))
-
-def get_normal(v1, v2, v3):
-    return get_unit_vector(np.cross(np.array(v3) - v1, np.array(v2) - v1))
-
-def get_rotation(v1, v2, v3):
-    import scipy
-    a1 = np.array(v3) - v1
-    a2 = np.array(v2) - v1
-    a3 = np.cross(a2, a1)
-    return scipy.linalg.orth([a1, a2, a3])
-
-def get_mesh_normal(face, interior):
-    assert len(face) == 3
-    normal = get_normal(*face)
-    if normal.dot(interior) > 0:
-        normal *= -1
-    return normal
-
-def orient_face(vertices, face, point=None):
-    if point is None:
-        point = np.average(vertices, axis=0)
-    v1, v2, v3 = vertices[face]
-    normal = get_normal(v1, v2, v3)
-    if normal.dot(point - v1) < 0:
-        face = face[::-1]
-    return tuple(face)
-
-def mesh_from_points(points, under=True):
-    vertices, faces = map(np.array, convex_hull(points))
-    centroid = np.average(vertices, axis=0)
-    new_faces = [orient_face(vertices, face, point=centroid) for face in faces]
-    if under:
-        new_faces.extend(map(tuple, map(reversed, list(new_faces))))
-    return Mesh(vertices.tolist(), new_faces)
-
-def rectangular_mesh(width, length):
-    # TODO: 2.5d polygon
-    extents = np.array([width, length, 0])/2.
-    unit_corners = [(-1, -1), (+1, -1), (+1, +1), (-1, +1)]
-    vertices = [np.append(c, [0])*extents for c in unit_corners]
-    faces = [(0, 1, 2), (2, 3, 0)]
-    return Mesh(vertices, faces)
-
-def tform_mesh(affine, mesh):
-    return Mesh(apply_affine(affine, mesh.vertices), mesh.faces)
-
-def grow_polygon(points, radius=0., n=8):
-    points2d = [point[:2] for point in points]
-    if not points2d:
-        return []
-    vertices = convex_hull(points2d).vertices
-    if radius == 0:
-        return vertices
-    grown_points = []
-    for vertex in vertices:
-        grown_points.append(vertex)
-        for theta in np.linspace(0, 2*PI, num=n, endpoint=False):
-            grown_points.append(vertex + radius * unit_from_theta(theta))
-    return convex_hull(grown_points).vertices
-
-#####################################
-
-# Mesh & Pointcloud Files
-
-def obj_file_from_mesh(mesh, under=True):
-    """
-    Creates a *.obj mesh string
-    :param mesh: tuple of list of vertices and list of faces
-    :return: *.obj mesh string
-    """
-    vertices, faces = mesh
-    s = 'g Mesh\n' # TODO: string writer
-    for v in vertices:
-        assert(len(v) == 3)
-        s += '\nv {}'.format(' '.join(map(str, v)))
-    for f in faces:
-        #assert(len(f) == 3) # Not necessarily true
-        f = [i+1 for i in f] # Assumes mesh is indexed from zero
-        s += '\nf {}'.format(' '.join(map(str, f)))
-        if under:
-            s += '\nf {}'.format(' '.join(map(str, reversed(f))))
-    return s
-
-def get_connected_components(vertices, edges):
-    undirected_edges = defaultdict(set)
-    for v1, v2 in edges:
-        undirected_edges[v1].add(v2)
-        undirected_edges[v2].add(v1)
-    clusters = []
-    processed = set()
-    for v0 in vertices:
-        if v0 in processed:
-            continue
-        processed.add(v0)
-        cluster = {v0}
-        queue = deque([v0])
-        while queue:
-            v1 = queue.popleft()
-            for v2 in (undirected_edges[v1] - processed):
-                processed.add(v2)
-                cluster.add(v2)
-                queue.append(v2)
-        if cluster: # preserves order
-            clusters.append(frozenset(cluster))
-    return clusters
-
-
-def read_obj(path, decompose=True):
-    mesh = Mesh([], [])
-    meshes = {}
-    vertices = []
-    faces = []
-    for line in read(path).split('\n'):
-        tokens = line.split()
-        if not tokens:
-            continue
-        if tokens[0] == 'o':
-            name = tokens[1]
-            mesh = Mesh([], [])
-            meshes[name] = mesh
-        elif tokens[0] == 'v':
-            vertex = tuple(map(float, tokens[1:4]))
-            vertices.append(vertex)
-        elif tokens[0] in ('vn', 's'):
-            pass
-        elif tokens[0] == 'f':
-            face = tuple(int(token.split('/')[0]) - 1 for token in tokens[1:])
-            faces.append(face)
-            mesh.faces.append(face)
-    if not decompose:
-        return Mesh(vertices, faces)
-
-    # TODO: separate into a standalone method
-    #if not meshes:
-    #    # TODO: ensure this still works if no objects
-    #    meshes[None] = mesh
-    #new_meshes = {}
-    # TODO: make each triangle a separate object
-    for name, mesh in meshes.items():
-        indices = sorted({i for face in mesh.faces for i in face})
-        mesh.vertices[:] = [vertices[i] for i in indices]
-        new_index_from_old = {i2: i1 for i1, i2 in enumerate(indices)}
-        mesh.faces[:] = [tuple(new_index_from_old[i1] for i1 in face) for face in mesh.faces]
-        #edges = {edge for face in mesh.faces for edge in get_face_edges(face)}
-        #for k, cluster in enumerate(get_connected_components(indices, edges)):
-        #    new_name = '{}#{}'.format(name, k)
-        #    new_indices = sorted(cluster)
-        #    new_vertices = [vertices[i] for i in new_indices]
-        #    new_index_from_old = {i2: i1 for i1, i2 in enumerate(new_indices)}
-        #    new_faces = [tuple(new_index_from_old[i1] for i1 in face)
-        #                 for face in mesh.faces if set(face) <= cluster]
-        #    new_meshes[new_name] = Mesh(new_vertices, new_faces)
-    return meshes
-
-
-def transform_obj_file(obj_string, transformation):
-    new_lines = []
-    for line in obj_string.split('\n'):
-        tokens = line.split()
-        if not tokens or (tokens[0] != 'v'):
-            new_lines.append(line)
-            continue
-        vertex = list(map(float, tokens[1:]))
-        transformed_vertex = transformation.dot(vertex)
-        new_lines.append('v {}'.format(' '.join(map(str, transformed_vertex))))
-    return '\n'.join(new_lines)
-
-
-def read_mesh_off(path, scale=1.0):
-    """
-    Reads a *.off mesh file
-    :param path: path to the *.off mesh file
-    :return: tuple of list of vertices and list of faces
-    """
-    with open(path) as f:
-        assert (f.readline().split()[0] == 'OFF'), 'Not OFF file'
-        nv, nf, ne = [int(x) for x in f.readline().split()]
-        verts = [tuple(scale * float(v) for v in f.readline().split()) for _ in range(nv)]
-        faces = [tuple(map(int, f.readline().split()[1:])) for _ in range(nf)]
-        return Mesh(verts, faces)
-
-
-def read_pcd_file(path):
-    """
-    Reads a *.pcd pointcloud file
-    :param path: path to the *.pcd pointcloud file
-    :return: list of points
-    """
-    with open(path) as f:
-        data = f.readline().split()
-        num_points = 0
-        while data[0] != 'DATA':
-            if data[0] == 'POINTS':
-                num_points = int(data[1])
-            data = f.readline().split()
-            continue
-        return [tuple(map(float, f.readline().split())) for _ in range(num_points)]
-
-# TODO: factor out things that don't depend on pybullet
-
-#####################################
-
-# https://github.com/kohterai/OBJ-Parser
-
-"""
-def readWrl(filename, name='wrlObj', scale=1.0, color='black'):
-    def readOneObj():
-        vl = []
-        while True:
-            line = fl.readline()
-            split = line.split(',')
-            if len(split) != 2:
-                break
-            split = split[0].split()
-            if len(split) == 3:
-                vl.append(np.array([scale*float(x) for x in split]+[1.0]))
-            else:
-                break
-        print '    verts', len(vl),
-        verts = np.vstack(vl).T
-        while line.split()[0] != 'coordIndex':
-            line = fl.readline()
-        line = fl.readline()
-        faces = []
-        while True:
-            line = fl.readline()
-            split = line.split(',')
-            if len(split) > 3:
-                faces.append(np.array([int(x) for x in split[:3]]))
-            else:
-                break
-        print 'faces', len(faces)
-        return Prim(verts, faces, hu.Pose(0,0,0,0), None,
-                    name=name+str(len(prims)))
-
-    fl = open(filename)
-    assert fl.readline().split()[0] == '#VRML', 'Not VRML file?'
-    prims = []
-    while True:
-        line = fl.readline()
-        if not line: break
-        split = line.split()
-        if not split or split[0] != 'point':
-            continue
-        else:
-            print 'Object', len(prims)
-            prims.append(readOneObj())
-    # Have one "part" so that shadows are simpler
-    part = Shape(prims, None, name=name+'_part')
-    # Keep color only in top entry.
-    return Shape([part], None, name=name, color=color)
-"""
diff --git a/diffuser/diffuser/utils/rendering.py b/diffuser/diffuser/utils/rendering.py
deleted file mode 100644
index af0db9e..0000000
--- a/diffuser/diffuser/utils/rendering.py
+++ /dev/null
@@ -1,392 +0,0 @@
-import os
-import numpy as np
-import einops
-import imageio
-import matplotlib
-matplotlib.use('pdf')
-import matplotlib.pyplot as plt
-from matplotlib.colors import ListedColormap
-import gym
-import mujoco_py as mjc
-import warnings
-import pdb
-
-import sys
-sys.path.append('/root/diffuser/diffuser/utils')
-
-from .arrays import to_np
-from .video import save_video, save_videos
-
-from diffuser.datasets.d4rl import load_environment
-
-#-----------------------------------------------------------------------------#
-#------------------------------- helper structs ------------------------------#
-#-----------------------------------------------------------------------------#
-
-def env_map(env_name):
-    '''
-        map D4RL dataset names to custom fully-observed
-        variants for rendering
-    '''
-    if 'halfcheetah' in env_name:
-        return 'HalfCheetahFullObs-v2'
-    elif 'hopper' in env_name:
-        return 'HopperFullObs-v2'
-    elif 'walker2d' in env_name:
-        return 'Walker2dFullObs-v2'
-    else:
-        return env_name
-
-#-----------------------------------------------------------------------------#
-#------------------------------ helper functions -----------------------------#
-#-----------------------------------------------------------------------------#
-
-def atmost_2d(x):
-    while x.ndim > 2:
-        x = x.squeeze(0)
-    return x
-
-def zipsafe(*args):
-    length = len(args[0])
-    assert all([len(a) == length for a in args])
-    return zip(*args)
-
-def zipkw(*args, **kwargs):
-    nargs = len(args)
-    keys = kwargs.keys()
-    vals = [kwargs[k] for k in keys]
-    zipped = zipsafe(*args, *vals)
-    for items in zipped:
-        zipped_args = items[:nargs]
-        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
-        yield zipped_args, zipped_kwargs
-
-def get_image_mask(img):
-    background = (img == 255).all(axis=-1, keepdims=True)
-    mask = ~background.repeat(3, axis=-1)
-    return mask
-
-def plot2img(fig, remove_margins=True):
-    # https://stackoverflow.com/a/35362787/2912349
-    # https://stackoverflow.com/a/54334430/2912349
-
-    from matplotlib.backends.backend_agg import FigureCanvasAgg
-
-    if remove_margins:
-        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
-
-    canvas = FigureCanvasAgg(fig)
-    canvas.draw()
-    img_as_string, (width, height) = canvas.print_to_buffer()
-    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
-
-#-----------------------------------------------------------------------------#
-#---------------------------------- renderers --------------------------------#
-#-----------------------------------------------------------------------------#
-
-class MuJoCoRenderer:
-    '''
-        default mujoco renderer
-    '''
-
-    def __init__(self, env):
-        if type(env) is str:
-            env = env_map(env)
-            self.env = gym.make(env)
-        else:
-            self.env = env
-        ## - 1 because the envs in renderer are fully-observed
-        ## @TODO : clean up
-        self.observation_dim = np.prod(self.env.observation_space.shape) - 1
-        self.action_dim = np.prod(self.env.action_space.shape)
-        try:
-            self.viewer = mjc.MjRenderContextOffscreen(self.env.sim)
-        except:
-            print('[ utils/rendering ] Warning: could not initialize offscreen renderer')
-            self.viewer = None
-
-    def pad_observation(self, observation):
-        state = np.concatenate([
-            np.zeros(1),
-            observation,
-        ])
-        return state
-
-    def pad_observations(self, observations):
-        qpos_dim = self.env.sim.data.qpos.size
-        ## xpos is hidden
-        xvel_dim = qpos_dim - 1
-        xvel = observations[:, xvel_dim]
-        xpos = np.cumsum(xvel) * self.env.dt
-        states = np.concatenate([
-            xpos[:,None],
-            observations,
-        ], axis=-1)
-        return states
-
-    def render(self, observation, dim=256, partial=False, qvel=True, render_kwargs=None, conditions=None):
-
-        if type(dim) == int:
-            dim = (dim, dim)
-
-        if self.viewer is None:
-            return np.zeros((*dim, 3), np.uint8)
-
-        if render_kwargs is None:
-            xpos = observation[0] if not partial else 0
-            render_kwargs = {
-                'trackbodyid': 2,
-                'distance': 3,
-                'lookat': [xpos, -0.5, 1],
-                'elevation': -20
-            }
-
-        for key, val in render_kwargs.items():
-            if key == 'lookat':
-                self.viewer.cam.lookat[:] = val[:]
-            else:
-                setattr(self.viewer.cam, key, val)
-
-        if partial:
-            state = self.pad_observation(observation)
-        else:
-            state = observation
-
-        qpos_dim = self.env.sim.data.qpos.size
-        if not qvel or state.shape[-1] == qpos_dim:
-            qvel_dim = self.env.sim.data.qvel.size
-            state = np.concatenate([state, np.zeros(qvel_dim)])
-
-        set_state(self.env, state)
-
-        self.viewer.render(*dim)
-        data = self.viewer.read_pixels(*dim, depth=False)
-        data = data[::-1, :, :]
-        return data
-
-    def _renders(self, observations, **kwargs):
-        images = []
-        for observation in observations:
-            img = self.render(observation, **kwargs)
-            images.append(img)
-        return np.stack(images, axis=0)
-
-    def renders(self, samples, partial=False, **kwargs):
-        if partial:
-            samples = self.pad_observations(samples)
-            partial = False
-
-        sample_images = self._renders(samples, partial=partial, **kwargs)
-
-        composite = np.ones_like(sample_images[0]) * 255
-
-        for img in sample_images:
-            mask = get_image_mask(img)
-            composite[mask] = img[mask]
-
-        return composite
-
-    def composite(self, savepath, paths, dim=(1024, 256), **kwargs):
-
-        render_kwargs = {
-            'trackbodyid': 2,
-            'distance': 10,
-            'lookat': [5, 2, 0.5],
-            'elevation': 0
-        }
-        images = []
-        for path in paths:
-            ## [ H x obs_dim ]
-            path = atmost_2d(path)
-            img = self.renders(to_np(path), dim=dim, partial=True, qvel=True, render_kwargs=render_kwargs, **kwargs)
-            images.append(img)
-        images = np.concatenate(images, axis=0)
-
-        if savepath is not None:
-            imageio.imsave(savepath, images)
-            print(f'Saved {len(paths)} samples to: {savepath}')
-
-        return images
-
-    def render_rollout(self, savepath, states, **video_kwargs):
-        if type(states) is list: states = np.array(states)
-        images = self._renders(states, partial=True)
-        save_video(savepath, images, **video_kwargs)
-
-    def render_plan(self, savepath, actions, observations_pred, state, fps=30):
-        ## [ batch_size x horizon x observation_dim ]
-        observations_real = rollouts_from_state(self.env, state, actions)
-
-        ## there will be one more state in `observations_real`
-        ## than in `observations_pred` because the last action
-        ## does not have an associated next_state in the sampled trajectory
-        observations_real = observations_real[:,:-1]
-
-        images_pred = np.stack([
-            self._renders(obs_pred, partial=True)
-            for obs_pred in observations_pred
-        ])
-
-        images_real = np.stack([
-            self._renders(obs_real, partial=False)
-            for obs_real in observations_real
-        ])
-
-        ## [ batch_size x horizon x H x W x C ]
-        images = np.concatenate([images_pred, images_real], axis=-2)
-        save_videos(savepath, *images)
-
-    def render_diffusion(self, savepath, diffusion_path, **video_kwargs):
-        '''
-            diffusion_path : [ n_diffusion_steps x batch_size x 1 x horizon x joined_dim ]
-        '''
-        render_kwargs = {
-            'trackbodyid': 2,
-            'distance': 10,
-            'lookat': [10, 2, 0.5],
-            'elevation': 0,
-        }
-
-        diffusion_path = to_np(diffusion_path)
-
-        n_diffusion_steps, batch_size, _, horizon, joined_dim = diffusion_path.shape
-
-        frames = []
-        for t in reversed(range(n_diffusion_steps)):
-            print(f'[ utils/renderer ] Diffusion: {t} / {n_diffusion_steps}')
-
-            ## [ batch_size x horizon x observation_dim ]
-            states_l = diffusion_path[t].reshape(batch_size, horizon, joined_dim)[:, :, :self.observation_dim]
-
-            frame = []
-            for states in states_l:
-                img = self.composite(None, states, dim=(1024, 256), partial=True, qvel=True, render_kwargs=render_kwargs)
-                frame.append(img)
-            frame = np.concatenate(frame, axis=0)
-
-            frames.append(frame)
-
-        save_video(savepath, frames, **video_kwargs)
-
-    def __call__(self, *args, **kwargs):
-        return self.renders(*args, **kwargs)
-
-#-----------------------------------------------------------------------------#
-#----------------------------------- maze2d ----------------------------------#
-#-----------------------------------------------------------------------------#
-
-MAZE_BOUNDS = {
-    'maze2d-umaze-v1': (0, 5, 0, 5),
-    'maze2d-medium-v1': (0, 8, 0, 8),
-    'maze2d-large-v1': (0, 9, 0, 12)
-}
-
-class MazeRenderer:
-
-    def __init__(self, env):
-        if type(env) is str: env = load_environment(env)
-        self._config = env._config
-        self._background = self._config != ' '
-        self._remove_margins = False
-        self._extent = (0, 1, 1, 0)
-
-    def renders(self, observations, conditions=None, title=None):
-        plt.clf()
-        fig = plt.gcf()
-        fig.set_size_inches(5, 5)
-        plt.imshow(self._background * .5,
-            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
-
-        path_length = len(observations)
-        colors = plt.cm.jet(np.linspace(0,1,path_length))
-        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
-        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
-        plt.axis('off')
-        plt.title(title)
-        img = plot2img(fig, remove_margins=self._remove_margins)
-        return img
-
-    def composite(self, savepath, paths, ncol=5, **kwargs):
-        '''
-            savepath : str
-            observations : [ n_paths x horizon x 2 ]
-        '''
-        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
-
-        images = []
-        for path, kw in zipkw(paths, **kwargs):
-            img = self.renders(*path, **kw)
-            images.append(img)
-        images = np.stack(images, axis=0)
-
-        nrow = len(images) // ncol
-        images = einops.rearrange(images,
-            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
-        imageio.imsave(savepath, images)
-        print(f'Saved {len(paths)} samples to: {savepath}')
-
-class Maze2dRenderer(MazeRenderer):
-
-    def __init__(self, env, observation_dim=None):
-        self.env_name = env
-        self.env = load_environment(env)
-        self.observation_dim = np.prod(self.env.observation_space.shape)
-        self.action_dim = np.prod(self.env.action_space.shape)
-        self.goal = None
-        self._background = self.env.maze_arr == 10
-        self._remove_margins = False
-        self._extent = (0, 1, 1, 0)
-
-    def renders(self, observations, conditions=None, **kwargs):
-        bounds = MAZE_BOUNDS[self.env_name]
-
-        observations = observations + .5
-        if len(bounds) == 2:
-            _, scale = bounds
-            observations /= scale
-        elif len(bounds) == 4:
-            _, iscale, _, jscale = bounds
-            observations[:, 0] /= iscale
-            observations[:, 1] /= jscale
-        else:
-            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
-
-        if conditions is not None:
-            conditions /= scale
-        return super().renders(observations, conditions, **kwargs)
-
-#-----------------------------------------------------------------------------#
-#---------------------------------- rollouts ---------------------------------#
-#-----------------------------------------------------------------------------#
-
-def set_state(env, state):
-    qpos_dim = env.sim.data.qpos.size
-    qvel_dim = env.sim.data.qvel.size
-    if not state.size == qpos_dim + qvel_dim:
-        warnings.warn(
-            f'[ utils/rendering ] Expected state of size {qpos_dim + qvel_dim}, '
-            f'but got state of size {state.size}')
-        state = state[:qpos_dim + qvel_dim]
-
-    env.set_state(state[:qpos_dim], state[qpos_dim:])
-
-def rollouts_from_state(env, state, actions_l):
-    rollouts = np.stack([
-        rollout_from_state(env, state, actions)
-        for actions in actions_l
-    ])
-    return rollouts
-
-def rollout_from_state(env, state, actions):
-    qpos_dim = env.sim.data.qpos.size
-    env.set_state(state[:qpos_dim], state[qpos_dim:])
-    observations = [env._get_obs()]
-    for act in actions:
-        obs, rew, term, _ = env.step(act)
-        observations.append(obs)
-        if term:
-            break
-    for i in range(len(observations), len(actions)+1):
-        ## if terminated early, pad with zeros
-        observations.append( np.zeros(obs.size) )
-    return np.stack(observations)
diff --git a/diffuser/diffuser/utils/serialization.py b/diffuser/diffuser/utils/serialization.py
deleted file mode 100644
index 6cc9db9..0000000
--- a/diffuser/diffuser/utils/serialization.py
+++ /dev/null
@@ -1,60 +0,0 @@
-import os
-import pickle
-import glob
-import torch
-import pdb
-
-from collections import namedtuple
-
-DiffusionExperiment = namedtuple('Diffusion', 'dataset renderer model diffusion ema trainer epoch')
-
-def mkdir(savepath):
-    """
-        returns `True` iff `savepath` is created
-    """
-    if not os.path.exists(savepath):
-        os.makedirs(savepath)
-        return True
-    else:
-        return False
-
-def get_latest_epoch(loadpath):
-    states = glob.glob1(os.path.join(*loadpath), 'state_*')
-    latest_epoch = -1
-    for state in states:
-        epoch = int(state.replace('state_', '').replace('.pt', ''))
-        latest_epoch = max(epoch, latest_epoch)
-    return latest_epoch
-
-def load_config(*loadpath):
-    loadpath = os.path.join(*loadpath)
-    config = pickle.load(open(loadpath, 'rb'))
-    print(f'[ utils/serialization ] Loaded config from {loadpath}')
-    print(config)
-    return config
-
-def load_diffusion(*loadpath, epoch='latest', device='cuda:0'):
-    dataset_config = load_config(*loadpath, 'dataset_config.pkl')
-    render_config = load_config(*loadpath, 'render_config.pkl')
-    model_config = load_config(*loadpath, 'model_config.pkl')
-    diffusion_config = load_config(*loadpath, 'diffusion_config.pkl')
-    trainer_config = load_config(*loadpath, 'trainer_config.pkl')
-
-    ## remove absolute path for results loaded from azure
-    ## @TODO : remove results folder from within trainer class
-    trainer_config._dict['results_folder'] = os.path.join(*loadpath)
-
-    dataset = dataset_config()
-    renderer = render_config()
-    model = model_config()
-    diffusion = diffusion_config(model)
-    trainer = trainer_config(diffusion, dataset, renderer)
-
-    if epoch == 'latest':
-        epoch = get_latest_epoch(loadpath)
-
-    print(f'\n[ utils/serialization ] Loading model epoch: {epoch}\n')
-
-    trainer.load(epoch)
-
-    return DiffusionExperiment(dataset, renderer, model, diffusion, trainer.ema_model, trainer, epoch)
diff --git a/diffuser/diffuser/utils/setup.py b/diffuser/diffuser/utils/setup.py
deleted file mode 100644
index e251743..0000000
--- a/diffuser/diffuser/utils/setup.py
+++ /dev/null
@@ -1,159 +0,0 @@
-import os
-import importlib
-import random
-import numpy as np
-import torch
-from tap import Tap
-import pdb
-
-from .serialization import mkdir
-from .git_utils import (
-    get_git_rev,
-    save_git_diff,
-)
-
-def set_seed(seed):
-    random.seed(seed)
-    np.random.seed(seed)
-    torch.manual_seed(seed)
-    torch.cuda.manual_seed_all(seed)
-
-def watch(args_to_watch):
-    def _fn(args):
-        exp_name = []
-        for key, label in args_to_watch:
-            if not hasattr(args, key):
-                continue
-            val = getattr(args, key)
-            if type(val) == dict:
-                val = '_'.join(f'{k}-{v}' for k, v in val.items())
-            exp_name.append(f'{label}{val}')
-        exp_name = '_'.join(exp_name)
-        exp_name = exp_name.replace('/_', '/')
-        exp_name = exp_name.replace('(', '').replace(')', '')
-        exp_name = exp_name.replace(', ', '-')
-        return exp_name
-    return _fn
-
-def lazy_fstring(template, args):
-    ## https://stackoverflow.com/a/53671539
-    return eval(f"f'{template}'")
-
-class Parser(Tap):
-
-    def save(self):
-        fullpath = os.path.join(self.savepath, 'args.json')
-        print(f'[ utils/setup ] Saved args to {fullpath}')
-        super().save(fullpath, skip_unpicklable=True)
-
-    def parse_args(self, experiment=None):
-        args = super().parse_args(known_only=True)
-        ## if not loading from a config script, skip the result of the setup
-        if not hasattr(args, 'config'): return args
-        args = self.read_config(args, experiment)
-        self.add_extras(args)
-        self.eval_fstrings(args)
-        self.set_seed(args)
-        self.get_commit(args)
-        self.generate_exp_name(args)
-        self.mkdir(args)
-        self.save_diff(args)
-        return args
-
-    def read_config(self, args, experiment):
-        '''
-            Load parameters from config file
-        '''
-        dataset = args.dataset.replace('-', '_')
-        print(f'[ utils/setup ] Reading config: {args.config}:{dataset}')
-        module = importlib.import_module(args.config)
-        params = getattr(module, 'base')[experiment]
-
-        if hasattr(module, dataset) and experiment in getattr(module, dataset):
-            print(f'[ utils/setup ] Using overrides | config: {args.config} | dataset: {dataset}')
-            overrides = getattr(module, dataset)[experiment]
-            params.update(overrides)
-        else:
-            print(f'[ utils/setup ] Not using overrides | config: {args.config} | dataset: {dataset}')
-
-        self._dict = {}
-        for key, val in params.items():
-            setattr(args, key, val)
-            self._dict[key] = val
-
-        return args
-
-    def add_extras(self, args):
-        '''
-            Override config parameters with command-line arguments
-        '''
-        extras = args.extra_args
-        if not len(extras):
-            return
-
-        print(f'[ utils/setup ] Found extras: {extras}')
-        assert len(extras) % 2 == 0, f'Found odd number ({len(extras)}) of extras: {extras}'
-        for i in range(0, len(extras), 2):
-            key = extras[i].replace('--', '')
-            val = extras[i+1]
-            assert hasattr(args, key), f'[ utils/setup ] {key} not found in config: {args.config}'
-            old_val = getattr(args, key)
-            old_type = type(old_val)
-            print(f'[ utils/setup ] Overriding config | {key} : {old_val} --> {val}')
-            if val == 'None':
-                val = None
-            elif val == 'latest':
-                val = 'latest'
-            elif old_type in [bool, type(None)]:
-                try:
-                    val = eval(val)
-                except:
-                    print(f'[ utils/setup ] Warning: could not parse {val} (old: {old_val}, {old_type}), using str')
-            else:
-                val = old_type(val)
-            setattr(args, key, val)
-            self._dict[key] = val
-
-    def eval_fstrings(self, args):
-        for key, old in self._dict.items():
-            if type(old) is str and old[:2] == 'f:':
-                val = old.replace('{', '{args.').replace('f:', '')
-                new = lazy_fstring(val, args)
-                print(f'[ utils/setup ] Lazy fstring | {key} : {old} --> {new}')
-                setattr(self, key, new)
-                self._dict[key] = new
-
-    def set_seed(self, args):
-        if not 'seed' in dir(args):
-            return
-        print(f'[ utils/setup ] Setting seed: {args.seed}')
-        set_seed(args.seed)
-
-    def generate_exp_name(self, args):
-        if not 'exp_name' in dir(args):
-            return
-        exp_name = getattr(args, 'exp_name')
-        if callable(exp_name):
-            exp_name_string = exp_name(args)
-            print(f'[ utils/setup ] Setting exp_name to: {exp_name_string}')
-            setattr(args, 'exp_name', exp_name_string)
-            self._dict['exp_name'] = exp_name_string
-
-    def mkdir(self, args):
-        if 'logbase' in dir(args) and 'dataset' in dir(args) and 'exp_name' in dir(args):
-            args.savepath = os.path.join(args.logbase, args.dataset, args.exp_name)
-            self._dict['savepath'] = args.savepath
-            if 'suffix' in dir(args):
-                args.savepath = os.path.join(args.savepath, args.suffix)
-            if mkdir(args.savepath):
-                print(f'[ utils/setup ] Made savepath: {args.savepath}')
-            self.save()
-
-    def get_commit(self, args):
-        args.commit = get_git_rev()
-
-    def save_diff(self, args):
-        try:
-            save_git_diff(os.path.join(args.savepath, 'diff.txt'))
-        except:
-            print('[ utils/setup ] WARNING: did not save git diff')
diff --git a/diffuser/diffuser/utils/timer.py b/diffuser/diffuser/utils/timer.py
deleted file mode 100644
index ed463a3..0000000
--- a/diffuser/diffuser/utils/timer.py
+++ /dev/null
@@ -1,13 +0,0 @@
-import time
-
-class Timer:
-
-	def __init__(self):
-		self._start = time.time()
-
-	def __call__(self, reset=True):
-		now = time.time()
-		diff = now - self._start
-		if reset:
-			self._start = now
-		return diff
\ No newline at end of file
diff --git a/diffuser/diffuser/utils/training.py b/diffuser/diffuser/utils/training.py
deleted file mode 100644
index be3556e..0000000
--- a/diffuser/diffuser/utils/training.py
+++ /dev/null
@@ -1,247 +0,0 @@
-import os
-import copy
-import numpy as np
-import torch
-import einops
-import pdb
-
-from .arrays import batch_to_device, to_np, to_device, apply_dict
-from .timer import Timer
-from .cloud import sync_logs
-
-def cycle(dl):
-    while True:
-        for data in dl:
-            yield data
-
-class EMA():
-    '''
-        empirical moving average
-    '''
-    def __init__(self, beta):
-        super().__init__()
-        self.beta = beta
-
-    def update_model_average(self, ma_model, current_model):
-        for current_params, ma_params in zip(current_model.parameters(), ma_model.parameters()):
-            old_weight, up_weight = ma_params.data, current_params.data
-            ma_params.data = self.update_average(old_weight, up_weight)
-
-    def update_average(self, old, new):
-        if old is None:
-            return new
-        return old * self.beta + (1 - self.beta) * new
-
-class Trainer(object):
-    def __init__(
-        self,
-        diffusion_model,
-        dataset,
-        renderer,
-        ema_decay=0.995,
-        train_batch_size=32,
-        train_lr=2e-5,
-        gradient_accumulate_every=2,
-        step_start_ema=2000,
-        update_ema_every=10,
-        log_freq=100,
-        sample_freq=1000,
-        save_freq=1000,
-        label_freq=100000,
-        save_parallel=False,
-        results_folder='./results',
-        n_reference=8,
-        n_samples=2,
-        bucket=None,
-    ):
-        super().__init__()
-        self.model = diffusion_model
-        self.ema = EMA(ema_decay)
-        self.ema_model = copy.deepcopy(self.model)
-        self.update_ema_every = update_ema_every
-
-        self.step_start_ema = step_start_ema
-        self.log_freq = log_freq
-        self.sample_freq = sample_freq
-        self.save_freq = save_freq
-        self.label_freq = label_freq
-        self.save_parallel = save_parallel
-
-        self.batch_size = train_batch_size
-        self.gradient_accumulate_every = gradient_accumulate_every
-
-        self.dataset = dataset
-        self.dataloader = cycle(torch.utils.data.DataLoader(
-            self.dataset, batch_size=train_batch_size, num_workers=1, shuffle=True, pin_memory=True
-        ))
-        self.dataloader_vis = cycle(torch.utils.data.DataLoader(
-            self.dataset, batch_size=1, num_workers=0, shuffle=True, pin_memory=True
-        ))
-        self.renderer = renderer
-        self.optimizer = torch.optim.Adam(diffusion_model.parameters(), lr=train_lr)
-
-        self.logdir = results_folder
-        self.bucket = bucket
-        self.n_reference = n_reference
-        self.n_samples = n_samples
-
-        self.reset_parameters()
-        self.step = 0
-
-    def reset_parameters(self):
-        self.ema_model.load_state_dict(self.model.state_dict())
-
-    def step_ema(self):
-        if self.step < self.step_start_ema:
-            self.reset_parameters()
-            return
-        self.ema.update_model_average(self.ema_model, self.model)
-
-    #-----------------------------------------------------------------------------#
-    #------------------------------------ api ------------------------------------#
-    #-----------------------------------------------------------------------------#
-
-    def train(self, n_train_steps):
-
-        timer = Timer()
-        for step in range(n_train_steps):
-            for i in range(self.gradient_accumulate_every):
-                batch = next(self.dataloader)
-                batch = batch_to_device(batch)
-
-                loss, infos = self.model.loss(*batch)
-                loss = loss / self.gradient_accumulate_every
-                loss.backward()
-
-            self.optimizer.step()
-            self.optimizer.zero_grad()
-
-            if self.step % self.update_ema_every == 0:
-                self.step_ema()
-
-            if self.step % self.save_freq == 0:
-                label = self.step // self.label_freq * self.label_freq
-                self.save(label)
-
-            if self.step % self.log_freq == 0:
-                infos_str = ' | '.join([f'{key}: {val:8.4f}' for key, val in infos.items()])
-                print(f'{self.step}: {loss:8.4f} | {infos_str} | t: {timer():8.4f}')
-
-            if self.step == 0 and self.sample_freq:
-                self.render_reference(self.n_reference)
-
-            if self.sample_freq and self.step % self.sample_freq == 0:
-                self.render_samples(n_samples=self.n_samples)
-
-            self.step += 1
-
-    def save(self, epoch):
-        '''
-            saves model and ema to disk;
-            syncs to storage bucket if a bucket is specified
-        '''
-        data = {
-            'step': self.step,
-            'model': self.model.state_dict(),
-            'ema': self.ema_model.state_dict()
-        }
-        savepath = os.path.join(self.logdir, f'state_{epoch}.pt')
-        torch.save(data, savepath)
-        print(f'[ utils/training ] Saved model to {savepath}')
-        if self.bucket is not None:
-            sync_logs(self.logdir, bucket=self.bucket, background=self.save_parallel)
-
-    def load(self, epoch):
-        '''
-            loads model and ema from disk
-        '''
-        loadpath = os.path.join(self.logdir, f'state_{epoch}.pt')
-        data = torch.load(loadpath)
-
-        self.step = data['step']
-        self.model.load_state_dict(data['model'])
-        self.ema_model.load_state_dict(data['ema'])
-
-    #-----------------------------------------------------------------------------#
-    #--------------------------------- rendering ---------------------------------#
-    #-----------------------------------------------------------------------------#
-
-    def render_reference(self, batch_size=10):
-        '''
-            renders training points
-        '''
-
-        ## get a temporary dataloader to load a single batch
-        dataloader_tmp = cycle(torch.utils.data.DataLoader(
-            self.dataset, batch_size=batch_size, num_workers=0, shuffle=True, pin_memory=True
-        ))
-        batch = dataloader_tmp.__next__()
-        dataloader_tmp.close()
-
-        ## get trajectories and condition at t=0 from batch
-        trajectories = to_np(batch.trajectories)
-        conditions = to_np(batch.conditions[0])[:,None]
-
-        ## [ batch_size x horizon x observation_dim ]
-        normed_observations = trajectories[:, :, self.dataset.action_dim:]
-        observations = self.dataset.normalizer.unnormalize(normed_observations, 'observations')
-
-        # from diffusion.datasets.preprocessing import blocks_cumsum_quat
-        # # observations = conditions + blocks_cumsum_quat(deltas)
-        # observations = conditions + deltas.cumsum(axis=1)
-
-        #### @TODO: remove block-stacking specific stuff
-        # from diffusion.datasets.preprocessing import blocks_euler_to_quat, blocks_add_kuka
-        # observations = blocks_add_kuka(observations)
-        ####
-
-        savepath = os.path.join(self.logdir, f'_sample-reference.png')
-        self.renderer.composite(savepath, observations)
-
-    def render_samples(self, batch_size=2, n_samples=2):
-        '''
-            renders samples from (ema) diffusion model
-        '''
-        for i in range(batch_size):
-
-            ## get a single datapoint
-            batch = self.dataloader_vis.__next__()
-            conditions = to_device(batch.conditions, 'cuda:0')
-
-            ## repeat each item in conditions `n_samples` times
-            conditions = apply_dict(
-                einops.repeat,
-                conditions,
-                'b d -> (repeat b) d', repeat=n_samples,
-            )
-
-            ## [ n_samples x horizon x (action_dim + observation_dim) ]
-            samples = self.ema_model.conditional_sample(conditions)
-            samples = to_np(samples)
-
-            ## [ n_samples x horizon x observation_dim ]
-            normed_observations = samples[:, :, self.dataset.action_dim:]
-
-            # [ 1 x 1 x observation_dim ]
-            normed_conditions = to_np(batch.conditions[0])[:,None]
-
-            # from diffusion.datasets.preprocessing import blocks_cumsum_quat
-            # observations = conditions + blocks_cumsum_quat(deltas)
-            # observations = conditions + deltas.cumsum(axis=1)
-
-            ## [ n_samples x (horizon + 1) x observation_dim ]
-            normed_observations = np.concatenate([
-                np.repeat(normed_conditions, n_samples, axis=0),
-                normed_observations
-            ], axis=1)
-
-            ## [ n_samples x (horizon + 1) x observation_dim ]
-            observations = self.dataset.normalizer.unnormalize(normed_observations, 'observations')
-
-            #### @TODO: remove block-stacking specific stuff
-            # from diffusion.datasets.preprocessing import blocks_euler_to_quat, blocks_add_kuka
-            # observations = blocks_add_kuka(observations)
-            ####
-
-            savepath = os.path.join(self.logdir, f'sample-{self.step}-{i}.png')
-            self.renderer.composite(savepath, observations)
diff --git a/diffuser/diffuser/utils/transformations.py b/diffuser/diffuser/utils/transformations.py
deleted file mode 100644
index 0161303..0000000
--- a/diffuser/diffuser/utils/transformations.py
+++ /dev/null
@@ -1,1573 +0,0 @@
-# -*- coding: utf-8 -*-
-# transformations.py
-
-# Copyright (c) 2006, Christoph Gohlke
-# Copyright (c) 2006-2009, The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are met:
-#
-# * Redistributions of source code must retain the above copyright
-#   notice, this list of conditions and the following disclaimer.
-# * Redistributions in binary form must reproduce the above copyright
-#   notice, this list of conditions and the following disclaimer in the
-#   documentation and/or other materials provided with the distribution.
-# * Neither the name of the copyright holders nor the names of any
-#   contributors may be used to endorse or promote products derived
-#   from this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
-# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-# POSSIBILITY OF SUCH DAMAGE.
-
-"""Homogeneous Transformation Matrices and Quaternions.
-A library for calculating 4x4 matrices for translating, rotating, reflecting,
-scaling, shearing, projecting, orthogonalizing, and superimposing arrays of
-3D homogeneous coordinates as well as for converting between rotation matrices,
-Euler angles, and quaternions. Also includes an Arcball control object and
-functions to decompose transformation matrices.
-:Authors:
-  `Christoph Gohlke <http://www.lfd.uci.edu/~gohlke/>`__,
-  Laboratory for Fluorescence Dynamics, University of California, Irvine
-:Version: 20090418
-Requirements
-------------
-* `Python 2.6 <http://www.python.org>`__
-* `Numpy 1.3 <http://numpy.scipy.org>`__
-* `transformations.c 20090418 <http://www.lfd.uci.edu/~gohlke/>`__
-  (optional implementation of some functions in C)
-Notes
------
-Matrices (M) can be inverted using numpy.linalg.inv(M), concatenated using
-numpy.dot(M0, M1), or used to transform homogeneous coordinates (v) using
-numpy.dot(M, v) for shape (4, \*) "point of arrays", respectively
-numpy.dot(v, M.T) for shape (\*, 4) "array of points".
-Calculations are carried out with numpy.float64 precision.
-This Python implementation is not optimized for speed.
-Vector, point, quaternion, and matrix function arguments are expected to be
-"array like", i.e. tuple, list, or numpy arrays.
-Return types are numpy arrays unless specified otherwise.
-Angles are in radians unless specified otherwise.
-Quaternions ix+jy+kz+w are represented as [x, y, z, w].
-Use the transpose of transformation matrices for OpenGL glMultMatrixd().
-A triple of Euler angles can be applied/interpreted in 24 ways, which can
-be specified using a 4 character string or encoded 4-tuple:
-  *Axes 4-string*: e.g. 'sxyz' or 'ryxy'
-  - first character : rotations are applied to 's'tatic or 'r'otating frame
-  - remaining characters : successive rotation axis 'x', 'y', or 'z'
-  *Axes 4-tuple*: e.g. (0, 0, 0, 0) or (1, 1, 1, 1)
-  - inner axis: code of axis ('x':0, 'y':1, 'z':2) of rightmost matrix.
-  - parity : even (0) if inner axis 'x' is followed by 'y', 'y' is followed
-    by 'z', or 'z' is followed by 'x'. Otherwise odd (1).
-  - repetition : first and last axis are same (1) or different (0).
-  - frame : rotations are applied to static (0) or rotating (1) frame.
-References
-----------
-(1)  Matrices and transformations. Ronald Goldman.
-     In "Graphics Gems I", pp 472-475. Morgan Kaufmann, 1990.
-(2)  More matrices and transformations: shear and pseudo-perspective.
-     Ronald Goldman. In "Graphics Gems II", pp 320-323. Morgan Kaufmann, 1991.
-(3)  Decomposing a matrix into simple transformations. Spencer Thomas.
-     In "Graphics Gems II", pp 320-323. Morgan Kaufmann, 1991.
-(4)  Recovering the data from the transformation matrix. Ronald Goldman.
-     In "Graphics Gems II", pp 324-331. Morgan Kaufmann, 1991.
-(5)  Euler angle conversion. Ken Shoemake.
-     In "Graphics Gems IV", pp 222-229. Morgan Kaufmann, 1994.
-(6)  Arcball rotation control. Ken Shoemake.
-     In "Graphics Gems IV", pp 175-192. Morgan Kaufmann, 1994.
-(7)  Representing attitude: Euler angles, unit quaternions, and rotation
-     vectors. James Diebel. 2006.
-(8)  A discussion of the solution for the best rotation to relate two sets
-     of vectors. W Kabsch. Acta Cryst. 1978. A34, 827-828.
-(9)  Closed-form solution of absolute orientation using unit quaternions.
-     BKP Horn. J Opt Soc Am A. 1987. 4(4), 629-642.
-(10) Quaternions. Ken Shoemake.
-     http://www.sfu.ca/~jwa3/cmpt461/files/quatut.pdf
-(11) From quaternion to matrix and back. JMP van Waveren. 2005.
-     http://www.intel.com/cd/ids/developer/asmo-na/eng/293748.htm
-(12) Uniform random rotations. Ken Shoemake.
-     In "Graphics Gems III", pp 124-132. Morgan Kaufmann, 1992.
-Examples
---------
->>> alpha, beta, gamma = 0.123, -1.234, 2.345
->>> origin, xaxis, yaxis, zaxis = (0, 0, 0), (1, 0, 0), (0, 1, 0), (0, 0, 1)
->>> I = identity_matrix()
->>> Rx = rotation_matrix(alpha, xaxis)
->>> Ry = rotation_matrix(beta, yaxis)
->>> Rz = rotation_matrix(gamma, zaxis)
->>> R = concatenate_matrices(Rx, Ry, Rz)
->>> euler = euler_from_matrix(R, 'rxyz')
->>> numpy.allclose([alpha, beta, gamma], euler)
-True
->>> Re = euler_matrix(alpha, beta, gamma, 'rxyz')
->>> is_same_transform(R, Re)
-True
->>> al, be, ga = euler_from_matrix(Re, 'rxyz')
->>> is_same_transform(Re, euler_matrix(al, be, ga, 'rxyz'))
-True
->>> qx = quaternion_about_axis(alpha, xaxis)
->>> qy = quaternion_about_axis(beta, yaxis)
->>> qz = quaternion_about_axis(gamma, zaxis)
->>> q = quaternion_multiply(qx, qy)
->>> q = quaternion_multiply(q, qz)
->>> Rq = quaternion_matrix(q)
->>> is_same_transform(R, Rq)
-True
->>> S = scale_matrix(1.23, origin)
->>> T = translation_matrix((1, 2, 3))
->>> Z = shear_matrix(beta, xaxis, origin, zaxis)
->>> R = random_rotation_matrix(numpy.random.rand(3))
->>> M = concatenate_matrices(T, R, Z, S)
->>> scale, shear, angles, trans, persp = decompose_matrix(M)
->>> numpy.allclose(scale, 1.23)
-True
->>> numpy.allclose(trans, (1, 2, 3))
-True
->>> numpy.allclose(shear, (0, math.tan(beta), 0))
-True
->>> is_same_transform(R, euler_matrix(axes='sxyz', *angles))
-True
->>> M1 = compose_matrix(scale, shear, angles, trans, persp)
->>> is_same_transform(M, M1)
-True
-"""
-
-from __future__ import division
-
-import warnings
-import math
-
-import numpy
-
-# Documentation in HTML format can be generated with Epydoc
-__docformat__ = "restructuredtext en"
-
-
-def identity_matrix():
-    """Return 4x4 identity/unit matrix.
-    >>> I = identity_matrix()
-    >>> numpy.allclose(I, numpy.dot(I, I))
-    True
-    >>> numpy.sum(I), numpy.trace(I)
-    (4.0, 4.0)
-    >>> numpy.allclose(I, numpy.identity(4, dtype=numpy.float64))
-    True
-    """
-    return numpy.identity(4, dtype=numpy.float64)
-
-
-def translation_matrix(direction):
-    """Return matrix to translate by direction vector.
-    >>> v = numpy.random.random(3) - 0.5
-    >>> numpy.allclose(v, translation_matrix(v)[:3, 3])
-    True
-    """
-    M = numpy.identity(4)
-    M[:3, 3] = direction[:3]
-    return M
-
-
-def translation_from_matrix(matrix):
-    """Return translation vector from translation matrix.
-    >>> v0 = numpy.random.random(3) - 0.5
-    >>> v1 = translation_from_matrix(translation_matrix(v0))
-    >>> numpy.allclose(v0, v1)
-    True
-    """
-    return numpy.array(matrix, copy=False)[:3, 3].copy()
-
-
-def reflection_matrix(point, normal):
-    """Return matrix to mirror at plane defined by point and normal vector.
-    >>> v0 = numpy.random.random(4) - 0.5
-    >>> v0[3] = 1.0
-    >>> v1 = numpy.random.random(3) - 0.5
-    >>> R = reflection_matrix(v0, v1)
-    >>> numpy.allclose(2., numpy.trace(R))
-    True
-    >>> numpy.allclose(v0, numpy.dot(R, v0))
-    True
-    >>> v2 = v0.copy()
-    >>> v2[:3] += v1
-    >>> v3 = v0.copy()
-    >>> v2[:3] -= v1
-    >>> numpy.allclose(v2, numpy.dot(R, v3))
-    True
-    """
-    normal = unit_vector(normal[:3])
-    M = numpy.identity(4)
-    M[:3, :3] -= 2.0 * numpy.outer(normal, normal)
-    M[:3, 3] = (2.0 * numpy.dot(point[:3], normal)) * normal
-    return M
-
-
-def reflection_from_matrix(matrix):
-    """Return mirror plane point and normal vector from reflection matrix.
-    >>> v0 = numpy.random.random(3) - 0.5
-    >>> v1 = numpy.random.random(3) - 0.5
-    >>> M0 = reflection_matrix(v0, v1)
-    >>> point, normal = reflection_from_matrix(M0)
-    >>> M1 = reflection_matrix(point, normal)
-    >>> is_same_transform(M0, M1)
-    True
-    """
-    M = numpy.array(matrix, dtype=numpy.float64, copy=False)
-    # normal: unit eigenvector corresponding to eigenvalue -1
-    l, V = numpy.linalg.eig(M[:3, :3])
-    i = numpy.where(abs(numpy.real(l) + 1.0) < 1e-8)[0]
-    if not len(i):
-        raise ValueError("no unit eigenvector corresponding to eigenvalue -1")
-    normal = numpy.real(V[:, i[0]]).squeeze()
-    # point: any unit eigenvector corresponding to eigenvalue 1
-    l, V = numpy.linalg.eig(M)
-    i = numpy.where(abs(numpy.real(l) - 1.0) < 1e-8)[0]
-    if not len(i):
-        raise ValueError("no unit eigenvector corresponding to eigenvalue 1")
-    point = numpy.real(V[:, i[-1]]).squeeze()
-    point /= point[3]
-    return point, normal
-
-
-def rotation_matrix(angle, direction, point=None):
-    """Return matrix to rotate about axis defined by point and direction.
-    >>> angle = (random.random() - 0.5) * (2*math.pi)
-    >>> direc = numpy.random.random(3) - 0.5
-    >>> point = numpy.random.random(3) - 0.5
-    >>> R0 = rotation_matrix(angle, direc, point)
-    >>> R1 = rotation_matrix(angle-2*math.pi, direc, point)
-    >>> is_same_transform(R0, R1)
-    True
-    >>> R0 = rotation_matrix(angle, direc, point)
-    >>> R1 = rotation_matrix(-angle, -direc, point)
-    >>> is_same_transform(R0, R1)
-    True
-    >>> I = numpy.identity(4, numpy.float64)
-    >>> numpy.allclose(I, rotation_matrix(math.pi*2, direc))
-    True
-    >>> numpy.allclose(2., numpy.trace(rotation_matrix(math.pi/2,
-    ...                                                direc, point)))
-    True
-    """
-    sina = math.sin(angle)
-    cosa = math.cos(angle)
-    direction = unit_vector(direction[:3])
-    # rotation matrix around unit vector
-    R = numpy.array(((cosa, 0.0,  0.0),
-                     (0.0,  cosa, 0.0),
-                     (0.0,  0.0,  cosa)), dtype=numpy.float64)
-    R += numpy.outer(direction, direction) * (1.0 - cosa)
-    direction *= sina
-    R += numpy.array((( 0.0,         -direction[2],  direction[1]),
-                      ( direction[2], 0.0,          -direction[0]),
-                      (-direction[1], direction[0],  0.0)),
-                     dtype=numpy.float64)
-    M = numpy.identity(4)
-    M[:3, :3] = R
-    if point is not None:
-        # rotation not around origin
-        point = numpy.array(point[:3], dtype=numpy.float64, copy=False)
-        M[:3, 3] = point - numpy.dot(R, point)
-    return M
-
-
-def rotation_from_matrix(matrix):
-    """Return rotation angle and axis from rotation matrix.
-    >>> angle = (random.random() - 0.5) * (2*math.pi)
-    >>> direc = numpy.random.random(3) - 0.5
-    >>> point = numpy.random.random(3) - 0.5
-    >>> R0 = rotation_matrix(angle, direc, point)
-    >>> angle, direc, point = rotation_from_matrix(R0)
-    >>> R1 = rotation_matrix(angle, direc, point)
-    >>> is_same_transform(R0, R1)
-    True
-    """
-    R = numpy.array(matrix, dtype=numpy.float64, copy=False)
-    R33 = R[:3, :3]
-    # direction: unit eigenvector of R33 corresponding to eigenvalue of 1
-    l, W = numpy.linalg.eig(R33.T)
-    i = numpy.where(abs(numpy.real(l) - 1.0) < 1e-8)[0]
-    if not len(i):
-        raise ValueError("no unit eigenvector corresponding to eigenvalue 1")
-    direction = numpy.real(W[:, i[-1]]).squeeze()
-    # point: unit eigenvector of R33 corresponding to eigenvalue of 1
-    l, Q = numpy.linalg.eig(R)
-    i = numpy.where(abs(numpy.real(l) - 1.0) < 1e-8)[0]
-    if not len(i):
-        raise ValueError("no unit eigenvector corresponding to eigenvalue 1")
-    point = numpy.real(Q[:, i[-1]]).squeeze()
-    point /= point[3]
-    # rotation angle depending on direction
-    cosa = (numpy.trace(R33) - 1.0) / 2.0
-    if abs(direction[2]) > 1e-8:
-        sina = (R[1, 0] + (cosa-1.0)*direction[0]*direction[1]) / direction[2]
-    elif abs(direction[1]) > 1e-8:
-        sina = (R[0, 2] + (cosa-1.0)*direction[0]*direction[2]) / direction[1]
-    else:
-        sina = (R[2, 1] + (cosa-1.0)*direction[1]*direction[2]) / direction[0]
-    angle = math.atan2(sina, cosa)
-    return angle, direction, point
-
-
-def scale_matrix(factor, origin=None, direction=None):
-    """Return matrix to scale by factor around origin in direction.
-    Use factor -1 for point symmetry.
-    >>> v = (numpy.random.rand(4, 5) - 0.5) * 20.0
-    >>> v[3] = 1.0
-    >>> S = scale_matrix(-1.234)
-    >>> numpy.allclose(numpy.dot(S, v)[:3], -1.234*v[:3])
-    True
-    >>> factor = random.random() * 10 - 5
-    >>> origin = numpy.random.random(3) - 0.5
-    >>> direct = numpy.random.random(3) - 0.5
-    >>> S = scale_matrix(factor, origin)
-    >>> S = scale_matrix(factor, origin, direct)
-    """
-    if direction is None:
-        # uniform scaling
-        M = numpy.array(((factor, 0.0,    0.0,    0.0),
-                         (0.0,    factor, 0.0,    0.0),
-                         (0.0,    0.0,    factor, 0.0),
-                         (0.0,    0.0,    0.0,    1.0)), dtype=numpy.float64)
-        if origin is not None:
-            M[:3, 3] = origin[:3]
-            M[:3, 3] *= 1.0 - factor
-    else:
-        # nonuniform scaling
-        direction = unit_vector(direction[:3])
-        factor = 1.0 - factor
-        M = numpy.identity(4)
-        M[:3, :3] -= factor * numpy.outer(direction, direction)
-        if origin is not None:
-            M[:3, 3] = (factor * numpy.dot(origin[:3], direction)) * direction
-    return M
-
-
-def scale_from_matrix(matrix):
-    """Return scaling factor, origin and direction from scaling matrix.
-    >>> factor = random.random() * 10 - 5
-    >>> origin = numpy.random.random(3) - 0.5
-    >>> direct = numpy.random.random(3) - 0.5
-    >>> S0 = scale_matrix(factor, origin)
-    >>> factor, origin, direction = scale_from_matrix(S0)
-    >>> S1 = scale_matrix(factor, origin, direction)
-    >>> is_same_transform(S0, S1)
-    True
-    >>> S0 = scale_matrix(factor, origin, direct)
-    >>> factor, origin, direction = scale_from_matrix(S0)
-    >>> S1 = scale_matrix(factor, origin, direction)
-    >>> is_same_transform(S0, S1)
-    True
-    """
-    M = numpy.array(matrix, dtype=numpy.float64, copy=False)
-    M33 = M[:3, :3]
-    factor = numpy.trace(M33) - 2.0
-    try:
-        # direction: unit eigenvector corresponding to eigenvalue factor
-        l, V = numpy.linalg.eig(M33)
-        i = numpy.where(abs(numpy.real(l) - factor) < 1e-8)[0][0]
-        direction = numpy.real(V[:, i]).squeeze()
-        direction /= vector_norm(direction)
-    except IndexError:
-        # uniform scaling
-        factor = (factor + 2.0) / 3.0
-        direction = None
-    # origin: any eigenvector corresponding to eigenvalue 1
-    l, V = numpy.linalg.eig(M)
-    i = numpy.where(abs(numpy.real(l) - 1.0) < 1e-8)[0]
-    if not len(i):
-        raise ValueError("no eigenvector corresponding to eigenvalue 1")
-    origin = numpy.real(V[:, i[-1]]).squeeze()
-    origin /= origin[3]
-    return factor, origin, direction
-
-
-def projection_matrix(point, normal, direction=None,
-                      perspective=None, pseudo=False):
-    """Return matrix to project onto plane defined by point and normal.
-    Using either perspective point, projection direction, or none of both.
-    If pseudo is True, perspective projections will preserve relative depth
-    such that Perspective = dot(Orthogonal, PseudoPerspective).
-    >>> P = projection_matrix((0, 0, 0), (1, 0, 0))
-    >>> numpy.allclose(P[1:, 1:], numpy.identity(4)[1:, 1:])
-    True
-    >>> point = numpy.random.random(3) - 0.5
-    >>> normal = numpy.random.random(3) - 0.5
-    >>> direct = numpy.random.random(3) - 0.5
-    >>> persp = numpy.random.random(3) - 0.5
-    >>> P0 = projection_matrix(point, normal)
-    >>> P1 = projection_matrix(point, normal, direction=direct)
-    >>> P2 = projection_matrix(point, normal, perspective=persp)
-    >>> P3 = projection_matrix(point, normal, perspective=persp, pseudo=True)
-    >>> is_same_transform(P2, numpy.dot(P0, P3))
-    True
-    >>> P = projection_matrix((3, 0, 0), (1, 1, 0), (1, 0, 0))
-    >>> v0 = (numpy.random.rand(4, 5) - 0.5) * 20.0
-    >>> v0[3] = 1.0
-    >>> v1 = numpy.dot(P, v0)
-    >>> numpy.allclose(v1[1], v0[1])
-    True
-    >>> numpy.allclose(v1[0], 3.0-v1[1])
-    True
-    """
-    M = numpy.identity(4)
-    point = numpy.array(point[:3], dtype=numpy.float64, copy=False)
-    normal = unit_vector(normal[:3])
-    if perspective is not None:
-        # perspective projection
-        perspective = numpy.array(perspective[:3], dtype=numpy.float64,
-                                  copy=False)
-        M[0, 0] = M[1, 1] = M[2, 2] = numpy.dot(perspective-point, normal)
-        M[:3, :3] -= numpy.outer(perspective, normal)
-        if pseudo:
-            # preserve relative depth
-            M[:3, :3] -= numpy.outer(normal, normal)
-            M[:3, 3] = numpy.dot(point, normal) * (perspective+normal)
-        else:
-            M[:3, 3] = numpy.dot(point, normal) * perspective
-        M[3, :3] = -normal
-        M[3, 3] = numpy.dot(perspective, normal)
-    elif direction is not None:
-        # parallel projection
-        direction = numpy.array(direction[:3], dtype=numpy.float64, copy=False)
-        scale = numpy.dot(direction, normal)
-        M[:3, :3] -= numpy.outer(direction, normal) / scale
-        M[:3, 3] = direction * (numpy.dot(point, normal) / scale)
-    else:
-        # orthogonal projection
-        M[:3, :3] -= numpy.outer(normal, normal)
-        M[:3, 3] = numpy.dot(point, normal) * normal
-    return M
-
-
-def projection_from_matrix(matrix, pseudo=False):
-    """Return projection plane and perspective point from projection matrix.
-    Return values are same as arguments for projection_matrix function:
-    point, normal, direction, perspective, and pseudo.
-    >>> point = numpy.random.random(3) - 0.5
-    >>> normal = numpy.random.random(3) - 0.5
-    >>> direct = numpy.random.random(3) - 0.5
-    >>> persp = numpy.random.random(3) - 0.5
-    >>> P0 = projection_matrix(point, normal)
-    >>> result = projection_from_matrix(P0)
-    >>> P1 = projection_matrix(*result)
-    >>> is_same_transform(P0, P1)
-    True
-    >>> P0 = projection_matrix(point, normal, direct)
-    >>> result = projection_from_matrix(P0)
-    >>> P1 = projection_matrix(*result)
-    >>> is_same_transform(P0, P1)
-    True
-    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=False)
-    >>> result = projection_from_matrix(P0, pseudo=False)
-    >>> P1 = projection_matrix(*result)
-    >>> is_same_transform(P0, P1)
-    True
-    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=True)
-    >>> result = projection_from_matrix(P0, pseudo=True)
-    >>> P1 = projection_matrix(*result)
-    >>> is_same_transform(P0, P1)
-    True
-    """
-    M = numpy.array(matrix, dtype=numpy.float64, copy=False)
-    M33 = M[:3, :3]
-    l, V = numpy.linalg.eig(M)
-    i = numpy.where(abs(numpy.real(l) - 1.0) < 1e-8)[0]
-    if not pseudo and len(i):
-        # point: any eigenvector corresponding to eigenvalue 1
-        point = numpy.real(V[:, i[-1]]).squeeze()
-        point /= point[3]
-        # direction: unit eigenvector corresponding to eigenvalue 0
-        l, V = numpy.linalg.eig(M33)
-        i = numpy.where(abs(numpy.real(l)) < 1e-8)[0]
-        if not len(i):
-            raise ValueError("no eigenvector corresponding to eigenvalue 0")
-        direction = numpy.real(V[:, i[0]]).squeeze()
-        direction /= vector_norm(direction)
-        # normal: unit eigenvector of M33.T corresponding to eigenvalue 0
-        l, V = numpy.linalg.eig(M33.T)
-        i = numpy.where(abs(numpy.real(l)) < 1e-8)[0]
-        if len(i):
-            # parallel projection
-            normal = numpy.real(V[:, i[0]]).squeeze()
-            normal /= vector_norm(normal)
-            return point, normal, direction, None, False
-        else:
-            # orthogonal projection, where normal equals direction vector
-            return point, direction, None, None, False
-    else:
-        # perspective projection
-        i = numpy.where(abs(numpy.real(l)) > 1e-8)[0]
-        if not len(i):
-            raise ValueError(
-                "no eigenvector not corresponding to eigenvalue 0")
-        point = numpy.real(V[:, i[-1]]).squeeze()
-        point /= point[3]
-        normal = - M[3, :3]
-        perspective = M[:3, 3] / numpy.dot(point[:3], normal)
-        if pseudo:
-            perspective -= normal
-        return point, normal, None, perspective, pseudo
-
-
-def clip_matrix(left, right, bottom, top, near, far, perspective=False):
-    """Return matrix to obtain normalized device coordinates from frustrum.
-    The frustrum bounds are axis-aligned along x (left, right),
-    y (bottom, top) and z (near, far).
-    Normalized device coordinates are in range [-1, 1] if coordinates are
-    inside the frustrum.
-    If perspective is True the frustrum is a truncated pyramid with the
-    perspective point at origin and direction along z axis, otherwise an
-    orthographic canonical view volume (a box).
-    Homogeneous coordinates transformed by the perspective clip matrix
-    need to be dehomogenized (devided by w coordinate).
-    >>> frustrum = numpy.random.rand(6)
-    >>> frustrum[1] += frustrum[0]
-    >>> frustrum[3] += frustrum[2]
-    >>> frustrum[5] += frustrum[4]
-    >>> M = clip_matrix(*frustrum, perspective=False)
-    >>> numpy.dot(M, [frustrum[0], frustrum[2], frustrum[4], 1.0])
-    array([-1., -1., -1.,  1.])
-    >>> numpy.dot(M, [frustrum[1], frustrum[3], frustrum[5], 1.0])
-    array([ 1.,  1.,  1.,  1.])
-    >>> M = clip_matrix(*frustrum, perspective=True)
-    >>> v = numpy.dot(M, [frustrum[0], frustrum[2], frustrum[4], 1.0])
-    >>> v / v[3]
-    array([-1., -1., -1.,  1.])
-    >>> v = numpy.dot(M, [frustrum[1], frustrum[3], frustrum[4], 1.0])
-    >>> v / v[3]
-    array([ 1.,  1., -1.,  1.])
-    """
-    if left >= right or bottom >= top or near >= far:
-        raise ValueError("invalid frustrum")
-    if perspective:
-        if near <= _EPS:
-            raise ValueError("invalid frustrum: near <= 0")
-        t = 2.0 * near
-        M = ((-t/(right-left), 0.0, (right+left)/(right-left), 0.0),
-             (0.0, -t/(top-bottom), (top+bottom)/(top-bottom), 0.0),
-             (0.0, 0.0, -(far+near)/(far-near), t*far/(far-near)),
-             (0.0, 0.0, -1.0, 0.0))
-    else:
-        M = ((2.0/(right-left), 0.0, 0.0, (right+left)/(left-right)),
-             (0.0, 2.0/(top-bottom), 0.0, (top+bottom)/(bottom-top)),
-             (0.0, 0.0, 2.0/(far-near), (far+near)/(near-far)),
-             (0.0, 0.0, 0.0, 1.0))
-    return numpy.array(M, dtype=numpy.float64)
-
-
-def shear_matrix(angle, direction, point, normal):
-    """Return matrix to shear by angle along direction vector on shear plane.
-    The shear plane is defined by a point and normal vector. The direction
-    vector must be orthogonal to the plane's normal vector.
-    A point P is transformed by the shear matrix into P" such that
-    the vector P-P" is parallel to the direction vector and its extent is
-    given by the angle of P-P'-P", where P' is the orthogonal projection
-    of P onto the shear plane.
-    >>> angle = (random.random() - 0.5) * 4*math.pi
-    >>> direct = numpy.random.random(3) - 0.5
-    >>> point = numpy.random.random(3) - 0.5
-    >>> normal = numpy.cross(direct, numpy.random.random(3))
-    >>> S = shear_matrix(angle, direct, point, normal)
-    >>> numpy.allclose(1.0, numpy.linalg.det(S))
-    True
-    """
-    normal = unit_vector(normal[:3])
-    direction = unit_vector(direction[:3])
-    if abs(numpy.dot(normal, direction)) > 1e-6:
-        raise ValueError("direction and normal vectors are not orthogonal")
-    angle = math.tan(angle)
-    M = numpy.identity(4)
-    M[:3, :3] += angle * numpy.outer(direction, normal)
-    M[:3, 3] = -angle * numpy.dot(point[:3], normal) * direction
-    return M
-
-
-def shear_from_matrix(matrix):
-    """Return shear angle, direction and plane from shear matrix.
-    >>> angle = (random.random() - 0.5) * 4*math.pi
-    >>> direct = numpy.random.random(3) - 0.5
-    >>> point = numpy.random.random(3) - 0.5
-    >>> normal = numpy.cross(direct, numpy.random.random(3))
-    >>> S0 = shear_matrix(angle, direct, point, normal)
-    >>> angle, direct, point, normal = shear_from_matrix(S0)
-    >>> S1 = shear_matrix(angle, direct, point, normal)
-    >>> is_same_transform(S0, S1)
-    True
-    """
-    M = numpy.array(matrix, dtype=numpy.float64, copy=False)
-    M33 = M[:3, :3]
-    # normal: cross independent eigenvectors corresponding to the eigenvalue 1
-    l, V = numpy.linalg.eig(M33)
-    i = numpy.where(abs(numpy.real(l) - 1.0) < 1e-4)[0]
-    if len(i) < 2:
-        raise ValueError("No two linear independent eigenvectors found %s" % l)
-    V = numpy.real(V[:, i]).squeeze().T
-    lenorm = -1.0
-    for i0, i1 in ((0, 1), (0, 2), (1, 2)):
-        n = numpy.cross(V[i0], V[i1])
-        l = vector_norm(n)
-        if l > lenorm:
-            lenorm = l
-            normal = n
-    normal /= lenorm
-    # direction and angle
-    direction = numpy.dot(M33 - numpy.identity(3), normal)
-    angle = vector_norm(direction)
-    direction /= angle
-    angle = math.atan(angle)
-    # point: eigenvector corresponding to eigenvalue 1
-    l, V = numpy.linalg.eig(M)
-    i = numpy.where(abs(numpy.real(l) - 1.0) < 1e-8)[0]
-    if not len(i):
-        raise ValueError("no eigenvector corresponding to eigenvalue 1")
-    point = numpy.real(V[:, i[-1]]).squeeze()
-    point /= point[3]
-    return angle, direction, point, normal
-
-
-def decompose_matrix(matrix):
-    """Return sequence of transformations from transformation matrix.
-    matrix : array_like
-        Non-degenerative homogeneous transformation matrix
-    Return tuple of:
-        scale : vector of 3 scaling factors
-        shear : list of shear factors for x-y, x-z, y-z axes
-        angles : list of Euler angles about static x, y, z axes
-        translate : translation vector along x, y, z axes
-        perspective : perspective partition of matrix
-    Raise ValueError if matrix is of wrong type or degenerative.
-    >>> T0 = translation_matrix((1, 2, 3))
-    >>> scale, shear, angles, trans, persp = decompose_matrix(T0)
-    >>> T1 = translation_matrix(trans)
-    >>> numpy.allclose(T0, T1)
-    True
-    >>> S = scale_matrix(0.123)
-    >>> scale, shear, angles, trans, persp = decompose_matrix(S)
-    >>> scale[0]
-    0.123
-    >>> R0 = euler_matrix(1, 2, 3)
-    >>> scale, shear, angles, trans, persp = decompose_matrix(R0)
-    >>> R1 = euler_matrix(*angles)
-    >>> numpy.allclose(R0, R1)
-    True
-    """
-    M = numpy.array(matrix, dtype=numpy.float64, copy=True).T
-    if abs(M[3, 3]) < _EPS:
-        raise ValueError("M[3, 3] is zero")
-    M /= M[3, 3]
-    P = M.copy()
-    P[:, 3] = 0, 0, 0, 1
-    if not numpy.linalg.det(P):
-        raise ValueError("Matrix is singular")
-
-    scale = numpy.zeros((3, ), dtype=numpy.float64)
-    shear = [0, 0, 0]
-    angles = [0, 0, 0]
-
-    if any(abs(M[:3, 3]) > _EPS):
-        perspective = numpy.dot(M[:, 3], numpy.linalg.inv(P.T))
-        M[:, 3] = 0, 0, 0, 1
-    else:
-        perspective = numpy.array((0, 0, 0, 1), dtype=numpy.float64)
-
-    translate = M[3, :3].copy()
-    M[3, :3] = 0
-
-    row = M[:3, :3].copy()
-    scale[0] = vector_norm(row[0])
-    row[0] /= scale[0]
-    shear[0] = numpy.dot(row[0], row[1])
-    row[1] -= row[0] * shear[0]
-    scale[1] = vector_norm(row[1])
-    row[1] /= scale[1]
-    shear[0] /= scale[1]
-    shear[1] = numpy.dot(row[0], row[2])
-    row[2] -= row[0] * shear[1]
-    shear[2] = numpy.dot(row[1], row[2])
-    row[2] -= row[1] * shear[2]
-    scale[2] = vector_norm(row[2])
-    row[2] /= scale[2]
-    shear[1:] /= scale[2]
-
-    if numpy.dot(row[0], numpy.cross(row[1], row[2])) < 0:
-        scale *= -1
-        row *= -1
-
-    angles[1] = math.asin(-row[0, 2])
-    if math.cos(angles[1]):
-        angles[0] = math.atan2(row[1, 2], row[2, 2])
-        angles[2] = math.atan2(row[0, 1], row[0, 0])
-    else:
-        #angles[0] = math.atan2(row[1, 0], row[1, 1])
-        angles[0] = math.atan2(-row[2, 1], row[1, 1])
-        angles[2] = 0.0
-
-    return scale, shear, angles, translate, perspective
-
-
-def compose_matrix(scale=None, shear=None, angles=None, translate=None,
-                   perspective=None):
-    """Return transformation matrix from sequence of transformations.
-    This is the inverse of the decompose_matrix function.
-    Sequence of transformations:
-        scale : vector of 3 scaling factors
-        shear : list of shear factors for x-y, x-z, y-z axes
-        angles : list of Euler angles about static x, y, z axes
-        translate : translation vector along x, y, z axes
-        perspective : perspective partition of matrix
-    >>> scale = numpy.random.random(3) - 0.5
-    >>> shear = numpy.random.random(3) - 0.5
-    >>> angles = (numpy.random.random(3) - 0.5) * (2*math.pi)
-    >>> trans = numpy.random.random(3) - 0.5
-    >>> persp = numpy.random.random(4) - 0.5
-    >>> M0 = compose_matrix(scale, shear, angles, trans, persp)
-    >>> result = decompose_matrix(M0)
-    >>> M1 = compose_matrix(*result)
-    >>> is_same_transform(M0, M1)
-    True
-    """
-    M = numpy.identity(4)
-    if perspective is not None:
-        P = numpy.identity(4)
-        P[3, :] = perspective[:4]
-        M = numpy.dot(M, P)
-    if translate is not None:
-        T = numpy.identity(4)
-        T[:3, 3] = translate[:3]
-        M = numpy.dot(M, T)
-    if angles is not None:
-        R = euler_matrix(angles[0], angles[1], angles[2], 'sxyz')
-        M = numpy.dot(M, R)
-    if shear is not None:
-        Z = numpy.identity(4)
-        Z[1, 2] = shear[2]
-        Z[0, 2] = shear[1]
-        Z[0, 1] = shear[0]
-        M = numpy.dot(M, Z)
-    if scale is not None:
-        S = numpy.identity(4)
-        S[0, 0] = scale[0]
-        S[1, 1] = scale[1]
-        S[2, 2] = scale[2]
-        M = numpy.dot(M, S)
-    M /= M[3, 3]
-    return M
-
-
-def orthogonalization_matrix(lengths, angles):
-    """Return orthogonalization matrix for crystallographic cell coordinates.
-    Angles are expected in degrees.
-    The de-orthogonalization matrix is the inverse.
-    >>> O = orthogonalization_matrix((10., 10., 10.), (90., 90., 90.))
-    >>> numpy.allclose(O[:3, :3], numpy.identity(3, float) * 10)
-    True
-    >>> O = orthogonalization_matrix([9.8, 12.0, 15.5], [87.2, 80.7, 69.7])
-    >>> numpy.allclose(numpy.sum(O), 43.063229)
-    True
-    """
-    a, b, c = lengths
-    angles = numpy.radians(angles)
-    sina, sinb, _ = numpy.sin(angles)
-    cosa, cosb, cosg = numpy.cos(angles)
-    co = (cosa * cosb - cosg) / (sina * sinb)
-    return numpy.array((
-        ( a*sinb*math.sqrt(1.0-co*co),  0.0,    0.0, 0.0),
-        (-a*sinb*co,                    b*sina, 0.0, 0.0),
-        ( a*cosb,                       b*cosa, c,   0.0),
-        ( 0.0,                          0.0,    0.0, 1.0)),
-        dtype=numpy.float64)
-
-
-def superimposition_matrix(v0, v1, scaling=False, usesvd=True):
-    """Return matrix to transform given vector set into second vector set.
-    v0 and v1 are shape (3, \*) or (4, \*) arrays of at least 3 vectors.
-    If usesvd is True, the weighted sum of squared deviations (RMSD) is
-    minimized according to the algorithm by W. Kabsch [8]. Otherwise the
-    quaternion based algorithm by B. Horn [9] is used (slower when using
-    this Python implementation).
-    The returned matrix performs rotation, translation and uniform scaling
-    (if specified).
-    >>> v0 = numpy.random.rand(3, 10)
-    >>> M = superimposition_matrix(v0, v0)
-    >>> numpy.allclose(M, numpy.identity(4))
-    True
-    >>> R = random_rotation_matrix(numpy.random.random(3))
-    >>> v0 = ((1,0,0), (0,1,0), (0,0,1), (1,1,1))
-    >>> v1 = numpy.dot(R, v0)
-    >>> M = superimposition_matrix(v0, v1)
-    >>> numpy.allclose(v1, numpy.dot(M, v0))
-    True
-    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20.0
-    >>> v0[3] = 1.0
-    >>> v1 = numpy.dot(R, v0)
-    >>> M = superimposition_matrix(v0, v1)
-    >>> numpy.allclose(v1, numpy.dot(M, v0))
-    True
-    >>> S = scale_matrix(random.random())
-    >>> T = translation_matrix(numpy.random.random(3)-0.5)
-    >>> M = concatenate_matrices(T, R, S)
-    >>> v1 = numpy.dot(M, v0)
-    >>> v0[:3] += numpy.random.normal(0.0, 1e-9, 300).reshape(3, -1)
-    >>> M = superimposition_matrix(v0, v1, scaling=True)
-    >>> numpy.allclose(v1, numpy.dot(M, v0))
-    True
-    >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False)
-    >>> numpy.allclose(v1, numpy.dot(M, v0))
-    True
-    >>> v = numpy.empty((4, 100, 3), dtype=numpy.float64)
-    >>> v[:, :, 0] = v0
-    >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False)
-    >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0]))
-    True
-    """
-    v0 = numpy.array(v0, dtype=numpy.float64, copy=False)[:3]
-    v1 = numpy.array(v1, dtype=numpy.float64, copy=False)[:3]
-
-    if v0.shape != v1.shape or v0.shape[1] < 3:
-        raise ValueError("Vector sets are of wrong shape or type.")
-
-    # move centroids to origin
-    t0 = numpy.mean(v0, axis=1)
-    t1 = numpy.mean(v1, axis=1)
-    v0 = v0 - t0.reshape(3, 1)
-    v1 = v1 - t1.reshape(3, 1)
-
-    if usesvd:
-        # Singular Value Decomposition of covariance matrix
-        u, s, vh = numpy.linalg.svd(numpy.dot(v1, v0.T))
-        # rotation matrix from SVD orthonormal bases
-        R = numpy.dot(u, vh)
-        if numpy.linalg.det(R) < 0.0:
-            # R does not constitute right handed system
-            R -= numpy.outer(u[:, 2], vh[2, :]*2.0)
-            s[-1] *= -1.0
-        # homogeneous transformation matrix
-        M = numpy.identity(4)
-        M[:3, :3] = R
-    else:
-        # compute symmetric matrix N
-        xx, yy, zz = numpy.sum(v0 * v1, axis=1)
-        xy, yz, zx = numpy.sum(v0 * numpy.roll(v1, -1, axis=0), axis=1)
-        xz, yx, zy = numpy.sum(v0 * numpy.roll(v1, -2, axis=0), axis=1)
-        N = ((xx+yy+zz, yz-zy,    zx-xz,    xy-yx),
-             (yz-zy,    xx-yy-zz, xy+yx,    zx+xz),
-             (zx-xz,    xy+yx,   -xx+yy-zz, yz+zy),
-             (xy-yx,    zx+xz,    yz+zy,   -xx-yy+zz))
-        # quaternion: eigenvector corresponding to most positive eigenvalue
-        l, V = numpy.linalg.eig(N)
-        q = V[:, numpy.argmax(l)]
-        q /= vector_norm(q) # unit quaternion
-        q = numpy.roll(q, -1) # move w component to end
-        # homogeneous transformation matrix
-        M = quaternion_matrix(q)
-
-    # scale: ratio of rms deviations from centroid
-    if scaling:
-        v0 *= v0
-        v1 *= v1
-        M[:3, :3] *= math.sqrt(numpy.sum(v1) / numpy.sum(v0))
-
-    # translation
-    M[:3, 3] = t1
-    T = numpy.identity(4)
-    T[:3, 3] = -t0
-    M = numpy.dot(M, T)
-    return M
-
-
-def euler_matrix(ai, aj, ak, axes='sxyz'):
-    """Return homogeneous rotation matrix from Euler angles and axis sequence.
-    ai, aj, ak : Euler's roll, pitch and yaw angles
-    axes : One of 24 axis sequences as string or encoded tuple
-    >>> R = euler_matrix(1, 2, 3, 'syxz')
-    >>> numpy.allclose(numpy.sum(R[0]), -1.34786452)
-    True
-    >>> R = euler_matrix(1, 2, 3, (0, 1, 0, 1))
-    >>> numpy.allclose(numpy.sum(R[0]), -0.383436184)
-    True
-    >>> ai, aj, ak = (4.0*math.pi) * (numpy.random.random(3) - 0.5)
-    >>> for axes in _AXES2TUPLE.keys():
-    ...    R = euler_matrix(ai, aj, ak, axes)
-    >>> for axes in _TUPLE2AXES.keys():
-    ...    R = euler_matrix(ai, aj, ak, axes)
-    """
-    try:
-        firstaxis, parity, repetition, frame = _AXES2TUPLE[axes]
-    except (AttributeError, KeyError):
-        _ = _TUPLE2AXES[axes]
-        firstaxis, parity, repetition, frame = axes
-
-    i = firstaxis
-    j = _NEXT_AXIS[i+parity]
-    k = _NEXT_AXIS[i-parity+1]
-
-    if frame:
-        ai, ak = ak, ai
-    if parity:
-        ai, aj, ak = -ai, -aj, -ak
-
-    si, sj, sk = math.sin(ai), math.sin(aj), math.sin(ak)
-    ci, cj, ck = math.cos(ai), math.cos(aj), math.cos(ak)
-    cc, cs = ci*ck, ci*sk
-    sc, ss = si*ck, si*sk
-
-    M = numpy.identity(4)
-    if repetition:
-        M[i, i] = cj
-        M[i, j] = sj*si
-        M[i, k] = sj*ci
-        M[j, i] = sj*sk
-        M[j, j] = -cj*ss+cc
-        M[j, k] = -cj*cs-sc
-        M[k, i] = -sj*ck
-        M[k, j] = cj*sc+cs
-        M[k, k] = cj*cc-ss
-    else:
-        M[i, i] = cj*ck
-        M[i, j] = sj*sc-cs
-        M[i, k] = sj*cc+ss
-        M[j, i] = cj*sk
-        M[j, j] = sj*ss+cc
-        M[j, k] = sj*cs-sc
-        M[k, i] = -sj
-        M[k, j] = cj*si
-        M[k, k] = cj*ci
-    return M
-
-
-def euler_from_matrix(matrix, axes='sxyz'):
-    """Return Euler angles from rotation matrix for specified axis sequence.
-    axes : One of 24 axis sequences as string or encoded tuple
-    Note that many Euler angle triplets can describe one matrix.
-    >>> R0 = euler_matrix(1, 2, 3, 'syxz')
-    >>> al, be, ga = euler_from_matrix(R0, 'syxz')
-    >>> R1 = euler_matrix(al, be, ga, 'syxz')
-    >>> numpy.allclose(R0, R1)
-    True
-    >>> angles = (4.0*math.pi) * (numpy.random.random(3) - 0.5)
-    >>> for axes in _AXES2TUPLE.keys():
-    ...    R0 = euler_matrix(axes=axes, *angles)
-    ...    R1 = euler_matrix(axes=axes, *euler_from_matrix(R0, axes))
-    ...    if not numpy.allclose(R0, R1): print axes, "failed"
-    """
-    try:
-        firstaxis, parity, repetition, frame = _AXES2TUPLE[axes.lower()]
-    except (AttributeError, KeyError):
-        _ = _TUPLE2AXES[axes]
-        firstaxis, parity, repetition, frame = axes
-
-    i = firstaxis
-    j = _NEXT_AXIS[i+parity]
-    k = _NEXT_AXIS[i-parity+1]
-
-    M = numpy.array(matrix, dtype=numpy.float64, copy=False)[:3, :3]
-    if repetition:
-        sy = math.sqrt(M[i, j]*M[i, j] + M[i, k]*M[i, k])
-        if sy > _EPS:
-            ax = math.atan2( M[i, j],  M[i, k])
-            ay = math.atan2( sy,       M[i, i])
-            az = math.atan2( M[j, i], -M[k, i])
-        else:
-            ax = math.atan2(-M[j, k],  M[j, j])
-            ay = math.atan2( sy,       M[i, i])
-            az = 0.0
-    else:
-        cy = math.sqrt(M[i, i]*M[i, i] + M[j, i]*M[j, i])
-        if cy > _EPS:
-            ax = math.atan2( M[k, j],  M[k, k])
-            ay = math.atan2(-M[k, i],  cy)
-            az = math.atan2( M[j, i],  M[i, i])
-        else:
-            ax = math.atan2(-M[j, k],  M[j, j])
-            ay = math.atan2(-M[k, i],  cy)
-            az = 0.0
-
-    if parity:
-        ax, ay, az = -ax, -ay, -az
-    if frame:
-        ax, az = az, ax
-    return ax, ay, az
-
-
-def euler_from_quaternion(quaternion, axes='sxyz'):
-    """Return Euler angles from quaternion for specified axis sequence.
-    >>> angles = euler_from_quaternion([0.06146124, 0, 0, 0.99810947])
-    >>> numpy.allclose(angles, [0.123, 0, 0])
-    True
-    """
-    return euler_from_matrix(quaternion_matrix(quaternion), axes)
-
-
-def quaternion_from_euler(ai, aj, ak, axes='sxyz'):
-    """Return quaternion from Euler angles and axis sequence.
-    ai, aj, ak : Euler's roll, pitch and yaw angles
-    axes : One of 24 axis sequences as string or encoded tuple
-    >>> q = quaternion_from_euler(1, 2, 3, 'ryxz')
-    >>> numpy.allclose(q, [0.310622, -0.718287, 0.444435, 0.435953])
-    True
-    """
-    try:
-        firstaxis, parity, repetition, frame = _AXES2TUPLE[axes.lower()]
-    except (AttributeError, KeyError):
-        _ = _TUPLE2AXES[axes]
-        firstaxis, parity, repetition, frame = axes
-
-    i = firstaxis
-    j = _NEXT_AXIS[i+parity]
-    k = _NEXT_AXIS[i-parity+1]
-
-    if frame:
-        ai, ak = ak, ai
-    if parity:
-        aj = -aj
-
-    ai /= 2.0
-    aj /= 2.0
-    ak /= 2.0
-    ci = math.cos(ai)
-    si = math.sin(ai)
-    cj = math.cos(aj)
-    sj = math.sin(aj)
-    ck = math.cos(ak)
-    sk = math.sin(ak)
-    cc = ci*ck
-    cs = ci*sk
-    sc = si*ck
-    ss = si*sk
-
-    quaternion = numpy.empty((4, ), dtype=numpy.float64)
-    if repetition:
-        quaternion[i] = cj*(cs + sc)
-        quaternion[j] = sj*(cc + ss)
-        quaternion[k] = sj*(cs - sc)
-        quaternion[3] = cj*(cc - ss)
-    else:
-        quaternion[i] = cj*sc - sj*cs
-        quaternion[j] = cj*ss + sj*cc
-        quaternion[k] = cj*cs - sj*sc
-        quaternion[3] = cj*cc + sj*ss
-    if parity:
-        quaternion[j] *= -1
-
-    return quaternion
-
-
-def quaternion_about_axis(angle, axis):
-    """Return quaternion for rotation about axis.
-    >>> q = quaternion_about_axis(0.123, (1, 0, 0))
-    >>> numpy.allclose(q, [0.06146124, 0, 0, 0.99810947])
-    True
-    """
-    quaternion = numpy.zeros((4, ), dtype=numpy.float64)
-    quaternion[:3] = axis[:3]
-    qlen = vector_norm(quaternion)
-    if qlen > _EPS:
-        quaternion *= math.sin(angle/2.0) / qlen
-    quaternion[3] = math.cos(angle/2.0)
-    return quaternion
-
-
-def quaternion_matrix(quaternion):
-    """Return homogeneous rotation matrix from quaternion.
-    >>> R = quaternion_matrix([0.06146124, 0, 0, 0.99810947])
-    >>> numpy.allclose(R, rotation_matrix(0.123, (1, 0, 0)))
-    True
-    """
-    q = numpy.array(quaternion[:4], dtype=numpy.float64, copy=True)
-    nq = numpy.dot(q, q)
-    if nq < _EPS:
-        return numpy.identity(4)
-    q *= math.sqrt(2.0 / nq)
-    q = numpy.outer(q, q)
-    return numpy.array((
-        (1.0-q[1, 1]-q[2, 2],     q[0, 1]-q[2, 3],     q[0, 2]+q[1, 3], 0.0),
-        (    q[0, 1]+q[2, 3], 1.0-q[0, 0]-q[2, 2],     q[1, 2]-q[0, 3], 0.0),
-        (    q[0, 2]-q[1, 3],     q[1, 2]+q[0, 3], 1.0-q[0, 0]-q[1, 1], 0.0),
-        (                0.0,                 0.0,                 0.0, 1.0)
-        ), dtype=numpy.float64)
-
-
-def quaternion_from_matrix(matrix):
-    """Return quaternion from rotation matrix.
-    >>> R = rotation_matrix(0.123, (1, 2, 3))
-    >>> q = quaternion_from_matrix(R)
-    >>> numpy.allclose(q, [0.0164262, 0.0328524, 0.0492786, 0.9981095])
-    True
-    """
-    q = numpy.empty((4, ), dtype=numpy.float64)
-    M = numpy.array(matrix, dtype=numpy.float64, copy=False)[:4, :4]
-    t = numpy.trace(M)
-    if t > M[3, 3]:
-        q[3] = t
-        q[2] = M[1, 0] - M[0, 1]
-        q[1] = M[0, 2] - M[2, 0]
-        q[0] = M[2, 1] - M[1, 2]
-    else:
-        i, j, k = 0, 1, 2
-        if M[1, 1] > M[0, 0]:
-            i, j, k = 1, 2, 0
-        if M[2, 2] > M[i, i]:
-            i, j, k = 2, 0, 1
-        t = M[i, i] - (M[j, j] + M[k, k]) + M[3, 3]
-        q[i] = t
-        q[j] = M[i, j] + M[j, i]
-        q[k] = M[k, i] + M[i, k]
-        q[3] = M[k, j] - M[j, k]
-    q *= 0.5 / math.sqrt(t * M[3, 3])
-    return q
-
-
-def quaternion_multiply(quaternion1, quaternion0):
-    """Return multiplication of two quaternions.
-    >>> q = quaternion_multiply([1, -2, 3, 4], [-5, 6, 7, 8])
-    >>> numpy.allclose(q, [-44, -14, 48, 28])
-    True
-    """
-    x0, y0, z0, w0 = quaternion0
-    x1, y1, z1, w1 = quaternion1
-    return numpy.array((
-         x1*w0 + y1*z0 - z1*y0 + w1*x0,
-        -x1*z0 + y1*w0 + z1*x0 + w1*y0,
-         x1*y0 - y1*x0 + z1*w0 + w1*z0,
-        -x1*x0 - y1*y0 - z1*z0 + w1*w0), dtype=numpy.float64)
-
-
-def quaternion_conjugate(quaternion):
-    """Return conjugate of quaternion.
-    >>> q0 = random_quaternion()
-    >>> q1 = quaternion_conjugate(q0)
-    >>> q1[3] == q0[3] and all(q1[:3] == -q0[:3])
-    True
-    """
-    return numpy.array((-quaternion[0], -quaternion[1],
-                        -quaternion[2], quaternion[3]), dtype=numpy.float64)
-
-
-def quaternion_inverse(quaternion):
-    """Return inverse of quaternion.
-    >>> q0 = random_quaternion()
-    >>> q1 = quaternion_inverse(q0)
-    >>> numpy.allclose(quaternion_multiply(q0, q1), [0, 0, 0, 1])
-    True
-    """
-    return quaternion_conjugate(quaternion) / numpy.dot(quaternion, quaternion)
-
-
-def quaternion_slerp(quat0, quat1, fraction, spin=0, shortestpath=True):
-    """Return spherical linear interpolation between two quaternions.
-    >>> q0 = random_quaternion()
-    >>> q1 = random_quaternion()
-    >>> q = quaternion_slerp(q0, q1, 0.0)
-    >>> numpy.allclose(q, q0)
-    True
-    >>> q = quaternion_slerp(q0, q1, 1.0, 1)
-    >>> numpy.allclose(q, q1)
-    True
-    >>> q = quaternion_slerp(q0, q1, 0.5)
-    >>> angle = math.acos(numpy.dot(q0, q))
-    >>> numpy.allclose(2.0, math.acos(numpy.dot(q0, q1)) / angle) or \
-        numpy.allclose(2.0, math.acos(-numpy.dot(q0, q1)) / angle)
-    True
-    """
-    q0 = unit_vector(quat0[:4])
-    q1 = unit_vector(quat1[:4])
-    if fraction == 0.0:
-        return q0
-    elif fraction == 1.0:
-        return q1
-    d = numpy.dot(q0, q1)
-    if abs(abs(d) - 1.0) < _EPS:
-        return q0
-    if shortestpath and d < 0.0:
-        # invert rotation
-        d = -d
-        q1 *= -1.0
-    angle = math.acos(d) + spin * math.pi
-    if abs(angle) < _EPS:
-        return q0
-    isin = 1.0 / math.sin(angle)
-    q0 *= math.sin((1.0 - fraction) * angle) * isin
-    q1 *= math.sin(fraction * angle) * isin
-    q0 += q1
-    return q0
-
-
-def random_quaternion(rand=None):
-    """Return uniform random unit quaternion.
-    rand: array like or None
-        Three independent random variables that are uniformly distributed
-        between 0 and 1.
-    >>> q = random_quaternion()
-    >>> numpy.allclose(1.0, vector_norm(q))
-    True
-    >>> q = random_quaternion(numpy.random.random(3))
-    >>> q.shape
-    (4,)
-    """
-    if rand is None:
-        rand = numpy.random.rand(3)
-    else:
-        assert len(rand) == 3
-    r1 = numpy.sqrt(1.0 - rand[0])
-    r2 = numpy.sqrt(rand[0])
-    pi2 = math.pi * 2.0
-    t1 = pi2 * rand[1]
-    t2 = pi2 * rand[2]
-    return numpy.array((numpy.sin(t1)*r1,
-                        numpy.cos(t1)*r1,
-                        numpy.sin(t2)*r2,
-                        numpy.cos(t2)*r2), dtype=numpy.float64)
-
-
-def random_rotation_matrix(rand=None):
-    """Return uniform random rotation matrix.
-    rnd: array like
-        Three independent random variables that are uniformly distributed
-        between 0 and 1 for each returned quaternion.
-    >>> R = random_rotation_matrix()
-    >>> numpy.allclose(numpy.dot(R.T, R), numpy.identity(4))
-    True
-    """
-    return quaternion_matrix(random_quaternion(rand))
-
-
-class Arcball(object):
-    """Virtual Trackball Control.
-    >>> ball = Arcball()
-    >>> ball = Arcball(initial=numpy.identity(4))
-    >>> ball.place([320, 320], 320)
-    >>> ball.down([500, 250])
-    >>> ball.drag([475, 275])
-    >>> R = ball.matrix()
-    >>> numpy.allclose(numpy.sum(R), 3.90583455)
-    True
-    >>> ball = Arcball(initial=[0, 0, 0, 1])
-    >>> ball.place([320, 320], 320)
-    >>> ball.setaxes([1,1,0], [-1, 1, 0])
-    >>> ball.setconstrain(True)
-    >>> ball.down([400, 200])
-    >>> ball.drag([200, 400])
-    >>> R = ball.matrix()
-    >>> numpy.allclose(numpy.sum(R), 0.2055924)
-    True
-    >>> ball.next()
-    """
-
-    def __init__(self, initial=None):
-        """Initialize virtual trackball control.
-        initial : quaternion or rotation matrix
-        """
-        self._axis = None
-        self._axes = None
-        self._radius = 1.0
-        self._center = [0.0, 0.0]
-        self._vdown = numpy.array([0, 0, 1], dtype=numpy.float64)
-        self._constrain = False
-
-        if initial is None:
-            self._qdown = numpy.array([0, 0, 0, 1], dtype=numpy.float64)
-        else:
-            initial = numpy.array(initial, dtype=numpy.float64)
-            if initial.shape == (4, 4):
-                self._qdown = quaternion_from_matrix(initial)
-            elif initial.shape == (4, ):
-                initial /= vector_norm(initial)
-                self._qdown = initial
-            else:
-                raise ValueError("initial not a quaternion or matrix.")
-
-        self._qnow = self._qpre = self._qdown
-
-    def place(self, center, radius):
-        """Place Arcball, e.g. when window size changes.
-        center : sequence[2]
-            Window coordinates of trackball center.
-        radius : float
-            Radius of trackball in window coordinates.
-        """
-        self._radius = float(radius)
-        self._center[0] = center[0]
-        self._center[1] = center[1]
-
-    def setaxes(self, *axes):
-        """Set axes to constrain rotations."""
-        if axes is None:
-            self._axes = None
-        else:
-            self._axes = [unit_vector(axis) for axis in axes]
-
-    def setconstrain(self, constrain):
-        """Set state of constrain to axis mode."""
-        self._constrain = constrain == True
-
-    def getconstrain(self):
-        """Return state of constrain to axis mode."""
-        return self._constrain
-
-    def down(self, point):
-        """Set initial cursor window coordinates and pick constrain-axis."""
-        self._vdown = arcball_map_to_sphere(point, self._center, self._radius)
-        self._qdown = self._qpre = self._qnow
-
-        if self._constrain and self._axes is not None:
-            self._axis = arcball_nearest_axis(self._vdown, self._axes)
-            self._vdown = arcball_constrain_to_axis(self._vdown, self._axis)
-        else:
-            self._axis = None
-
-    def drag(self, point):
-        """Update current cursor window coordinates."""
-        vnow = arcball_map_to_sphere(point, self._center, self._radius)
-
-        if self._axis is not None:
-            vnow = arcball_constrain_to_axis(vnow, self._axis)
-
-        self._qpre = self._qnow
-
-        t = numpy.cross(self._vdown, vnow)
-        if numpy.dot(t, t) < _EPS:
-            self._qnow = self._qdown
-        else:
-            q = [t[0], t[1], t[2], numpy.dot(self._vdown, vnow)]
-            self._qnow = quaternion_multiply(q, self._qdown)
-
-    def next(self, acceleration=0.0):
-        """Continue rotation in direction of last drag."""
-        q = quaternion_slerp(self._qpre, self._qnow, 2.0+acceleration, False)
-        self._qpre, self._qnow = self._qnow, q
-
-    def matrix(self):
-        """Return homogeneous rotation matrix."""
-        return quaternion_matrix(self._qnow)
-
-
-def arcball_map_to_sphere(point, center, radius):
-    """Return unit sphere coordinates from window coordinates."""
-    v = numpy.array(((point[0] - center[0]) / radius,
-                     (center[1] - point[1]) / radius,
-                     0.0), dtype=numpy.float64)
-    n = v[0]*v[0] + v[1]*v[1]
-    if n > 1.0:
-        v /= math.sqrt(n) # position outside of sphere
-    else:
-        v[2] = math.sqrt(1.0 - n)
-    return v
-
-
-def arcball_constrain_to_axis(point, axis):
-    """Return sphere point perpendicular to axis."""
-    v = numpy.array(point, dtype=numpy.float64, copy=True)
-    a = numpy.array(axis, dtype=numpy.float64, copy=True)
-    v -= a * numpy.dot(a, v) # on plane
-    n = vector_norm(v)
-    if n > _EPS:
-        if v[2] < 0.0:
-            v *= -1.0
-        v /= n
-        return v
-    if a[2] == 1.0:
-        return numpy.array([1, 0, 0], dtype=numpy.float64)
-    return unit_vector([-a[1], a[0], 0])
-
-
-def arcball_nearest_axis(point, axes):
-    """Return axis, which arc is nearest to point."""
-    point = numpy.array(point, dtype=numpy.float64, copy=False)
-    nearest = None
-    mx = -1.0
-    for axis in axes:
-        t = numpy.dot(arcball_constrain_to_axis(point, axis), point)
-        if t > mx:
-            nearest = axis
-            mx = t
-    return nearest
-
-
-# epsilon for testing whether a number is close to zero
-_EPS = numpy.finfo(float).eps * 4.0
-
-# axis sequences for Euler angles
-_NEXT_AXIS = [1, 2, 0, 1]
-
-# map axes strings to/from tuples of inner axis, parity, repetition, frame
-_AXES2TUPLE = {
-    'sxyz': (0, 0, 0, 0), 'sxyx': (0, 0, 1, 0), 'sxzy': (0, 1, 0, 0),
-    'sxzx': (0, 1, 1, 0), 'syzx': (1, 0, 0, 0), 'syzy': (1, 0, 1, 0),
-    'syxz': (1, 1, 0, 0), 'syxy': (1, 1, 1, 0), 'szxy': (2, 0, 0, 0),
-    'szxz': (2, 0, 1, 0), 'szyx': (2, 1, 0, 0), 'szyz': (2, 1, 1, 0),
-    'rzyx': (0, 0, 0, 1), 'rxyx': (0, 0, 1, 1), 'ryzx': (0, 1, 0, 1),
-    'rxzx': (0, 1, 1, 1), 'rxzy': (1, 0, 0, 1), 'ryzy': (1, 0, 1, 1),
-    'rzxy': (1, 1, 0, 1), 'ryxy': (1, 1, 1, 1), 'ryxz': (2, 0, 0, 1),
-    'rzxz': (2, 0, 1, 1), 'rxyz': (2, 1, 0, 1), 'rzyz': (2, 1, 1, 1)}
-
-_TUPLE2AXES = dict((v, k) for k, v in _AXES2TUPLE.items())
-
-# helper functions
-
-def vector_norm(data, axis=None, out=None):
-    """Return length, i.e. eucledian norm, of ndarray along axis.
-    >>> v = numpy.random.random(3)
-    >>> n = vector_norm(v)
-    >>> numpy.allclose(n, numpy.linalg.norm(v))
-    True
-    >>> v = numpy.random.rand(6, 5, 3)
-    >>> n = vector_norm(v, axis=-1)
-    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=2)))
-    True
-    >>> n = vector_norm(v, axis=1)
-    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))
-    True
-    >>> v = numpy.random.rand(5, 4, 3)
-    >>> n = numpy.empty((5, 3), dtype=numpy.float64)
-    >>> vector_norm(v, axis=1, out=n)
-    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))
-    True
-    >>> vector_norm([])
-    0.0
-    >>> vector_norm([1.0])
-    1.0
-    """
-    data = numpy.array(data, dtype=numpy.float64, copy=True)
-    if out is None:
-        if data.ndim == 1:
-            return math.sqrt(numpy.dot(data, data))
-        data *= data
-        out = numpy.atleast_1d(numpy.sum(data, axis=axis))
-        numpy.sqrt(out, out)
-        return out
-    else:
-        data *= data
-        numpy.sum(data, axis=axis, out=out)
-        numpy.sqrt(out, out)
-
-
-def unit_vector(data, axis=None, out=None):
-    """Return ndarray normalized by length, i.e. eucledian norm, along axis.
-    >>> v0 = numpy.random.random(3)
-    >>> v1 = unit_vector(v0)
-    >>> numpy.allclose(v1, v0 / numpy.linalg.norm(v0))
-    True
-    >>> v0 = numpy.random.rand(5, 4, 3)
-    >>> v1 = unit_vector(v0, axis=-1)
-    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=2)), 2)
-    >>> numpy.allclose(v1, v2)
-    True
-    >>> v1 = unit_vector(v0, axis=1)
-    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=1)), 1)
-    >>> numpy.allclose(v1, v2)
-    True
-    >>> v1 = numpy.empty((5, 4, 3), dtype=numpy.float64)
-    >>> unit_vector(v0, axis=1, out=v1)
-    >>> numpy.allclose(v1, v2)
-    True
-    >>> list(unit_vector([]))
-    []
-    >>> list(unit_vector([1.0]))
-    [1.0]
-    """
-    if out is None:
-        data = numpy.array(data, dtype=numpy.float64, copy=True)
-        if data.ndim == 1:
-            data /= math.sqrt(numpy.dot(data, data))
-            return data
-    else:
-        if out is not data:
-            out[:] = numpy.array(data, copy=False)
-        data = out
-    length = numpy.atleast_1d(numpy.sum(data*data, axis))
-    numpy.sqrt(length, length)
-    if axis is not None:
-        length = numpy.expand_dims(length, axis)
-    data /= length
-    if out is None:
-        return data
-
-
-def random_vector(size):
-    """Return array of random doubles in the half-open interval [0.0, 1.0).
-    >>> v = random_vector(10000)
-    >>> numpy.all(v >= 0.0) and numpy.all(v < 1.0)
-    True
-    >>> v0 = random_vector(10)
-    >>> v1 = random_vector(10)
-    >>> numpy.any(v0 == v1)
-    False
-    """
-    return numpy.random.random(size)
-
-
-def inverse_matrix(matrix):
-    """Return inverse of square transformation matrix.
-    >>> M0 = random_rotation_matrix()
-    >>> M1 = inverse_matrix(M0.T)
-    >>> numpy.allclose(M1, numpy.linalg.inv(M0.T))
-    True
-    >>> for size in range(1, 7):
-    ...     M0 = numpy.random.rand(size, size)
-    ...     M1 = inverse_matrix(M0)
-    ...     if not numpy.allclose(M1, numpy.linalg.inv(M0)): print size
-    """
-    return numpy.linalg.inv(matrix)
-
-
-def concatenate_matrices(*matrices):
-    """Return concatenation of series of transformation matrices.
-    >>> M = numpy.random.rand(16).reshape((4, 4)) - 0.5
-    >>> numpy.allclose(M, concatenate_matrices(M))
-    True
-    >>> numpy.allclose(numpy.dot(M, M.T), concatenate_matrices(M, M.T))
-    True
-    """
-    M = numpy.identity(4)
-    for i in matrices:
-        M = numpy.dot(M, i)
-    return M
-
-
-def is_same_transform(matrix0, matrix1):
-    """Return True if two matrices perform same transformation.
-    >>> is_same_transform(numpy.identity(4), numpy.identity(4))
-    True
-    >>> is_same_transform(numpy.identity(4), random_rotation_matrix())
-    False
-    """
-    matrix0 = numpy.array(matrix0, dtype=numpy.float64, copy=True)
-    matrix0 /= matrix0[3, 3]
-    matrix1 = numpy.array(matrix1, dtype=numpy.float64, copy=True)
-    matrix1 /= matrix1[3, 3]
-    return numpy.allclose(matrix0, matrix1)
-
-
-def _import_module(module_name, warn=True, prefix='_py_', ignore='_'):
-    """Try import all public attributes from module into global namespace.
-    Existing attributes with name clashes are renamed with prefix.
-    Attributes starting with underscore are ignored by default.
-    Return True on successful import.
-    """
-    try:
-        module = __import__(module_name)
-    except ImportError:
-        if warn:
-            warnings.warn("Failed to import module " + module_name)
-    else:
-        for attr in dir(module):
-            if ignore and attr.startswith(ignore):
-                continue
-            if prefix:
-                if attr in globals():
-                    globals()[prefix + attr] = globals()[attr]
-                elif warn:
-                    warnings.warn("No Python implementation of " + attr)
-            globals()[attr] = getattr(module, attr)
-    return True
-
-# https://github.com/ros/geometry/blob/hydro-devel/tf/src/tf/transformations.py
diff --git a/diffuser/diffuser/utils/video.py b/diffuser/diffuser/utils/video.py
deleted file mode 100644
index 8ff2624..0000000
--- a/diffuser/diffuser/utils/video.py
+++ /dev/null
@@ -1,29 +0,0 @@
-import os
-import numpy as np
-import skvideo.io
-
-def _make_dir(filename):
-    folder = os.path.dirname(filename)
-    if not os.path.exists(folder):
-        os.makedirs(folder)
-
-def save_video(filename, video_frames, fps=60, video_format='mp4'):
-    assert fps == int(fps), fps
-    _make_dir(filename)
-
-    skvideo.io.vwrite(
-        filename,
-        video_frames,
-        inputdict={
-            '-r': str(int(fps)),
-        },
-        outputdict={
-            '-f': video_format,
-            '-pix_fmt': 'yuv420p', # '-pix_fmt=yuv420p' needed for osx https://github.com/scikit-video/scikit-video/issues/74
-        }
-    )
-
-def save_videos(filename, *video_frames, axis=1, **kwargs):
-    ## video_frame : [ N x H x W x C ]
-    video_frames = np.concatenate(video_frames, axis=axis)
-    save_video(filename, video_frames, **kwargs)
diff --git a/diffuser/scripts/convert_checkpoints.py b/diffuser/scripts/convert_checkpoints.py
deleted file mode 100644
index a489a34..0000000
--- a/diffuser/scripts/convert_checkpoints.py
+++ /dev/null
@@ -1,67 +0,0 @@
-import os
-import pickle
-import shutil
-import pdb
-
-####
-import sys
-sys.path.append('/home/janner/mount/diffusion')
-import diffusion
-####
-
-import diffuser.datasets as datasets
-import diffuser.models as models
-import diffuser.utils as utils
-
-
-CONFIG_NAMES = ['dataset', 'render', 'model', 'diffusion', 'trainer']
-
-CLASS_MAP = {
-    diffusion.datasets.mujoco.MuJoCoDataset: datasets.GoalDataset,
-    diffusion.utils.rendering.Maze2dRenderer: utils.Maze2dRenderer,
-    diffusion.models.temporal.TemporalMixerUnet: models.TemporalMixerUnet,
-    diffusion.models.diffusion.GaussianDiffusion: models.GaussianDiffusion,
-    diffusion.utils.training.Trainer: utils.Trainer,
-}
-
-CHECKPOINTS = {
-    'maze2d-large-v1': {
-        'logbase': 'logs/maze2d',
-        'diffusion_loadpath': (
-            'diffusion/cond_H384_T256'
-        )
-    }
-}
-
-def convert_checkpoint(*loadpath):
-
-    for config_name in CONFIG_NAMES:
-        fullpath = os.path.join(*loadpath, f'{config_name}_config.pkl')
-        oldpath = os.path.join(*loadpath, f'old_{config_name}_config.pkl')
-
-        config = utils.load_config(fullpath)
-
-        old_class = config._class
-        if old_class in CLASS_MAP:
-            new_class = CLASS_MAP[old_class]
-            print(f'Updating class: {old_class} --> {new_class}')
-            config._class = new_class
-
-        if config_name == 'diffusion' and 'transition_dim' in config._dict:
-            del config._dict['transition_dim']
-
-        if config_name == 'diffusion' and 'observation_weight' in config._dict:
-            del config._dict['observation_weight']
-
-        if config_name == 'diffusion' and 'timesteps' in config._dict:
-            config._dict['n_timesteps'] = config._dict['timesteps']
-            del config._dict['timesteps']
-
-        shutil.copyfile(fullpath, oldpath)
-        pickle.dump(config, open(fullpath, 'wb'))
-
-
-for dataset, config in CHECKPOINTS.items():
-
-    diffusion_experiment = convert_checkpoint(
-        config['logbase'], dataset, config['diffusion_loadpath'])
diff --git a/diffuser/scripts/diffuser_sample.ipynb b/diffuser/scripts/diffuser_sample.ipynb
deleted file mode 100644
index 83a73e4..0000000
--- a/diffuser/scripts/diffuser_sample.ipynb
+++ /dev/null
@@ -1,6279 +0,0 @@
-{
-  "cells": [
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "7Cy2P-c4XFTx"
-      },
-      "source": [
-        "### Setup"
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "Tj7eyweNapes"
-      },
-      "source": [
-        "apt install requirements"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 1,
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "id": "HKMZc5zvfoY1",
-        "outputId": "ba9c9c41-6a2b-4254-d890-c9bb05ea6f6d"
-      },
-      "outputs": [],
-      "source": [
-        "# !apt-get install -y \\\n",
-        "#     libgl1-mesa-dev \\\n",
-        "#     libgl1-mesa-glx \\\n",
-        "#     libglew-dev \\\n",
-        "#     libosmesa6-dev \\\n",
-        "#     software-properties-common\n",
-        "\n",
-        "# !apt-get install -y patchelf"
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "ppxv6Mdkalbc"
-      },
-      "source": [
-        "Clone repo and install dependencies"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 2,
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 1000
-        },
-        "id": "mgQA_XN-XGY2",
-        "outputId": "33efe14b-2d12-49af-e668-1a7e3bab363e"
-      },
-      "outputs": [],
-      "source": [
-        "# %cd /content\n",
-        "\n",
-        "# ## TODO: use when repo is public\n",
-        "# # !git clone https://github.com/jannerm/diffuser.git\n",
-        "# ## backup for private repo\n",
-        "# !curl -L -o diffuser.zip https://www.dropbox.com/s/fe1scd8m2jf7zvj/diffuser.tar?dl=1\n",
-        "# !tar -xf diffuser.zip\n",
-        "# ## /TODO\n",
-        "\n",
-        "# %cd diffuser\n",
-        "# %pip install -f https://download.pytorch.org/whl/torch_stable.html \\\n",
-        "#                 typed-argument-parser \\\n",
-        "#                 scikit-image==0.17.2 \\\n",
-        "#                 scikit-video==1.1.11 \\\n",
-        "#                 gitpython \\\n",
-        "#                 einops \\\n",
-        "#                 pillow \\\n",
-        "#                 free-mujoco-py \\\n",
-        "#                 gym \\\n",
-        "#                 git+https://github.com/JannerM/d4rl.git@0e84a4d29db3ae501043215ce1d91843929f1949 \\\n",
-        "#                 git+https://github.com/aravindr93/mjrl\n",
-        "\n",
-        "# %pip install -e ."
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 3,
-      "metadata": {
-        "id": "qYCkHAZAYNsd"
-      },
-      "outputs": [
-        {
-          "name": "stderr",
-          "output_type": "stream",
-          "text": [
-            "/opt/conda/envs/diffuser/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
-            "  from .autonotebook import tqdm as notebook_tqdm\n",
-            "pybullet build time: Nov 28 2023 23:51:11\n"
-          ]
-        }
-      ],
-      "source": [
-        "import os\n",
-        "import json\n",
-        "import numpy as np\n",
-        "from os.path import join\n",
-        "import pdb\n",
-        "\n",
-        "from diffuser.guides.policies import Policy\n",
-        "import diffuser.datasets as datasets\n",
-        "import diffuser.utils as utils"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 4,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "os.chdir('/root/diffuser')"
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {},
-      "source": [
-        "Arguments"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 5,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "savepath = 'logs/maze2d-large-v1/rollouts'\n",
-        "os.makedirs(savepath, exist_ok=True)\n",
-        "vis_freq = 10\n",
-        "batch_size = 1"
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {},
-      "source": [
-        "Loading"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 6,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "[ utils/serialization ] Loaded config from logs_2/maze2d-large-v1/diffusion/H384_T256/dataset_config.pkl\n",
-            "\n",
-            "[utils/config ] Config: <class 'diffuser.datasets.sequence.GoalDataset'>\n",
-            "    env: maze2d-large-v1\n",
-            "    horizon: 384\n",
-            "    max_path_length: 40000\n",
-            "    normalizer: LimitsNormalizer\n",
-            "    preprocess_fns: ['maze2d_set_terminals']\n",
-            "    use_padding: False\n",
-            "\n",
-            "[ utils/serialization ] Loaded config from logs_2/maze2d-large-v1/diffusion/H384_T256/render_config.pkl\n",
-            "\n",
-            "[utils/config ] Config: <class 'diffuser.utils.rendering.Maze2dRenderer'>\n",
-            "    env: maze2d-large-v1\n",
-            "\n",
-            "[ utils/serialization ] Loaded config from logs_2/maze2d-large-v1/diffusion/H384_T256/model_config.pkl\n",
-            "\n",
-            "[utils/config ] Config: <class 'diffuser.models.temporal.TemporalUnet'>\n",
-            "    cond_dim: 4\n",
-            "    dim_mults: (1, 4, 8)\n",
-            "    horizon: 384\n",
-            "    transition_dim: 6\n",
-            "\n",
-            "[ utils/serialization ] Loaded config from logs_2/maze2d-large-v1/diffusion/H384_T256/diffusion_config.pkl\n",
-            "\n",
-            "[utils/config ] Config: <class 'diffuser.models.diffusion.GaussianDiffusion'>\n",
-            "    action_dim: 2\n",
-            "    action_weight: 1\n",
-            "    clip_denoised: True\n",
-            "    horizon: 384\n",
-            "    loss_discount: 1\n",
-            "    loss_type: l2\n",
-            "    loss_weights: None\n",
-            "    n_timesteps: 256\n",
-            "    observation_dim: 4\n",
-            "    predict_epsilon: False\n",
-            "\n",
-            "[ utils/serialization ] Loaded config from logs_2/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl\n",
-            "\n",
-            "[utils/config ] Config: <class 'diffuser.utils.training.Trainer'>\n",
-            "    bucket: None\n",
-            "    ema_decay: 0.995\n",
-            "    gradient_accumulate_every: 2\n",
-            "    label_freq: 40000\n",
-            "    n_reference: 50\n",
-            "    n_samples: 10\n",
-            "    results_folder: logs/maze2d-large-v1/diffusion/H384_T256\n",
-            "    sample_freq: 1000\n",
-            "    save_freq: 1000\n",
-            "    save_parallel: False\n",
-            "    train_batch_size: 32\n",
-            "    train_lr: 0.0002\n",
-            "\n"
-          ]
-        },
-        {
-          "name": "stderr",
-          "output_type": "stream",
-          "text": [
-            "load datafile: 100%|██████████| 8/8 [00:01<00:00,  7.19it/s]\n"
-          ]
-        },
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "[ utils/preprocessing ] Segmented maze2d-large-v1 | 1061 paths | min length: 67 | max length: 30470\n",
-            "[ datasets/buffer ] Finalized replay buffer | 1062 episodes\n",
-            "[ datasets/buffer ] Fields:\n",
-            "    actions: (1062, 40000, 2)\n",
-            "    infos/goal: (1062, 40000, 2)\n",
-            "    infos/qpos: (1062, 40000, 2)\n",
-            "    infos/qvel: (1062, 40000, 2)\n",
-            "    observations: (1062, 40000, 4)\n",
-            "    rewards: (1062, 40000, 1)\n",
-            "    terminals: (1062, 40000, 1)\n",
-            "    timeouts: (1062, 40000, 1)\n",
-            "    next_observations: (1062, 40000, 4)\n",
-            "    normed_observations: (1062, 40000, 4)\n",
-            "    normed_actions: (1062, 40000, 2)\n",
-            "[ models/temporal ] Channel dimensions: [(6, 32), (32, 128), (128, 256)]\n",
-            "[(6, 32), (32, 128), (128, 256)]\n",
-            "\n",
-            "[ utils/serialization ] Loading model epoch: 1960000\n",
-            "\n"
-          ]
-        }
-      ],
-      "source": [
-        "dataset = 'maze2d-large-v1'\n",
-        "\n",
-        "env = datasets.load_environment(dataset)\n",
-        "\n",
-        "diffusion_experiment = utils.load_diffusion('logs_2', dataset, 'diffusion/H384_T256', epoch='latest')\n",
-        "\n",
-        "diffusion = diffusion_experiment.ema\n",
-        "dataset = diffusion_experiment.dataset\n",
-        "renderer = diffusion_experiment.renderer\n",
-        "\n",
-        "policy = Policy(diffusion, dataset.normalizer)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 7,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "actions: [ Normalizer ] dim: 2\n",
-              "    -: [-1. -1.]\n",
-              "    +: [1. 1.]\n",
-              "]\n",
-              "infos/goal: [ Normalizer ] dim: 2\n",
-              "    -: [0.9 0.9]\n",
-              "    +: [ 7.1 10.1]\n",
-              "]\n",
-              "infos/qpos: [ Normalizer ] dim: 2\n",
-              "    -: [0.4  0.44]\n",
-              "    +: [ 7.22 10.22]\n",
-              "]\n",
-              "infos/qvel: [ Normalizer ] dim: 2\n",
-              "    -: [-5.23 -5.23]\n",
-              "    +: [5.23 5.23]\n",
-              "]\n",
-              "observations: [ Normalizer ] dim: 4\n",
-              "    -: [ 0.4   0.44 -5.23 -5.23]\n",
-              "    +: [ 7.22 10.22  5.23  5.23]\n",
-              "]\n",
-              "rewards: [ Normalizer ] dim: 1\n",
-              "    -: [0.]\n",
-              "    +: [1.]\n",
-              "]\n",
-              "terminals: [ Normalizer ] dim: 1\n",
-              "    -: [0.]\n",
-              "    +: [0.]\n",
-              "]\n",
-              "timeouts: [ Normalizer ] dim: 1\n",
-              "    -: [0.]\n",
-              "    +: [0.]\n",
-              "]\n",
-              "next_observations: [ Normalizer ] dim: 4\n",
-              "    -: [ 0.4   0.44 -5.23 -5.23]\n",
-              "    +: [ 7.22 10.22  5.23  5.23]\n",
-              "]"
-            ]
-          },
-          "execution_count": 7,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "dataset.normalizer"
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {},
-      "source": [
-        "Main Loop"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 8,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "from tqdm import tqdm"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 29,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "Resetting target\n"
-          ]
-        },
-        {
-          "name": "stderr",
-          "output_type": "stream",
-          "text": [
-            "  0%|          | 0/1 [00:00<?, ?it/s]"
-          ]
-        },
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "\n",
-            "\u001b[F                                                                                                    \n",
-            "\u001b[F1 / 256 [                                                            ]   0% | 104.8 Hz\n",
-            "t : 255\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F2 / 256 [                                                            ]   0% | 113.3 Hz\n",
-            "t : 254\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F3 / 256 [                                                            ]   1% | 116.9 Hz\n",
-            "t : 253\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F4 / 256 [                                                            ]   1% | 118.0 Hz\n",
-            "t : 252\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F5 / 256 [#                                                           ]   1% | 118.2 Hz\n",
-            "t : 251\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F6 / 256 [#                                                           ]   2% | 119.2 Hz\n",
-            "t : 250\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F7 / 256 [#                                                           ]   2% | 120.0 Hz\n",
-            "t : 249\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F8 / 256 [#                                                           ]   3% | 120.6 Hz\n",
-            "t : 248\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F9 / 256 [##                                                          ]   3% | 121.0 Hz\n",
-            "t : 247\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F10 / 256 [##                                                          ]   3% | 121.4 Hz\n",
-            "t : 246\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F11 / 256 [##                                                          ]   4% | 121.6 Hz\n",
-            "t : 245\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F12 / 256 [##                                                          ]   4% | 121.9 Hz\n",
-            "t : 244\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F13 / 256 [###                                                         ]   5% | 122.1 Hz\n",
-            "t : 243\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F14 / 256 [###                                                         ]   5% | 122.3 Hz\n",
-            "t : 242\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F15 / 256 [###                                                         ]   5% | 122.6 Hz\n",
-            "t : 241\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F16 / 256 [###                                                         ]   6% | 122.7 Hz\n",
-            "t : 240\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F17 / 256 [###                                                         ]   6% | 122.9 Hz\n",
-            "t : 239\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F18 / 256 [####                                                        ]   7% | 123.0 Hz\n",
-            "t : 238\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F19 / 256 [####                                                        ]   7% | 123.1 Hz\n",
-            "t : 237\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F20 / 256 [####                                                        ]   7% | 123.2 Hz\n",
-            "t : 236\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F21 / 256 [####                                                        ]   8% | 123.3 Hz\n",
-            "t : 235\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F22 / 256 [#####                                                       ]   8% | 123.4 Hz\n",
-            "t : 234\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F23 / 256 [#####                                                       ]   8% | 123.0 Hz\n",
-            "t : 233\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F24 / 256 [#####                                                       ]   9% | 123.0 Hz\n",
-            "t : 232\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F25 / 256 [#####                                                       ]   9% | 122.8 Hz\n",
-            "t : 231\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F26 / 256 [######                                                      ]  10% | 122.6 Hz\n",
-            "t : 230\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F27 / 256 [######                                                      ]  10% | 122.5 Hz\n",
-            "t : 229\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F28 / 256 [######                                                      ]  10% | 122.5 Hz\n",
-            "t : 228\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F29 / 256 [######                                                      ]  11% | 122.6 Hz\n",
-            "t : 227\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F30 / 256 [#######                                                     ]  11% | 122.6 Hz\n",
-            "t : 226\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F31 / 256 [#######                                                     ]  12% | 122.7 Hz\n",
-            "t : 225\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F32 / 256 [#######                                                     ]  12% | 122.7 Hz\n",
-            "t : 224\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F33 / 256 [#######                                                     ]  12% | 122.8 Hz\n",
-            "t : 223\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F34 / 256 [#######                                                     ]  13% | 122.9 Hz\n",
-            "t : 222\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F35 / 256 [########                                                    ]  13% | 123.0 Hz\n",
-            "t : 221\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F36 / 256 [########                                                    ]  14% | 123.0 Hz\n",
-            "t : 220\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F37 / 256 [########                                                    ]  14% | 123.0 Hz\n",
-            "t : 219\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F38 / 256 [########                                                    ]  14% | 123.1 Hz\n",
-            "t : 218\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F39 / 256 [#########                                                   ]  15% | 123.1 Hz\n",
-            "t : 217\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F40 / 256 [#########                                                   ]  15% | 123.2 Hz\n",
-            "t : 216\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F41 / 256 [#########                                                   ]  16% | 123.2 Hz\n",
-            "t : 215\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F42 / 256 [#########                                                   ]  16% | 123.2 Hz\n",
-            "t : 214\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F43 / 256 [##########                                                  ]  16% | 123.2 Hz\n",
-            "t : 213\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F44 / 256 [##########                                                  ]  17% | 123.2 Hz\n",
-            "t : 212\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F45 / 256 [##########                                                  ]  17% | 123.3 Hz\n",
-            "t : 211\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F46 / 256 [##########                                                  ]  17% | 123.3 Hz\n",
-            "t : 210\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F47 / 256 [###########                                                 ]  18% | 123.4 Hz\n",
-            "t : 209\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F48 / 256 [###########                                                 ]  18% | 123.2 Hz\n",
-            "t : 208\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F49 / 256 [###########                                                 ]  19% | 123.2 Hz\n",
-            "t : 207\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F50 / 256 [###########                                                 ]  19% | 123.1 Hz\n",
-            "t : 206\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F51 / 256 [###########                                                 ]  19% | 123.1 Hz\n",
-            "t : 205\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F52 / 256 [############                                                ]  20% | 123.1 Hz\n",
-            "t : 204\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F53 / 256 [############                                                ]  20% | 123.1 Hz\n",
-            "t : 203\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F54 / 256 [############                                                ]  21% | 123.1 Hz\n",
-            "t : 202\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F55 / 256 [############                                                ]  21% | 123.1 Hz\n",
-            "t : 201\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F56 / 256 [#############                                               ]  21% | 123.1 Hz\n",
-            "t : 200\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F57 / 256 [#############                                               ]  22% | 123.1 Hz\n",
-            "t : 199\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F58 / 256 [#############                                               ]  22% | 123.2 Hz\n",
-            "t : 198\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F59 / 256 [#############                                               ]  23% | 123.2 Hz\n",
-            "t : 197\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F60 / 256 [##############                                              ]  23% | 123.2 Hz\n",
-            "t : 196\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F61 / 256 [##############                                              ]  23% | 123.3 Hz\n",
-            "t : 195\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F62 / 256 [##############                                              ]  24% | 123.3 Hz\n",
-            "t : 194\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F63 / 256 [##############                                              ]  24% | 123.3 Hz\n",
-            "t : 193\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F64 / 256 [###############                                             ]  25% | 123.4 Hz\n",
-            "t : 192\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F65 / 256 [###############                                             ]  25% | 123.4 Hz\n",
-            "t : 191\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F66 / 256 [###############                                             ]  25% | 123.4 Hz\n",
-            "t : 190\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F67 / 256 [###############                                             ]  26% | 123.5 Hz\n",
-            "t : 189\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F68 / 256 [###############                                             ]  26% | 123.5 Hz\n",
-            "t : 188\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F69 / 256 [################                                            ]  26% | 123.5 Hz\n",
-            "t : 187\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F70 / 256 [################                                            ]  27% | 123.5 Hz\n",
-            "t : 186\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F71 / 256 [################                                            ]  27% | 123.6 Hz\n",
-            "t : 185\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F72 / 256 [################                                            ]  28% | 123.6 Hz\n",
-            "t : 184\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F73 / 256 [#################                                           ]  28% | 123.6 Hz\n",
-            "t : 183\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F74 / 256 [#################                                           ]  28% | 123.5 Hz\n",
-            "t : 182\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F75 / 256 [#################                                           ]  29% | 123.4 Hz\n",
-            "t : 181\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F76 / 256 [#################                                           ]  29% | 123.4 Hz\n",
-            "t : 180\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F77 / 256 [##################                                          ]  30% | 123.4 Hz\n",
-            "t : 179\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F78 / 256 [##################                                          ]  30% | 123.4 Hz\n",
-            "t : 178\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F79 / 256 [##################                                          ]  30% | 123.4 Hz\n",
-            "t : 177\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F80 / 256 [##################                                          ]  31% | 123.4 Hz\n",
-            "t : 176\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F81 / 256 [##################                                          ]  31% | 123.5 Hz\n",
-            "t : 175\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F82 / 256 [###################                                         ]  32% | 123.5 Hz\n",
-            "t : 174\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F83 / 256 [###################                                         ]  32% | 123.5 Hz\n",
-            "t : 173\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F84 / 256 [###################                                         ]  32% | 123.5 Hz\n",
-            "t : 172\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F85 / 256 [###################                                         ]  33% | 123.5 Hz\n",
-            "t : 171\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F86 / 256 [####################                                        ]  33% | 123.5 Hz\n",
-            "t : 170\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F87 / 256 [####################                                        ]  33% | 123.6 Hz\n",
-            "t : 169\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F88 / 256 [####################                                        ]  34% | 123.6 Hz\n",
-            "t : 168\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F89 / 256 [####################                                        ]  34% | 123.6 Hz\n",
-            "t : 167\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F90 / 256 [#####################                                       ]  35% | 123.6 Hz\n",
-            "t : 166\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F91 / 256 [#####################                                       ]  35% | 123.6 Hz\n",
-            "t : 165\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F92 / 256 [#####################                                       ]  35% | 123.5 Hz\n",
-            "t : 164\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F93 / 256 [#####################                                       ]  36% | 123.5 Hz\n",
-            "t : 163\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F94 / 256 [######################                                      ]  36% | 123.5 Hz\n",
-            "t : 162\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F95 / 256 [######################                                      ]  37% | 123.6 Hz\n",
-            "t : 161\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F96 / 256 [######################                                      ]  37% | 123.6 Hz\n",
-            "t : 160\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F97 / 256 [######################                                      ]  37% | 123.6 Hz\n",
-            "t : 159\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F98 / 256 [######################                                      ]  38% | 123.6 Hz\n",
-            "t : 158\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F99 / 256 [#######################                                     ]  38% | 123.5 Hz\n",
-            "t : 157\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F100 / 256 [#######################                                     ]  39% | 0.0 Hz\n",
-            "t : 156\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F101 / 256 [#######################                                     ]  39% | 121.4 Hz\n",
-            "t : 155\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F102 / 256 [#######################                                     ]  39% | 123.2 Hz\n",
-            "t : 154\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F103 / 256 [########################                                    ]  40% | 123.4 Hz\n",
-            "t : 153\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F104 / 256 [########################                                    ]  40% | 123.2 Hz\n",
-            "t : 152\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F105 / 256 [########################                                    ]  41% | 123.6 Hz\n",
-            "t : 151\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F106 / 256 [########################                                    ]  41% | 124.0 Hz\n",
-            "t : 150\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F107 / 256 [#########################                                   ]  41% | 124.2 Hz\n",
-            "t : 149\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F108 / 256 [#########################                                   ]  42% | 124.3 Hz\n",
-            "t : 148\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F109 / 256 [#########################                                   ]  42% | 124.5 Hz\n",
-            "t : 147\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F110 / 256 [#########################                                   ]  42% | 124.4 Hz\n",
-            "t : 146\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F111 / 256 [##########################                                  ]  43% | 124.5 Hz\n",
-            "t : 145\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F112 / 256 [##########################                                  ]  43% | 124.5 Hz\n",
-            "t : 144\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F113 / 256 [##########################                                  ]  44% | 124.5 Hz\n",
-            "t : 143\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F114 / 256 [##########################                                  ]  44% | 124.6 Hz\n",
-            "t : 142\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F115 / 256 [##########################                                  ]  44% | 124.6 Hz\n",
-            "t : 141\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F116 / 256 [###########################                                 ]  45% | 124.6 Hz\n",
-            "t : 140\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F117 / 256 [###########################                                 ]  45% | 124.6 Hz\n",
-            "t : 139\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F118 / 256 [###########################                                 ]  46% | 124.5 Hz\n",
-            "t : 138\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F119 / 256 [###########################                                 ]  46% | 124.5 Hz\n",
-            "t : 137\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F120 / 256 [############################                                ]  46% | 124.5 Hz\n",
-            "t : 136\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F121 / 256 [############################                                ]  47% | 124.4 Hz\n",
-            "t : 135\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F122 / 256 [############################                                ]  47% | 124.4 Hz\n",
-            "t : 134\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F123 / 256 [############################                                ]  48% | 124.5 Hz\n",
-            "t : 133\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F124 / 256 [#############################                               ]  48% | 124.1 Hz\n",
-            "t : 132\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F125 / 256 [#############################                               ]  48% | 123.8 Hz\n",
-            "t : 131\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F126 / 256 [#############################                               ]  49% | 123.7 Hz\n",
-            "t : 130\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F127 / 256 [#############################                               ]  49% | 123.8 Hz\n",
-            "t : 129\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F128 / 256 [##############################                              ]  50% | 123.8 Hz\n",
-            "t : 128\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F129 / 256 [##############################                              ]  50% | 123.9 Hz\n",
-            "t : 127\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F130 / 256 [##############################                              ]  50% | 123.9 Hz\n",
-            "t : 126\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F131 / 256 [##############################                              ]  51% | 123.9 Hz\n",
-            "t : 125\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F132 / 256 [##############################                              ]  51% | 124.0 Hz\n",
-            "t : 124\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F133 / 256 [###############################                             ]  51% | 124.0 Hz\n",
-            "t : 123\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F134 / 256 [###############################                             ]  52% | 124.1 Hz\n",
-            "t : 122\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F135 / 256 [###############################                             ]  52% | 124.1 Hz\n",
-            "t : 121\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F136 / 256 [###############################                             ]  53% | 124.1 Hz\n",
-            "t : 120\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F137 / 256 [################################                            ]  53% | 124.2 Hz\n",
-            "t : 119\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F138 / 256 [################################                            ]  53% | 124.2 Hz\n",
-            "t : 118\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F139 / 256 [################################                            ]  54% | 124.2 Hz\n",
-            "t : 117\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F140 / 256 [################################                            ]  54% | 124.2 Hz\n",
-            "t : 116\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F141 / 256 [#################################                           ]  55% | 124.2 Hz\n",
-            "t : 115\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F142 / 256 [#################################                           ]  55% | 124.2 Hz\n",
-            "t : 114\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F143 / 256 [#################################                           ]  55% | 124.3 Hz\n",
-            "t : 113\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F144 / 256 [#################################                           ]  56% | 124.3 Hz\n",
-            "t : 112\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F145 / 256 [#################################                           ]  56% | 124.3 Hz\n",
-            "t : 111\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F146 / 256 [##################################                          ]  57% | 124.4 Hz\n",
-            "t : 110\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F147 / 256 [##################################                          ]  57% | 124.4 Hz\n",
-            "t : 109\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F148 / 256 [##################################                          ]  57% | 124.4 Hz\n",
-            "t : 108\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F149 / 256 [##################################                          ]  58% | 124.4 Hz\n",
-            "t : 107\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F150 / 256 [###################################                         ]  58% | 124.3 Hz\n",
-            "t : 106\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F151 / 256 [###################################                         ]  58% | 124.1 Hz\n",
-            "t : 105\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F152 / 256 [###################################                         ]  59% | 124.1 Hz\n",
-            "t : 104\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F153 / 256 [###################################                         ]  59% | 124.1 Hz\n",
-            "t : 103\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F154 / 256 [####################################                        ]  60% | 124.1 Hz\n",
-            "t : 102\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F155 / 256 [####################################                        ]  60% | 124.1 Hz\n",
-            "t : 101\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F156 / 256 [####################################                        ]  60% | 124.1 Hz\n",
-            "t : 100\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F157 / 256 [####################################                        ]  61% | 124.1 Hz\n",
-            "t : 99\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F158 / 256 [#####################################                       ]  61% | 124.2 Hz\n",
-            "t : 98\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F159 / 256 [#####################################                       ]  62% | 124.2 Hz\n",
-            "t : 97\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F160 / 256 [#####################################                       ]  62% | 124.2 Hz\n",
-            "t : 96\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F161 / 256 [#####################################                       ]  62% | 124.2 Hz\n",
-            "t : 95\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F162 / 256 [#####################################                       ]  63% | 124.2 Hz\n",
-            "t : 94\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F163 / 256 [######################################                      ]  63% | 124.2 Hz\n",
-            "t : 93\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F164 / 256 [######################################                      ]  64% | 124.2 Hz\n",
-            "t : 92\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F165 / 256 [######################################                      ]  64% | 124.3 Hz\n",
-            "t : 91\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F166 / 256 [######################################                      ]  64% | 124.3 Hz\n",
-            "t : 90\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F167 / 256 [#######################################                     ]  65% | 124.3 Hz\n",
-            "t : 89\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F168 / 256 [#######################################                     ]  65% | 124.3 Hz\n",
-            "t : 88\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F169 / 256 [#######################################                     ]  66% | 124.3 Hz\n",
-            "t : 87\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F170 / 256 [#######################################                     ]  66% | 124.3 Hz\n",
-            "t : 86\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F171 / 256 [########################################                    ]  66% | 124.4 Hz\n",
-            "t : 85\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F172 / 256 [########################################                    ]  67% | 124.4 Hz\n",
-            "t : 84\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F173 / 256 [########################################                    ]  67% | 124.4 Hz\n",
-            "t : 83\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F174 / 256 [########################################                    ]  67% | 124.4 Hz\n",
-            "t : 82\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F175 / 256 [#########################################                   ]  68% | 124.4 Hz\n",
-            "t : 81\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F176 / 256 [#########################################                   ]  68% | 124.3 Hz\n",
-            "t : 80\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F177 / 256 [#########################################                   ]  69% | 124.2 Hz\n",
-            "t : 79\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F178 / 256 [#########################################                   ]  69% | 124.2 Hz\n",
-            "t : 78\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F179 / 256 [#########################################                   ]  69% | 124.2 Hz\n",
-            "t : 77\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F180 / 256 [##########################################                  ]  70% | 124.2 Hz\n",
-            "t : 76\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F181 / 256 [##########################################                  ]  70% | 124.2 Hz\n",
-            "t : 75\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F182 / 256 [##########################################                  ]  71% | 124.2 Hz\n",
-            "t : 74\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F183 / 256 [##########################################                  ]  71% | 124.2 Hz\n",
-            "t : 73\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F184 / 256 [###########################################                 ]  71% | 124.2 Hz\n",
-            "t : 72\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F185 / 256 [###########################################                 ]  72% | 124.2 Hz\n",
-            "t : 71\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F186 / 256 [###########################################                 ]  72% | 124.2 Hz\n",
-            "t : 70\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F187 / 256 [###########################################                 ]  73% | 124.2 Hz\n",
-            "t : 69\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F188 / 256 [############################################                ]  73% | 124.2 Hz\n",
-            "t : 68\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F189 / 256 [############################################                ]  73% | 124.3 Hz\n",
-            "t : 67\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F190 / 256 [############################################                ]  74% | 124.3 Hz\n",
-            "t : 66\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F191 / 256 [############################################                ]  74% | 124.3 Hz\n",
-            "t : 65\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F192 / 256 [#############################################               ]  75% | 124.3 Hz\n",
-            "t : 64\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F193 / 256 [#############################################               ]  75% | 124.3 Hz\n",
-            "t : 63\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F194 / 256 [#############################################               ]  75% | 124.3 Hz\n",
-            "t : 62\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F195 / 256 [#############################################               ]  76% | 124.3 Hz\n",
-            "t : 61\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F196 / 256 [#############################################               ]  76% | 124.4 Hz\n",
-            "t : 60\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F197 / 256 [##############################################              ]  76% | 124.4 Hz\n",
-            "t : 59\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F198 / 256 [##############################################              ]  77% | 124.4 Hz\n",
-            "t : 58\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F199 / 256 [##############################################              ]  77% | 124.4 Hz\n",
-            "t : 57\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F200 / 256 [##############################################              ]  78% | 0.0 Hz\n",
-            "t : 56\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F201 / 256 [###############################################             ]  78% | 124.9 Hz\n",
-            "t : 55\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F202 / 256 [###############################################             ]  78% | 121.1 Hz\n",
-            "t : 54\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F203 / 256 [###############################################             ]  79% | 119.7 Hz\n",
-            "t : 53\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F204 / 256 [###############################################             ]  79% | 120.5 Hz\n",
-            "t : 52\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F205 / 256 [################################################            ]  80% | 121.2 Hz\n",
-            "t : 51\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F206 / 256 [################################################            ]  80% | 121.3 Hz\n",
-            "t : 50\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F207 / 256 [################################################            ]  80% | 121.7 Hz\n",
-            "t : 49\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F208 / 256 [################################################            ]  81% | 121.7 Hz\n",
-            "t : 48\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F209 / 256 [################################################            ]  81% | 122.0 Hz\n",
-            "t : 47\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F210 / 256 [#################################################           ]  82% | 122.1 Hz\n",
-            "t : 46\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F211 / 256 [#################################################           ]  82% | 122.3 Hz\n",
-            "t : 45\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F212 / 256 [#################################################           ]  82% | 122.4 Hz\n",
-            "t : 44\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F213 / 256 [#################################################           ]  83% | 122.4 Hz\n",
-            "t : 43\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F214 / 256 [##################################################          ]  83% | 122.4 Hz\n",
-            "t : 42\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F215 / 256 [##################################################          ]  83% | 122.5 Hz\n",
-            "t : 41\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F216 / 256 [##################################################          ]  84% | 122.5 Hz\n",
-            "t : 40\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F217 / 256 [##################################################          ]  84% | 122.6 Hz\n",
-            "t : 39\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F218 / 256 [###################################################         ]  85% | 122.6 Hz\n",
-            "t : 38\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F219 / 256 [###################################################         ]  85% | 122.7 Hz\n",
-            "t : 37\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F220 / 256 [###################################################         ]  85% | 122.8 Hz\n",
-            "t : 36\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F221 / 256 [###################################################         ]  86% | 122.8 Hz\n",
-            "t : 35\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F222 / 256 [####################################################        ]  86% | 122.9 Hz\n",
-            "t : 34\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F223 / 256 [####################################################        ]  87% | 123.0 Hz\n",
-            "t : 33\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F224 / 256 [####################################################        ]  87% | 123.1 Hz\n",
-            "t : 32\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F225 / 256 [####################################################        ]  87% | 123.2 Hz\n",
-            "t : 31\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F226 / 256 [####################################################        ]  88% | 123.3 Hz\n",
-            "t : 30\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F227 / 256 [#####################################################       ]  88% | 123.1 Hz\n",
-            "t : 29\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F228 / 256 [#####################################################       ]  89% | 122.9 Hz\n",
-            "t : 28\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F229 / 256 [#####################################################       ]  89% | 122.9 Hz\n",
-            "t : 27\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F230 / 256 [#####################################################       ]  89% | 123.0 Hz\n",
-            "t : 26\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F231 / 256 [######################################################      ]  90% | 123.0 Hz\n",
-            "t : 25\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F232 / 256 [######################################################      ]  90% | 123.0 Hz\n",
-            "t : 24\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F233 / 256 [######################################################      ]  91% | 123.0 Hz\n",
-            "t : 23\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F234 / 256 [######################################################      ]  91% | 123.0 Hz\n",
-            "t : 22\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F235 / 256 [#######################################################     ]  91% | 123.1 Hz\n",
-            "t : 21\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F236 / 256 [#######################################################     ]  92% | 123.1 Hz\n",
-            "t : 20\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F237 / 256 [#######################################################     ]  92% | 123.2 Hz\n",
-            "t : 19\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F238 / 256 [#######################################################     ]  92% | 123.3 Hz\n",
-            "t : 18\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F239 / 256 [########################################################    ]  93% | 123.3 Hz\n",
-            "t : 17\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F240 / 256 [########################################################    ]  93% | 123.4 Hz\n",
-            "t : 16\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F241 / 256 [########################################################    ]  94% | 123.4 Hz\n",
-            "t : 15\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F242 / 256 [########################################################    ]  94% | 123.5 Hz\n",
-            "t : 14\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F243 / 256 [########################################################    ]  94% | 123.5 Hz\n",
-            "t : 13\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F244 / 256 [#########################################################   ]  95% | 123.6 Hz\n",
-            "t : 12\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F245 / 256 [#########################################################   ]  95% | 123.6 Hz\n",
-            "t : 11\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F246 / 256 [#########################################################   ]  96% | 123.6 Hz\n",
-            "t : 10\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F247 / 256 [#########################################################   ]  96% | 123.7 Hz\n",
-            "t : 9\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F248 / 256 [##########################################################  ]  96% | 123.7 Hz\n",
-            "t : 8\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F249 / 256 [##########################################################  ]  97% | 123.3 Hz\n",
-            "t : 7\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F250 / 256 [##########################################################  ]  97% | 122.9 Hz\n",
-            "t : 6\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F251 / 256 [##########################################################  ]  98% | 122.5 Hz\n",
-            "t : 5\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F252 / 256 [########################################################### ]  98% | 122.1 Hz\n",
-            "t : 4\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F253 / 256 [########################################################### ]  98% | 122.0 Hz\n",
-            "t : 3\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F254 / 256 [########################################################### ]  99% | 122.0 Hz\n",
-            "t : 2\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F255 / 256 [########################################################### ]  99% | 122.0 Hz\n",
-            "t : 1\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[F256 / 256 [############################################################] 100% | 122.1 Hz\n",
-            "t : 0\n",
-            "\u001b[F\u001b[F                                                                                                    \n",
-            "                                                                                                    \n",
-            "\u001b[F\u001b[Fsparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 0 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.310145   -0.69643604]\n",
-            "maze | pos: [7.02321469 9.98279837] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/0.png\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 1 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.54555254 -0.73097996]\n",
-            "maze | pos: [7.02029257 9.98021088] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 2 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.47699791 -0.48052125]\n",
-            "maze | pos: [7.01624138 9.97648513] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 3 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.58607364 -0.39547399]\n",
-            "maze | pos: [7.01080402 9.97182637] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 4 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.74317658 -0.65425115]\n",
-            "maze | pos: [7.00360963 9.96562051] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 5 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.78393556 -0.75502363]\n",
-            "maze | pos: [6.99456532 9.95763125] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 6 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.73269158 -0.98531903]\n",
-            "maze | pos: [6.98379755 9.94731434] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 7 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.80343862 -0.58266967]\n",
-            "maze | pos: [6.97114192 9.93563429] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 8 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.84991392 -0.15854045]\n",
-            "maze | pos: [6.95649225 9.92360447] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 9 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.91288983 -0.35506073]\n",
-            "maze | pos: [6.93970329 9.91075767] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 10 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.85172392 -0.58182237]\n",
-            "maze | pos: [6.92092582 9.89655579] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 11 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.65660423 -0.57088809]\n",
-            "maze | pos: [6.90062927 9.88102807] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 12 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.81108012 -0.31082984]\n",
-            "maze | pos: [6.87844937 9.86479706] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 13 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.83511416 -0.30049477]\n",
-            "maze | pos: [6.85433335 9.84788903] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 14 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.74699809 -0.18498944]\n",
-            "maze | pos: [6.82849569 9.83058069] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 15 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.64757761 -0.04401963]\n",
-            "maze | pos: [6.80117726 9.81320874] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 16 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.39718865  0.29419739]\n",
-            "maze | pos: [6.77297794 9.79657883] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 17 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.55653247  0.23306459]\n",
-            "maze | pos: [6.74352032 9.7805436 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 18 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.60581625 -0.15307268]\n",
-            "maze | pos: [6.71269003 9.764182  ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 19 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.46035959 -0.30121536]\n",
-            "maze | pos: [6.68083675 9.74714198] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 20 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.65922054 -0.02187165]\n",
-            "maze | pos: [6.64748931 9.73009045] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 21 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.66811993 -0.2583684 ]\n",
-            "maze | pos: [6.61263007 9.7124642 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 22 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.69804802 -0.06446926]\n",
-            "maze | pos: [6.57619135 9.69472638] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 23 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.76108559 -0.0036299 ]\n",
-            "maze | pos: [6.53802679 9.67702216] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 24 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.74347828  0.01354721]\n",
-            "maze | pos: [6.49818242 9.65939237] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 25 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.63572226  0.25208515]\n",
-            "maze | pos: [6.45691889 9.64240494] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 26 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.72460876  0.36586939]\n",
-            "maze | pos: [6.41402788 9.62632934] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 27 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.58606538  0.22022   ]\n",
-            "maze | pos: [6.36984322 9.61081651] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 28 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.47755348  0.19830085]\n",
-            "maze | pos: [6.37860609 9.59581291] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 29 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.75674666  0.19812738]\n",
-            "maze | pos: [6.38496645 9.58131691] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 30 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.44137425  0.089807  ]\n",
-            "maze | pos: [6.38911306 9.56706932] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 31 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.13331797  0.18273759]\n",
-            "maze | pos: [6.39224029 9.55329088] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 32 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.79099678  0.07191736]\n",
-            "maze | pos: [6.39458925 9.53971653] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 33 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.51752931  0.02762269]\n",
-            "maze | pos: [6.3963538 9.5262403] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 34 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.2612931  -0.00548211]\n",
-            "maze | pos: [6.39767935 9.51278311] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 35 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.96718551 -0.07141201]\n",
-            "maze | pos: [6.39867511 9.4991879 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 36 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.85660021 -0.01212032]\n",
-            "maze | pos: [6.39942313 9.48559619] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 37 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.65156916e+00 -6.76605154e-04]\n",
-            "maze | pos: [6.39998504 9.47203524] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 38 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.52629278 -0.15548097]\n",
-            "maze | pos: [6.40040716 9.4581363 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 39 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.28479228 -0.11115161]\n",
-            "maze | pos: [6.40072425 9.44400573] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 40 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.1583073  -0.09271216]\n",
-            "maze | pos: [6.40096246 9.42968801] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 41 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.02219309  0.12867964]\n",
-            "maze | pos: [6.4011414  9.41571085] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 42 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.2661288   0.11284432]\n",
-            "maze | pos: [6.40127202 9.40203574] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 43 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.51566372  0.01102852]\n",
-            "maze | pos: [6.40136013 9.38841947] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 44 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.75909021  0.03824151]\n",
-            "maze | pos: [6.40141614 9.3749267 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 45 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.98125451 -0.0815356 ]\n",
-            "maze | pos: [6.40145027 9.36127188] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 46 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.07596266  0.22673882]\n",
-            "maze | pos: [6.40147048 9.34818958] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 47 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.33560103  0.24097391]\n",
-            "maze | pos: [6.40148224 9.33571236] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 48 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.67631177  0.2423745 ]\n",
-            "maze | pos: [6.40148901 9.32384211] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 49 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.86180986 -0.05518189]\n",
-            "maze | pos: [6.40149287 9.3118687 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 50 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.08255406  0.07528492]\n",
-            "maze | pos: [6.40149508 9.3001031 ] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 51 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.30887594  0.08093911]\n",
-            "maze | pos: [6.40156454 9.28855966] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 52 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.55900289  0.31922238]\n",
-            "maze | pos: [6.4015373  9.27780398] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 53 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.77723146  0.12913749]\n",
-            "maze | pos: [6.40152047 9.26738148] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 54 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.98105772  0.29155334]\n",
-            "maze | pos: [6.40151077 9.25767818] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 55 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-6.0170584   0.19017667]\n",
-            "maze | pos: [6.40150522 9.24845091] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 56 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-6.18820111  0.27801616]\n",
-            "maze | pos: [6.40150208 9.23990776] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 57 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-6.22555799  0.23487767]\n",
-            "maze | pos: [6.40150029 9.23194434] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 58 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-6.01691569 -0.08008514]\n",
-            "maze | pos: [6.40149928 9.22380916] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 59 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.75821169 -0.25477536]\n",
-            "maze | pos: [6.40149871 9.21508657] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 60 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.67448901 -0.15314662]\n",
-            "maze | pos: [6.40149839 9.20602002] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 61 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.56101767 -0.08862921]\n",
-            "maze | pos: [6.4014982  9.19676398] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 62 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.31179493 -0.265561  ]\n",
-            "maze | pos: [6.4014981  9.18689751] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 63 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.11223331 -0.0709232 ]\n",
-            "maze | pos: [6.40149804 9.17688562] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 64 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-5.07703262 -0.09448173]\n",
-            "maze | pos: [6.40149801 9.16667256] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 65 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.92803353  0.17767458]\n",
-            "maze | pos: [6.40149799 9.15690698] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 66 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.69416326 -0.08311889]\n",
-            "maze | pos: [6.40149798 9.14696669] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 67 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.63982918 -0.32387314]\n",
-            "maze | pos: [6.40149797 9.13627874] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 68 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.44601107 -0.47041045]\n",
-            "maze | pos: [6.40149797 9.12449589] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 69 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.22444274 -0.59275633]\n",
-            "maze | pos: [6.40149797 9.11132937] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 70 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-4.24429624 -0.67477635]\n",
-            "maze | pos: [6.40149796 9.09658714] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 71 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.98410322 -0.73452945]\n",
-            "maze | pos: [6.40149796 9.08013063] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 72 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.82483751 -0.56813313]\n",
-            "maze | pos: [6.40149796 9.06236023] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 73 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.63512406 -0.65296779]\n",
-            "maze | pos: [6.40149796 9.04307702] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 74 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.46379815 -0.7071755 ]\n",
-            "maze | pos: [6.40149796 9.0221555 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 75 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.37720167 -0.74812758]\n",
-            "maze | pos: [6.40149796 8.99950203] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 76 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.16573131 -0.78371881]\n",
-            "maze | pos: [6.40149796 8.97503598] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 77 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.04437315 -0.8278405 ]\n",
-            "maze | pos: [6.40149796 8.94865659] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 78 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-3.00048888 -0.86036001]\n",
-            "maze | pos: [6.40149796 8.92029096] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 79 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-2.75853169 -0.87317915]\n",
-            "maze | pos: [6.40149796 8.88991328] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 80 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-2.64208567 -0.75037043]\n",
-            "maze | pos: [6.40149796 8.85782085] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 81 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-2.41818965 -0.80377121]\n",
-            "maze | pos: [6.40149796 8.82389055] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 82 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-2.30750287 -0.85385574]\n",
-            "maze | pos: [6.40149796 8.78800749] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 83 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-2.08765996 -0.8517503 ]\n",
-            "maze | pos: [6.40149796 8.75018132] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 84 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.88604701 -0.90673154]\n",
-            "maze | pos: [6.40149796 8.71028574] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 85 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.62163461 -0.45431555]\n",
-            "maze | pos: [6.40149796 8.66940316] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 86 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.42256797 -0.60870776]\n",
-            "maze | pos: [6.40149796 8.62716823] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 87 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.27628339 -0.66202611]\n",
-            "maze | pos: [6.40149796 8.58345717] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 88 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.20140946 -0.51179322]\n",
-            "maze | pos: [6.40149796 8.53863132] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 89 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.96537364 -0.31024481]\n",
-            "maze | pos: [6.40150218 8.49317333] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 90 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.73468091 -0.15470244]\n",
-            "maze | pos: [6.40153288 8.44745516] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 91 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.60691139  0.10902323]\n",
-            "maze | pos: [6.40156834 8.40210553] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 92 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.33405114  0.35988537]\n",
-            "maze | pos: [6.40162775 8.35772103] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 93 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.35019738  0.51352328]\n",
-            "maze | pos: [6.40166759 8.31466525] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 94 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.1430722   0.63080383]\n",
-            "maze | pos: [6.40172589 8.27321437] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 95 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.07426687 0.68440438]\n",
-            "maze | pos: [6.40196094 8.23349221] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 96 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.22343366 0.79191926]\n",
-            "maze | pos: [6.40272756 8.19575073] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 97 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.18627909 0.66016806]\n",
-            "maze | pos: [6.40393601 8.15967141] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 98 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02330773  0.78717382]\n",
-            "maze | pos: [6.40508607 8.12555278] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 99 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00695072  0.83031361]\n",
-            "maze | pos: [6.40621683 8.09349291] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 100 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.00519989 0.84789416]\n",
-            "maze | pos: [6.40735729 8.06352878] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 101 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.06995112  0.80617707]\n",
-            "maze | pos: [6.40832843 8.03555604] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 102 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.12575148  0.92213418]\n",
-            "maze | pos: [6.40899776 8.0098461 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 103 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.32624247  0.80116333]\n",
-            "maze | pos: [6.40888851 7.98610548] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 104 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.37310203  0.76782755]\n",
-            "maze | pos: [6.40789093 7.96425009] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 105 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.50527976  0.43571851]\n",
-            "maze | pos: [6.40569232 7.94348447] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 106 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.64139841  0.18904619]\n",
-            "maze | pos: [6.40197138 7.92321855] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 107 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.72605426 -0.09065795]\n",
-            "maze | pos: [6.39653009 7.90278498] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 108 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.54377612 -0.30811538]\n",
-            "maze | pos: [6.38980669 7.88166626] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 109 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.64271563 -0.40482278]\n",
-            "maze | pos: [6.38156859 7.85963369] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 110 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.66630623 -0.55692111]\n",
-            "maze | pos: [6.3717632  7.83632721] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 111 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.50946501 -0.66572784]\n",
-            "maze | pos: [6.36076781 7.81149072] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 112 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.40404876 -0.73489503]\n",
-            "maze | pos: [6.3488363  7.78496312] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 113 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.53757896 -0.78875839]\n",
-            "maze | pos: [6.3356529  7.75662017] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 114 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.42121328 -0.85351232]\n",
-            "maze | pos: [6.32149771 7.72631196] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 115 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.30873667 -0.8809389 ]\n",
-            "maze | pos: [6.30664094 7.69397785] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 116 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.28337405 -0.89679806]\n",
-            "maze | pos: [6.29114465 7.65958491] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 117 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.228057   -0.85354874]\n",
-            "maze | pos: [6.27514212 7.62324103] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 118 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.06215509 -0.83567406]\n",
-            "maze | pos: [6.25902968 7.58499343] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 119 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.18025647 -0.677304  ]\n",
-            "maze | pos: [6.24338491 7.54522384] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 120 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.23576456 -0.68702495]\n",
-            "maze | pos: [6.22833891 7.50391272] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 121 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.02803207 -0.70906408]\n",
-            "maze | pos: [6.21339551 7.46101125] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 122 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.09872671 -0.55591273]\n",
-            "maze | pos: [6.19825256 7.41688797] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 123 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.09832476 -0.58973633]\n",
-            "maze | pos: [6.18291151 7.37146524] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 124 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.00055791 -0.42252793]\n",
-            "maze | pos: [6.16760832 7.37983925] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 125 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.07603018 -5.61697068]\n",
-            "maze | pos: [6.1521605  7.38581167] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 126 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0402438  -5.35542301]\n",
-            "maze | pos: [6.13665363 7.38974956] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 127 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.1132819  -4.96740088]\n",
-            "maze | pos: [6.12091389 7.39271841] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 128 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.09772116e-03 -4.76616860e+00]\n",
-            "maze | pos: [6.1052214  7.39494841] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 129 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.17240145 -4.52728264]\n",
-            "maze | pos: [6.08915568 7.39662361] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 130 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.0634055  -4.25909732]\n",
-            "maze | pos: [6.07327924 7.39788203] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 131 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.13359159 -4.00978026]\n",
-            "maze | pos: [6.05712244 7.39882736] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 132 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.14783474 -3.92657381]\n",
-            "maze | pos: [6.04065203 7.3995375 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 133 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.07942741 -3.64591808]\n",
-            "maze | pos: [6.02403168 7.40007096] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 134 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01057676 -3.78520538]\n",
-            "maze | pos: [6.00742572 7.4004717 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 135 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.17976931 -4.02046784]\n",
-            "maze | pos: [5.99128746 7.40077274] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 136 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.36522972 -4.27616004]\n",
-            "maze | pos: [5.97605748 7.40099888] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 137 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.54066494 -4.52368923]\n",
-            "maze | pos: [5.96215144 7.40116876] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 138 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.60457142 -4.75054315]\n",
-            "maze | pos: [5.94971839 7.40129098] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 139 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.66526691 -4.99514879]\n",
-            "maze | pos: [5.93889937 7.40137242] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 140 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.67370654 -5.21946285]\n",
-            "maze | pos: [5.92971065 7.40142372] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 141 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.75844339 -5.45088878]\n",
-            "maze | pos: [5.92235015 7.4014548 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 142 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.78966436 -5.51170246]\n",
-            "maze | pos: [5.91688788 7.40147313] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 143 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.57210768 -5.70300927]\n",
-            "maze | pos: [5.91280117 7.40148377] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 144 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.51923647 -5.93757043]\n",
-            "maze | pos: [5.90996082 7.40148988] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 145 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.32420131 -6.15201616]\n",
-            "maze | pos: [5.90789937 7.40149337] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 146 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.09614824 -6.25444387]\n",
-            "maze | pos: [5.90607182 7.40149536] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 147 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01766789 -6.07714472]\n",
-            "maze | pos: [5.90420654 7.40149649] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 148 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.08073653 -5.83257562]\n",
-            "maze | pos: [5.90215342 7.40149713] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 149 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.05253438 -5.67178709]\n",
-            "maze | pos: [5.89998008 7.40149749] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 150 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.25401071 -5.42908635]\n",
-            "maze | pos: [5.89720694 7.40149769] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 151 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.24600089 -5.33239831]\n",
-            "maze | pos: [5.89385453 7.40149781] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 152 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.15178051 -5.06157319]\n",
-            "maze | pos: [5.89014862 7.40149788] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 153 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.17591199 -5.02886148]\n",
-            "maze | pos: [5.88603257 7.40149791] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 154 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.07515104 -4.86421036]\n",
-            "maze | pos: [5.88174734 7.40149794] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 155 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.12665931 -4.94157726]\n",
-            "maze | pos: [5.87717066 7.40149795] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 156 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.18103131 -4.66996562]\n",
-            "maze | pos: [5.87217373 7.40149795] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 157 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.36193123 -4.48858769]\n",
-            "maze | pos: [5.86632671 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 158 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.50806725 -4.2243376 ]\n",
-            "maze | pos: [5.85928359 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 159 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.61744067 -4.0184103 ]\n",
-            "maze | pos: [5.85078672 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 160 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.72422124 -3.76966358]\n",
-            "maze | pos: [5.84058525 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 161 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.72849663 -3.56849427]\n",
-            "maze | pos: [5.82867306 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 162 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.75457079 -3.34533612]\n",
-            "maze | pos: [5.81499213 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 163 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.66185145 -3.1131958 ]\n",
-            "maze | pos: [5.79976749 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 164 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.74964701 -2.87232126]\n",
-            "maze | pos: [5.78279372 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 165 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.76285735 -2.68761791]\n",
-            "maze | pos: [5.76404353 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 166 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.81644868 -2.49578727]\n",
-            "maze | pos: [5.74339351 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 167 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.84968217 -2.25899137]\n",
-            "maze | pos: [5.72076903 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 168 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.89422966 -2.02121509]\n",
-            "maze | pos: [5.69606871 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 169 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.86890541 -1.81940568]\n",
-            "maze | pos: [5.66935779 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 170 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.90218297 -1.61388505]\n",
-            "maze | pos: [5.64056182 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 171 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.82186268 -1.36325515]\n",
-            "maze | pos: [5.60987704 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 172 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.84833558 -1.26570332]\n",
-            "maze | pos: [5.57724492 7.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 173 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.81945755 -0.99363435]\n",
-            "maze | pos: [5.54273887 7.40149874] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 174 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.7082852  -0.99705099]\n",
-            "maze | pos: [5.50662811 7.40149877] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 175 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.77310174 -0.86555472]\n",
-            "maze | pos: [5.46876212 7.40151481] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 176 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.54906384 -0.5711073 ]\n",
-            "maze | pos: [5.42967863 7.4015611 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 177 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.63753271 -0.30157789]\n",
-            "maze | pos: [5.38916985 7.40162706] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 178 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.61046125 -0.33555214]\n",
-            "maze | pos: [5.34730365 7.40166924] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 179 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.73787474 -0.14621153]\n",
-            "maze | pos: [5.30377981 7.40172669] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 180 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.76262281 -0.30689982]\n",
-            "maze | pos: [5.25854334 7.4017453 ] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 181 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.79890149 -0.44311184]\n",
-            "maze | pos: [5.21151191 7.40070853] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 182 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.82954117 -0.31269937]\n",
-            "maze | pos: [5.16261683 7.39892949] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 183 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.699519   -0.23528595]\n",
-            "maze | pos: [5.11217219 7.39659432] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 184 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.65569745 -0.38945651]\n",
-            "maze | pos: [5.06072964 7.39333717] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 185 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.32277018 -0.25473876]\n",
-            "maze | pos: [5.01008    7.38948108] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 186 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.38108107 -0.13831026]\n",
-            "maze | pos: [4.95929148 7.38530477] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 187 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.11340398 -0.29904605]\n",
-            "maze | pos: [4.90914048 7.38042619] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 188 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.02151768 -0.30203369]\n",
-            "maze | pos: [4.85931081 7.37483989] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 189 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.25161719 -0.42360183]\n",
-            "maze | pos: [4.81019907 7.36825803] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 190 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.36827486 -0.24029866]\n",
-            "maze | pos: [4.76208141 7.36111954] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 191 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.50300818 -0.13117589]\n",
-            "maze | pos: [4.71527632 7.35368564] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 192 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.53929806 -0.1816999 ]\n",
-            "maze | pos: [4.66986712 7.3458367 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 193 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.5666938  -0.33071231]\n",
-            "maze | pos: [4.62591572 7.33721881] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 194 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.6309246  -0.44065989]\n",
-            "maze | pos: [4.58357164 7.32757196] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 195 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.73226013 -0.51601394]\n",
-            "maze | pos: [4.54307239 7.31671912] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 196 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.58009057 -0.59079866]\n",
-            "maze | pos: [4.50405115 7.30448507] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 197 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.70798263 -0.47076884]\n",
-            "maze | pos: [4.46680901 7.29115895] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 198 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.75550139 -0.36254858]\n",
-            "maze | pos: [4.4314549 7.2770011] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 199 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.82502672 -0.19701418]\n",
-            "maze | pos: [4.3981499  7.26240776] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 200 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.76846209 -0.13477456]\n",
-            "maze | pos: [4.39967496 7.2475282 ] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 201 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-2.4841255  -0.20077926]\n",
-            "maze | pos: [4.40016165 7.23220588] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 202 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-2.18265938  0.04425103]\n",
-            "maze | pos: [4.40054007 7.21702545] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 203 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.92525877 -0.05005314]\n",
-            "maze | pos: [4.4008241  7.20176196] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 204 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.78081265  0.0372975 ]\n",
-            "maze | pos: [4.40103746 7.18662366] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 205 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.61759576 -0.00184515]\n",
-            "maze | pos: [4.40119747 7.17151701] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 206 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.68501654  0.2468328 ]\n",
-            "maze | pos: [4.40131059 7.15703421] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 207 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.42225993  0.15863693]\n",
-            "maze | pos: [4.40138499 7.14296372] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 208 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.24432492  0.20895687]\n",
-            "maze | pos: [4.40143143 7.1294244 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 209 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-1.04350239  0.25026694]\n",
-            "maze | pos: [4.40145938 7.11651337] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 210 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.88015047 -0.07610178]\n",
-            "maze | pos: [4.40148966 7.10345184] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 211 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.60338511 -0.26690644]\n",
-            "maze | pos: [4.40154108 7.08978575] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 212 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.40996815 -0.34383662]\n",
-            "maze | pos: [4.40159914 7.07533331] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 213 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.15339844 -0.08937302]\n",
-            "maze | pos: [4.40167434 7.06070243] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 214 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.0195546  -0.01393145]\n",
-            "maze | pos: [4.40179593 7.04607322] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 215 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.28820953 0.23712347]\n",
-            "maze | pos: [4.40260364 7.0320436 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 216 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.44267641 0.16926354]\n",
-            "maze | pos: [4.40446373 7.01845051] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 217 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.57272484 0.1161425 ]\n",
-            "maze | pos: [4.40768341 7.00516641] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 218 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.66931223 0.12009086]\n",
-            "maze | pos: [4.41248948 6.99219995] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 219 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.76092863 0.05571088]\n",
-            "maze | pos: [4.41909636 6.97939707] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 220 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.73084236 -0.03186569]\n",
-            "maze | pos: [4.4274281  6.96654878] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 221 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.81509793 0.07940428]\n",
-            "maze | pos: [4.43768128 6.9539202 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 222 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.87457475 0.17525047]\n",
-            "maze | pos: [4.44999295 6.94173908] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 223 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.89468989 0.11494321]\n",
-            "maze | pos: [4.46440613 6.92986073] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 224 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.87389581 0.25224964]\n",
-            "maze | pos: [4.48086629 6.91861143] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 225 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.93482243 -0.00742033]\n",
-            "maze | pos: [4.49951365 6.90737126] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 226 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.94152921 0.23989551]\n",
-            "maze | pos: [4.52035898 6.8967292 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 227 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.96765357 0.21971974]\n",
-            "maze | pos: [4.54345927 6.88663577] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 228 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.9826324  0.18150153]\n",
-            "maze | pos: [4.56884482 6.87699866] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 229 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.97344336 0.01419004]\n",
-            "maze | pos: [4.5964883  6.86741829] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 230 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.95874295 -0.01003585]\n",
-            "maze | pos: [4.62634932 6.85783684] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 231 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.78593863 -0.07751533]\n",
-            "maze | pos: [4.65801105 6.8480936 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 232 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.39658615 -0.21779   ]\n",
-            "maze | pos: [4.69054189 6.83785486] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 233 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.27238801 -0.04727187]\n",
-            "maze | pos: [4.72364398 6.82752793] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 234 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.02567577 0.02718622]\n",
-            "maze | pos: [4.75672839 6.81729033] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 235 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.26937502 -0.03147941]\n",
-            "maze | pos: [4.78909245 6.80700215] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 236 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.39505628  0.21297995]\n",
-            "maze | pos: [4.82043855 6.79724571] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 237 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.50452651 -0.04449116]\n",
-            "maze | pos: [4.8505084  6.78740654] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 238 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.61627235  0.07475486]\n",
-            "maze | pos: [4.87903889 6.77776885] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 239 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.68770492  0.01990137]\n",
-            "maze | pos: [4.90586356 6.76820151] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 240 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.68135886  0.0962432 ]\n",
-            "maze | pos: [4.9310016  6.75888617] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 241 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.4421377   0.34293249]\n",
-            "maze | pos: [4.95502676 6.75040976] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 242 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.13943869  0.29599101]\n",
-            "maze | pos: [4.97866261 6.74265848] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 243 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.12762809 0.13895879]\n",
-            "maze | pos: [5.00254613 6.73525661] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 244 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.32630042 0.28344244]\n",
-            "maze | pos: [5.02714989 6.72854742] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 245 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.4712228  0.30013527]\n",
-            "maze | pos: [5.05281734 6.72256903] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 246 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.38669223 0.19104795]\n",
-            "maze | pos: [5.07934463 6.71705988] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 247 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.52480894 -0.01391688]\n",
-            "maze | pos: [5.10705863 6.71153071] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 248 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.69469881 -0.16975685]\n",
-            "maze | pos: [5.13636116 6.70561041] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 249 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.75887492 -0.16745093]\n",
-            "maze | pos: [5.16740126 6.6993054 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 250 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.75025025 0.00670935]\n",
-            "maze | pos: [5.20015426 6.69303139] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 251 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[0.51930806 0.05704015]\n",
-            "maze | pos: [5.19917135 6.68690817] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 252 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.14867294 -0.15326312]\n",
-            "maze | pos: [5.19896935 6.68043451] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 253 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.17257607 0.02007175]\n",
-            "maze | pos: [5.19880736 6.67402408] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 254 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[3.97374337 0.14748891]\n",
-            "maze | pos: [5.19869269 6.66798017] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 255 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[3.82686754 0.04014691]\n",
-            "maze | pos: [5.19861711 6.66204628] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 256 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[3.62938126 0.1393746 ]\n",
-            "maze | pos: [5.19856985 6.65645846] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 257 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[3.42773579 0.10056954]\n",
-            "maze | pos: [5.19854138 6.65112347] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 258 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 3.20002345 -0.02169517]\n",
-            "maze | pos: [5.19852464 6.64574951] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 259 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.95698293 -0.02409254]\n",
-            "maze | pos: [5.19851494 6.64033098] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 260 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.7257462  -0.17273232]\n",
-            "maze | pos: [5.19850938 6.63451396] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 261 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.48395875 -0.13687527]\n",
-            "maze | pos: [5.19850621 6.62838481] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 262 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.26960556 -0.22857541]\n",
-            "maze | pos: [5.1985044  6.62172587] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 263 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.03893548 -0.22693314]\n",
-            "maze | pos: [5.19850338 6.61454232] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 264 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.25547941 -0.24271815]\n",
-            "maze | pos: [5.1985028  6.60679781] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 265 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.48508994 -0.20233248]\n",
-            "maze | pos: [5.19850247 6.59858987] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 266 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.78713571 -0.31059677]\n",
-            "maze | pos: [5.19850228 6.58966174] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 267 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 3.07796845 -0.15100771]\n",
-            "maze | pos: [5.19850217 6.58039523] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 268 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 3.35079143 -0.10620258]\n",
-            "maze | pos: [5.19850212 6.57089785] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 269 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 3.63005755 -0.06285966]\n",
-            "maze | pos: [5.19850208 6.56127338] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 270 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[3.85729793e+00 3.66847174e-03]\n",
-            "maze | pos: [5.19850206 6.55168058] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 271 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.08802702e+00 -3.90264948e-03]\n",
-            "maze | pos: [5.19850205 6.54210132] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 272 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.10812679 0.27539619]\n",
-            "maze | pos: [5.19850204 6.53320077] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 273 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.38168303 0.18391656]\n",
-            "maze | pos: [5.19850204 6.52475945] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 274 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.52635087 0.10590944]\n",
-            "maze | pos: [5.19850204 6.51659046] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 275 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.79667161 -0.07994533]\n",
-            "maze | pos: [5.19850204 6.50825053] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 276 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.0057856  0.08825942]\n",
-            "maze | pos: [5.19850204 6.50014067] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 277 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.184733   0.09873437]\n",
-            "maze | pos: [5.19850204 6.49228527] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 278 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.21868617 0.35305209]\n",
-            "maze | pos: [5.19850204 6.48528942] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 279 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.35555797 0.25721184]\n",
-            "maze | pos: [5.19850204 6.47892281] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 280 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.34808449 0.05790823]\n",
-            "maze | pos: [5.19850204 6.47270929] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 281 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 5.1089311  -0.06493998]\n",
-            "maze | pos: [5.19850204 6.4663559 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 282 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.90242913 0.10541766]\n",
-            "maze | pos: [5.19850204 6.46026871] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 283 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.65449336 0.08250514]\n",
-            "maze | pos: [5.19850204 6.45439252] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 284 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.72664931 -0.09549463]\n",
-            "maze | pos: [5.19850204 6.44830288] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 285 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.71689465 -0.05594851]\n",
-            "maze | pos: [5.19850204 6.4420945 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 286 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.51479867 -0.07998171]\n",
-            "maze | pos: [5.19850204 6.43571042] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 287 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.27576449e+00 7.90040941e-04]\n",
-            "maze | pos: [5.19850204 6.42934343] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 288 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.09321502 0.17817362]\n",
-            "maze | pos: [5.19850204 6.42341594] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 289 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.35573247 0.24023594]\n",
-            "maze | pos: [5.19850204 6.41807473] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 290 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.31715491 0.15224572]\n",
-            "maze | pos: [5.19850204 6.41310883] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 291 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.58514026 0.13897961]\n",
-            "maze | pos: [5.19850204 6.40848576] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 292 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[4.78544429 0.29809084]\n",
-            "maze | pos: [5.19850204 6.40458364] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 293 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.05573418 0.25019975]\n",
-            "maze | pos: [5.19850204 6.4012867 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 294 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.30676749 0.0617413 ]\n",
-            "maze | pos: [5.19850204 6.39814466] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 295 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 5.53863623 -0.06706388]\n",
-            "maze | pos: [5.19850204 6.39485038] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 296 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 5.75363543 -0.10288323]\n",
-            "maze | pos: [5.19850204 6.39131892] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 297 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[6.01191953 0.06199194]\n",
-            "maze | pos: [5.19850204 6.38794351] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 298 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[6.24058535 0.20448474]\n",
-            "maze | pos: [5.19850204 6.38506314] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 299 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 6.29145482 -0.08156152]\n",
-            "maze | pos: [5.19850204 6.38199539] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 300 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[6.46081307 0.03162727]\n",
-            "maze | pos: [5.19850204 6.37901027] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 301 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 6.41562655 -0.02206923]\n",
-            "maze | pos: [5.19850204 6.37597969] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 302 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[6.34238675 0.12736364]\n",
-            "maze | pos: [5.19850204 6.37325967] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 303 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[6.34545234e+00 5.79965572e-03]\n",
-            "maze | pos: [5.19850204 6.37055994] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 304 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[6.05866626 0.08843432]\n",
-            "maze | pos: [5.19850204 6.36807726] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 305 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 5.82418111 -0.01674536]\n",
-            "maze | pos: [5.19850204 6.3655606 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 306 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.61315062 0.08271883]\n",
-            "maze | pos: [5.19850204 6.36324695] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 307 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.47076276 0.25624458]\n",
-            "maze | pos: [5.19850204 6.36154909] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 308 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.26004126 0.17481685]\n",
-            "maze | pos: [5.19850204 6.36027163] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 309 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[5.23587611 0.013098  ]\n",
-            "maze | pos: [5.19850204 6.3590284 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 310 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 5.06396153 -0.23530546]\n",
-            "maze | pos: [5.19850204 6.35722772] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 311 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.89235452 -0.42094037]\n",
-            "maze | pos: [5.19850204 6.3544288 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 312 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.69645932 -0.48654998]\n",
-            "maze | pos: [5.19850204 6.35047776] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 313 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.45788338 -0.59418451]\n",
-            "maze | pos: [5.19850204 6.345121  ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 314 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.26618054 -0.67858881]\n",
-            "maze | pos: [5.19850204 6.33816084] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 315 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.01855948 -0.74054766]\n",
-            "maze | pos: [5.19850204 6.32945355] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 316 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 4.09862378 -0.81209999]\n",
-            "maze | pos: [5.19850204 6.31883286] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 317 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 3.8652735  -0.85346545]\n",
-            "maze | pos: [5.19850204 6.30620482] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 318 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 3.64453652 -0.80847084]\n",
-            "maze | pos: [5.19850204 6.29168137] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 319 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 3.37951281 -0.8366881 ]\n",
-            "maze | pos: [5.19994621 6.27512299] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 320 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 3.00269453 -0.84694815]\n",
-            "maze | pos: [5.20376859 6.25658692] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 321 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.63845886 -0.87848677]\n",
-            "maze | pos: [5.2099635  6.23600276] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 322 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.25867986 -0.8505684 ]\n",
-            "maze | pos: [5.21852529 6.21344188] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 323 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 1.75618266 -0.89465017]\n",
-            "maze | pos: [5.22944833 6.18880399] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 324 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 1.28267729 -0.93713391]\n",
-            "maze | pos: [5.242727   6.16199287] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 325 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.77999724 -0.94936501]\n",
-            "maze | pos: [5.25783171 6.13298456] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 326 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.36343776 -0.92520728]\n",
-            "maze | pos: [5.27376602 6.10184183] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 327 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.33561998 -0.93026378]\n",
-            "maze | pos: [5.29046171 6.06855772] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 328 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.03470595 -0.82839799]\n",
-            "maze | pos: [5.3072003  6.03337993] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 329 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.29235468 -0.66066273]\n",
-            "maze | pos: [5.32320273 5.99671246] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 330 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.11394131 -0.6823247 ]\n",
-            "maze | pos: [5.33889569 5.95850727] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 331 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.31647172 -0.7500538 ]\n",
-            "maze | pos: [5.35379755 5.91860672] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 332 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.50459189 -0.60707344]\n",
-            "maze | pos: [5.36746216 5.87735537] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 333 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.59553876 -0.66048359]\n",
-            "maze | pos: [5.37967587 5.83462922] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 334 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.67005543 -0.72229336]\n",
-            "maze | pos: [5.39026467 5.7902846 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 335 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.77196803 -0.61956261]\n",
-            "maze | pos: [5.39898969 5.74457001] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 336 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.85134919 -0.48707144]\n",
-            "maze | pos: [5.40566633 5.69780427] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 337 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.59653447 -0.39743535]\n",
-            "maze | pos: [5.41090634 5.65020337] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 338 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.66619194 -0.27142741]\n",
-            "maze | pos: [5.41454725 5.60206939] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 339 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.78874779 -0.02459077]\n",
-            "maze | pos: [5.41630096 5.55399148] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 340 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.56612934  0.02410654]\n",
-            "maze | pos: [5.41670219 5.50608548] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 341 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.21908477  0.24443987]\n",
-            "maze | pos: [5.41658068 5.45887575] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 342 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.04369473  0.35373964]\n",
-            "maze | pos: [5.41635539 5.41262094] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 343 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.23202763  0.27732357]\n",
-            "maze | pos: [5.41557804 5.36713677] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 344 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.11950881  0.40696982]\n",
-            "maze | pos: [5.41451791 5.37667648] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 345 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.13606401 -4.9245201 ]\n",
-            "maze | pos: [5.41378436 5.38381183] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 346 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.32121371 -4.57842233]\n",
-            "maze | pos: [5.41381757 5.38854854] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 347 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.14258656 -4.13963581]\n",
-            "maze | pos: [5.41419029 5.39181033] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 348 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.26499725 -4.29447002]\n",
-            "maze | pos: [5.41519325 5.39426637] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 349 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.38980734 -4.30132576]\n",
-            "maze | pos: [5.41712221 5.39611126] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 350 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.5581486  -4.52595275]\n",
-            "maze | pos: [5.42037588 5.39749715] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 351 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.64724891 -4.50185297]\n",
-            "maze | pos: [5.42516331 5.39853823] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 352 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.72215023 -4.52186768]\n",
-            "maze | pos: [5.43165924 5.39932031] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 353 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.78016123 -4.7375938 ]\n",
-            "maze | pos: [5.43999776 5.3999078 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 354 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.83823499 -4.96850758]\n",
-            "maze | pos: [5.45031279 5.40034914] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 355 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.90224224 -5.18528889]\n",
-            "maze | pos: [5.46275207 5.40068067] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 356 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.77907369 -5.25977916]\n",
-            "maze | pos: [5.4770172  5.40092972] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 357 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.57683237 -5.41729487]\n",
-            "maze | pos: [5.49262216 5.4011168 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 358 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.50217156 -5.38165704]\n",
-            "maze | pos: [5.50938595 5.40125475] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 359 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.49629999 -5.47204028]\n",
-            "maze | pos: [5.52729182 5.40134882] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 360 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.67091049 -5.29323766]\n",
-            "maze | pos: [5.54675291 5.40140911] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 361 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.28186271 -5.12229916]\n",
-            "maze | pos: [5.56683894 5.40144605] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 362 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.0818271 -4.9313256]\n",
-            "maze | pos: [5.58707202 5.40146801] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 363 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.06959604 -4.7996574 ]\n",
-            "maze | pos: [5.60742266 5.40148081] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 364 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 2.58014939e-03 -4.55985692e+00]\n",
-            "maze | pos: [5.62773098 5.40148819] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 365 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.08814092 -4.39398344]\n",
-            "maze | pos: [5.64778102 5.40149241] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 366 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.2760993  -4.16915649]\n",
-            "maze | pos: [5.66712573 5.40149481] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 367 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0805228  -4.16792253]\n",
-            "maze | pos: [5.6862326  5.40149618] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 368 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.09065969 -3.87171332]\n",
-            "maze | pos: [5.70507804 5.40149695] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 369 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.07844054 -3.78470425]\n",
-            "maze | pos: [5.72406541 5.40149739] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 370 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.10179395 -3.63925226]\n",
-            "maze | pos: [5.74276513 5.40149764] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 371 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.35835667 -3.4345528 ]\n",
-            "maze | pos: [5.76056684 5.40149778] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 372 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.49989678 -3.36077616]\n",
-            "maze | pos: [5.77713557 5.40149786] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 373 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.63735009 -3.17040743]\n",
-            "maze | pos: [5.79214691 5.4014979 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 374 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.51736879 -3.11451703]\n",
-            "maze | pos: [5.80589031 5.40149793] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 375 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.24239604 -2.86119917]\n",
-            "maze | pos: [5.81902368 5.40149794] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 376 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.22758013 -2.62611187]\n",
-            "maze | pos: [5.83158375 5.40149795] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 377 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.24035805 -2.40085791]\n",
-            "maze | pos: [5.84354147 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 378 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.46777323 -2.15399633]\n",
-            "maze | pos: [5.85435664 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 379 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.4044449  -2.05779615]\n",
-            "maze | pos: [5.86418281 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 380 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00367509 -2.06707648]\n",
-            "maze | pos: [5.87397683 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 381 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.04754623 -1.88479945]\n",
-            "maze | pos: [5.88386076 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 382 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.06301767 -1.47614663]\n",
-            "maze | pos: [5.89387123 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 383 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.04035266 -1.47614661]\n",
-            "maze | pos: [5.90395397 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 384 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.02304351 -1.4761466 ]\n",
-            "maze | pos: [5.91406757 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 385 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[ 0.00984312 -1.47614659]\n",
-            "maze | pos: [5.92418054 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 386 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-2.05424666e-04 -1.47614659e+00]\n",
-            "maze | pos: [5.93426892 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 387 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00783635 -1.47614658]\n",
-            "maze | pos: [5.94431462 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 388 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01361302 -1.47614658]\n",
-            "maze | pos: [5.95430397 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 389 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01796772 -1.47614658]\n",
-            "maze | pos: [5.96422674 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 390 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02123212 -1.47614658]\n",
-            "maze | pos: [5.9740753  5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 391 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02366072 -1.47614658]\n",
-            "maze | pos: [5.98384406 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 392 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02544878 -1.47614658]\n",
-            "maze | pos: [5.99352895 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 393 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02674612 -1.47614658]\n",
-            "maze | pos: [6.00312707 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 394 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02766769 -1.47614658]\n",
-            "maze | pos: [6.01263643 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 395 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02830169 -1.47614658]\n",
-            "maze | pos: [6.02205574 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 396 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02871578 -1.47614658]\n",
-            "maze | pos: [6.03138423 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 397 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02896187 -1.47614658]\n",
-            "maze | pos: [6.04062153 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 398 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02907978 -1.47614658]\n",
-            "maze | pos: [6.04976757 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 399 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02910008 -1.47614658]\n",
-            "maze | pos: [6.05882251 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 400 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02904619 -1.47614658]\n",
-            "maze | pos: [6.06778672 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 401 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02893608 -1.47614658]\n",
-            "maze | pos: [6.07666066 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 402 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02878354 -1.47614658]\n",
-            "maze | pos: [6.08544492 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 403 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02859915 -1.47614658]\n",
-            "maze | pos: [6.09414014 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 404 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02839099 -1.47614658]\n",
-            "maze | pos: [6.10274703 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 405 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02816529 -1.47614658]\n",
-            "maze | pos: [6.11126635 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 406 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0279268  -1.47614658]\n",
-            "maze | pos: [6.11969887 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 407 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02767917 -1.47614658]\n",
-            "maze | pos: [6.12804538 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 408 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02742518 -1.47614658]\n",
-            "maze | pos: [6.13630669 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 409 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02716698 -1.47614658]\n",
-            "maze | pos: [6.14448363 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 410 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02690618 -1.47614658]\n",
-            "maze | pos: [6.15257701 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 411 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02664403 -1.47614658]\n",
-            "maze | pos: [6.16058766 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 412 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02638148 -1.47614658]\n",
-            "maze | pos: [6.16851641 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 413 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02611926 -1.47614658]\n",
-            "maze | pos: [6.17636406 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 414 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02585791 -1.47614658]\n",
-            "maze | pos: [6.18413143 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 415 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02559784 -1.47614658]\n",
-            "maze | pos: [6.19181935 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 416 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02533937 -1.47614658]\n",
-            "maze | pos: [6.1994286  5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 417 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02508272 -1.47614658]\n",
-            "maze | pos: [6.20695999 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 418 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02482806 -1.47614658]\n",
-            "maze | pos: [6.21441432 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 419 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02457554 -1.47614658]\n",
-            "maze | pos: [6.22179236 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 420 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02432522 -1.47614658]\n",
-            "maze | pos: [6.2290949  5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 421 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02407719 -1.47614658]\n",
-            "maze | pos: [6.2363227  5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 422 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02383147 -1.47614658]\n",
-            "maze | pos: [6.24347652 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 423 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02358811 -1.47614658]\n",
-            "maze | pos: [6.25055714 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 424 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0233471  -1.47614658]\n",
-            "maze | pos: [6.25756528 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 425 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02310846 -1.47614658]\n",
-            "maze | pos: [6.2645017  5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 426 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02287219 -1.47614658]\n",
-            "maze | pos: [6.27136712 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 427 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02263829 -1.47614658]\n",
-            "maze | pos: [6.27816228 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 428 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02240673 -1.47614658]\n",
-            "maze | pos: [6.28488789 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 429 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0221775  -1.47614658]\n",
-            "maze | pos: [6.29154466 5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 430 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0219506  -1.47614658]\n",
-            "maze | pos: [6.2981333  5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 431 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.021726   -1.47614658]\n",
-            "maze | pos: [6.3046545  5.40149796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 432 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02150368 -1.47614658]\n",
-            "maze | pos: [6.31120255 5.40115721] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 433 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.03073632 -1.4417303 ]\n",
-            "maze | pos: [6.31787075 5.40032234] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 434 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.04941892 -1.39148384]\n",
-            "maze | pos: [6.32473638 5.39896605] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 435 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.07602791 -1.33798567]\n",
-            "maze | pos: [6.33140458 5.39523135] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 436 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.06295387 -1.09641015]\n",
-            "maze | pos: [6.33920483 5.39305952] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 437 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.18395805 -1.25052556]\n",
-            "maze | pos: [6.34713222 5.38989709] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 438 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.20459995 -1.14830215]\n",
-            "maze | pos: [6.35523181 5.38565442] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 439 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.22992012 -1.03603674]\n",
-            "maze | pos: [6.36349941 5.3801799 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 440 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.25498828 -0.90737563]\n",
-            "maze | pos: [6.37114004 5.37255736] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 441 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.19993087 -0.68495287]\n",
-            "maze | pos: [6.37940287 5.3644605 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 442 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.27041543 -0.62942272]\n",
-            "maze | pos: [6.387002   5.35488386] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 443 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.21164347 -0.47186873]\n",
-            "maze | pos: [6.39407897 5.34420621] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 444 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.16650478 -0.35108982]\n",
-            "maze | pos: [6.40074253 5.33271782] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 445 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.13182745 -0.25852756]\n",
-            "maze | pos: [6.40707626 5.32064108] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 446 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.10517762 -0.18761502]\n",
-            "maze | pos: [6.41314441 5.30814626] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 447 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0846878  -0.13331333]\n",
-            "maze | pos: [6.4189964 5.2953637] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 448 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.06892501 -0.09175617]\n",
-            "maze | pos: [6.42467031 5.28239305] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 449 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.05678974 -0.05997686]\n",
-            "maze | pos: [6.43019545 5.26931045] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 450 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0474383  -0.03569908]\n",
-            "maze | pos: [6.43559445 5.25617399] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 451 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.04022332 -0.01717619]\n",
-            "maze | pos: [6.4408848 5.2430279] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 452 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.03464808 -0.00306799]\n",
-            "maze | pos: [6.44608003 5.22990582] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 453 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.03033142  0.00765386]\n",
-            "maze | pos: [6.45119064 5.21683322] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 454 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02698087  0.01577838]\n",
-            "maze | pos: [6.45622483 5.20382933] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 455 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02437202  0.02191101]\n",
-            "maze | pos: [6.46118898 5.19090859] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 456 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.02233268  0.02651628]\n",
-            "maze | pos: [6.46608811 5.17808178] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 457 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0207307   0.02995062]\n",
-            "maze | pos: [6.47092621 5.16535685] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 458 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0194647   0.03248751]\n",
-            "maze | pos: [6.47570643 5.1527396 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 459 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01845687  0.03433679]\n",
-            "maze | pos: [6.4804313  5.14023418] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 460 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01764751  0.03565946]\n",
-            "maze | pos: [6.48510289 5.12784347] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 461 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01699081  0.03657904]\n",
-            "maze | pos: [6.48972289 5.11556939] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 462 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01645161  0.0371903 ]\n",
-            "maze | pos: [6.49429271 5.10341311] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 463 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01600293  0.03756595]\n",
-            "maze | pos: [6.49881353 5.09137525] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 464 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01562406  0.03776177]\n",
-            "maze | pos: [6.50328637 5.079456  ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 465 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01529912  0.03782055]\n",
-            "maze | pos: [6.50771212 5.06765521] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 466 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0150159   0.03777512]\n",
-            "maze | pos: [6.51209157 5.05597249] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 467 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01476505  0.03765065]\n",
-            "maze | pos: [6.51642542 5.04440727] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 468 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01453938  0.03746645]\n",
-            "maze | pos: [6.52071432 5.03295882] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 469 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01433336  0.03723732]\n",
-            "maze | pos: [6.52495887 5.02162633] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 470 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01414276  0.03697463]\n",
-            "maze | pos: [6.52915963 5.01040888] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 471 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01396433  0.03668706]\n",
-            "maze | pos: [6.53331713 4.99930553] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 472 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01379556  0.0363813 ]\n",
-            "maze | pos: [6.53743187 4.98831526] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 473 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01363453  0.03606243]\n",
-            "maze | pos: [6.54150433 4.97743706] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 474 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01347976  0.03573438]\n",
-            "maze | pos: [6.545535   4.96666988] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 475 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01333012  0.03540014]\n",
-            "maze | pos: [6.54952432 4.95601264] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 476 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01318473  0.03506198]\n",
-            "maze | pos: [6.55347273 4.9454643 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 477 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0130429   0.03472166]\n",
-            "maze | pos: [6.55738068 4.93502377] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 478 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01290413  0.03438051]\n",
-            "maze | pos: [6.56124858 4.92468999] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 479 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01276801  0.03403954]\n",
-            "maze | pos: [6.56507687 4.91446189] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 480 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01263422  0.03369952]\n",
-            "maze | pos: [6.56886595 4.90433841] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 481 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01250253  0.03336103]\n",
-            "maze | pos: [6.57261623 4.89431849] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 482 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01237273  0.03302451]\n",
-            "maze | pos: [6.5763281  4.88440109] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 483 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01224469  0.03269028]\n",
-            "maze | pos: [6.58000198 4.87458517] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 484 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01211829  0.0323586 ]\n",
-            "maze | pos: [6.58363824 4.86486969] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 485 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01199343  0.03202963]\n",
-            "maze | pos: [6.58723729 4.85525363] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 486 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01187004  0.03170351]\n",
-            "maze | pos: [6.59079948 4.84573598] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 487 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01174807  0.03138033]\n",
-            "maze | pos: [6.59432522 4.83631574] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 488 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01162745  0.03106016]\n",
-            "maze | pos: [6.59781486 4.8269919 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 489 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01150815  0.03074303]\n",
-            "maze | pos: [6.60126879 4.81776349] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 490 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01139015  0.03042896]\n",
-            "maze | pos: [6.60468736 4.80862953] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 491 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0112734   0.03011797]\n",
-            "maze | pos: [6.60807095 4.79958905] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 492 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01115788  0.02981006]\n",
-            "maze | pos: [6.61141989 4.7906411 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 493 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01104358  0.02950521]\n",
-            "maze | pos: [6.61473457 4.78178473] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 494 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01093047  0.02920343]\n",
-            "maze | pos: [6.61801531 4.77301901] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 495 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01081854  0.02890468]\n",
-            "maze | pos: [6.62126248 4.76434301] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 496 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01070777  0.02860896]\n",
-            "maze | pos: [6.62447641 4.7557558 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 497 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01059814  0.02831624]\n",
-            "maze | pos: [6.62765744 4.74725648] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 498 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01048964  0.02802649]\n",
-            "maze | pos: [6.63080592 4.73884416] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 499 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01038225  0.02773969]\n",
-            "maze | pos: [6.63392217 4.73051793] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 500 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01027597  0.02745581]\n",
-            "maze | pos: [6.63700652 4.72227693] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 501 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01017078  0.02717483]\n",
-            "maze | pos: [6.64005931 4.71412027] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 502 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.01006668  0.02689671]\n",
-            "maze | pos: [6.64308085 4.7060471 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 503 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00996363  0.02662144]\n",
-            "maze | pos: [6.64607146 4.69805656] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 504 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00986165  0.02634898]\n",
-            "maze | pos: [6.64903147 4.6901478 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 505 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00976071  0.0260793 ]\n",
-            "maze | pos: [6.65196118 4.68231999] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 506 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0096608   0.02581239]\n",
-            "maze | pos: [6.6548609 4.6745723] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 507 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00956192  0.0255482 ]\n",
-            "maze | pos: [6.65773095 4.66690391] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 508 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00946405  0.02528671]\n",
-            "maze | pos: [6.66057161 4.65931401] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 509 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00936719  0.02502791]\n",
-            "maze | pos: [6.66338321 4.65180178] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 510 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00927131  0.02477174]\n",
-            "maze | pos: [6.66616602 4.64436645] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 511 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00917642  0.0245182 ]\n",
-            "maze | pos: [6.66892036 4.63700722] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 512 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00908249  0.02426726]\n",
-            "maze | pos: [6.6716465  4.62972331] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 513 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00898953  0.02401888]\n",
-            "maze | pos: [6.67434474 4.62251396] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 514 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00889752  0.02377304]\n",
-            "maze | pos: [6.67701536 4.61537839] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 515 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00880645  0.02352972]\n",
-            "maze | pos: [6.67965865 4.60831585] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 516 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00871632  0.02328889]\n",
-            "maze | pos: [6.68227489 4.60132561] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 517 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00862711  0.02305053]\n",
-            "maze | pos: [6.68486435 4.59440691] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 518 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00853881  0.0228146 ]\n",
-            "maze | pos: [6.6874273  4.58755902] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 519 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00845141  0.02258109]\n",
-            "maze | pos: [6.68996402 4.58078122] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 520 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00836491  0.02234997]\n",
-            "maze | pos: [6.69247478 4.57407279] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 521 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00827929  0.02212122]\n",
-            "maze | pos: [6.69495984 4.56743303] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 522 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00819455  0.0218948 ]\n",
-            "maze | pos: [6.69741946 4.56086122] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 523 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00811068  0.02167071]\n",
-            "maze | pos: [6.69985391 4.55435668] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 524 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00802767  0.0214489 ]\n",
-            "maze | pos: [6.70226345 4.54791872] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 525 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0079455   0.02122937]\n",
-            "maze | pos: [6.70464832 4.54154664] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 526 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00786418  0.02101208]\n",
-            "maze | pos: [6.70700878 4.53523979] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 527 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00778369  0.02079702]\n",
-            "maze | pos: [6.70934508 4.52899748] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 528 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00770402  0.02058416]\n",
-            "maze | pos: [6.71165747 4.52281907] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 529 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00762517  0.02037348]\n",
-            "maze | pos: [6.71394619 4.5167039 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 530 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00754712  0.02016495]\n",
-            "maze | pos: [6.71621149 4.51065131] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 531 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00746988  0.01995856]\n",
-            "maze | pos: [6.7184536  4.50466068] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 532 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00739342  0.01975428]\n",
-            "maze | pos: [6.72067276 4.49873136] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 533 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00731775  0.0195521 ]\n",
-            "maze | pos: [6.72286921 4.49286272] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 534 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00724285  0.01935198]\n",
-            "maze | pos: [6.72504318 4.48705416] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 535 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00716872  0.01915391]\n",
-            "maze | pos: [6.7271949  4.48130504] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 536 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00709535  0.01895786]\n",
-            "maze | pos: [6.72932459 4.47561477] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 537 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00702272  0.01876383]\n",
-            "maze | pos: [6.73143249 4.46998274] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 538 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00695084  0.01857178]\n",
-            "maze | pos: [6.73351881 4.46440835] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 539 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0068797   0.01838169]\n",
-            "maze | pos: [6.73558378 4.45889102] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 540 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00680929  0.01819355]\n",
-            "maze | pos: [6.73762761 4.45343016] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 541 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00673959  0.01800734]\n",
-            "maze | pos: [6.73965052 4.44802519] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 542 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00667061  0.01782303]\n",
-            "maze | pos: [6.74165273 4.44267554] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 543 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00660234  0.01764061]\n",
-            "maze | pos: [6.74363445 4.43738065] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 544 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00653476  0.01746005]\n",
-            "maze | pos: [6.74559588 4.43213995] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 545 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00646788  0.01728135]\n",
-            "maze | pos: [6.74753724 4.42695289] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 546 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00640168  0.01710447]\n",
-            "maze | pos: [6.74945872 4.42181892] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 547 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00633616  0.0169294 ]\n",
-            "maze | pos: [6.75136054 4.4167375 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 548 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0062713   0.01675613]\n",
-            "maze | pos: [6.7532429  4.41170809] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 549 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00620712  0.01658463]\n",
-            "maze | pos: [6.75510599 4.40673015] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 550 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00614359  0.01641488]\n",
-            "maze | pos: [6.75695001 4.40180316] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "0.0, sparse, sparse is getting called\n",
-            "0.0, sparse, ... is getting called\n",
-            "t: 551 | r: 0.00 |  R: 0.00 | score: -0.0251 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0060807   0.01624687]\n",
-            "maze | pos: [6.75877515 4.3969266 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 552 | r: 1.00 |  R: 1.00 | score: -0.0213 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00601847  0.01608058]\n",
-            "maze | pos: [6.76058162 4.39209996] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 553 | r: 1.00 |  R: 2.00 | score: -0.0176 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00595687  0.01591599]\n",
-            "maze | pos: [6.76236959 4.38732271] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 554 | r: 1.00 |  R: 3.00 | score: -0.0138 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0058959   0.01575309]\n",
-            "maze | pos: [6.76413927 4.38259437] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 555 | r: 1.00 |  R: 4.00 | score: -0.0101 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00583555  0.01559186]\n",
-            "maze | pos: [6.76589083 4.37791441] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 556 | r: 1.00 |  R: 5.00 | score: -0.0064 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00577582  0.01543227]\n",
-            "maze | pos: [6.76762447 4.37328236] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 557 | r: 1.00 |  R: 6.00 | score: -0.0026 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00571671  0.01527432]\n",
-            "maze | pos: [6.76934036 4.36869772] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 558 | r: 1.00 |  R: 7.00 | score: 0.0011 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0056582   0.01511798]\n",
-            "maze | pos: [6.77103869 4.36416   ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 559 | r: 1.00 |  R: 8.00 | score: 0.0049 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00560028  0.01496325]\n",
-            "maze | pos: [6.77271963 4.35966872] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 560 | r: 1.00 |  R: 9.00 | score: 0.0086 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00554296  0.0148101 ]\n",
-            "maze | pos: [6.77438337 4.35522342] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 561 | r: 1.00 |  R: 10.00 | score: 0.0123 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00548623  0.01465852]\n",
-            "maze | pos: [6.77603009 4.35082361] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 562 | r: 1.00 |  R: 11.00 | score: 0.0161 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00543008  0.01450848]\n",
-            "maze | pos: [6.77765994 4.34646884] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 563 | r: 1.00 |  R: 12.00 | score: 0.0198 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0053745   0.01435999]\n",
-            "maze | pos: [6.77927312 4.34215863] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 564 | r: 1.00 |  R: 13.00 | score: 0.0236 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00531949  0.01421301]\n",
-            "maze | pos: [6.78086979 4.33789255] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 565 | r: 1.00 |  R: 14.00 | score: 0.0273 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00526505  0.01406754]\n",
-            "maze | pos: [6.78245011 4.33367012] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 566 | r: 1.00 |  R: 15.00 | score: 0.0311 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00521116  0.01392355]\n",
-            "maze | pos: [6.78401426 4.32949092] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 567 | r: 1.00 |  R: 16.00 | score: 0.0348 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00515782  0.01378104]\n",
-            "maze | pos: [6.7855624  4.32535449] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 568 | r: 1.00 |  R: 17.00 | score: 0.0385 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00510503  0.01363999]\n",
-            "maze | pos: [6.78709469 4.32126039] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 569 | r: 1.00 |  R: 18.00 | score: 0.0423 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00505278  0.01350039]\n",
-            "maze | pos: [6.7886113 4.3172082] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 570 | r: 1.00 |  R: 19.00 | score: 0.0460 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00500106  0.01336221]\n",
-            "maze | pos: [6.79011239 4.31319749] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 571 | r: 1.00 |  R: 20.00 | score: 0.0498 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00494988  0.01322544]\n",
-            "maze | pos: [6.79159811 4.30922782] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 572 | r: 1.00 |  R: 21.00 | score: 0.0535 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00489921  0.01309008]\n",
-            "maze | pos: [6.79306863 4.30529879] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 573 | r: 1.00 |  R: 22.00 | score: 0.0572 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00484907  0.0129561 ]\n",
-            "maze | pos: [6.79452409 4.30140997] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 574 | r: 1.00 |  R: 23.00 | score: 0.0610 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00479944  0.01282349]\n",
-            "maze | pos: [6.79596466 4.29756095] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 575 | r: 1.00 |  R: 24.00 | score: 0.0647 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00475032  0.01269224]\n",
-            "maze | pos: [6.79739049 4.29375133] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 576 | r: 1.00 |  R: 25.00 | score: 0.0685 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0047017   0.01256233]\n",
-            "maze | pos: [6.79880172 4.28998069] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 577 | r: 1.00 |  R: 26.00 | score: 0.0722 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00465357  0.01243376]\n",
-            "maze | pos: [6.80019851 4.28624866] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 578 | r: 1.00 |  R: 27.00 | score: 0.0759 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00460594  0.0123065 ]\n",
-            "maze | pos: [6.801581   4.28255482] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 579 | r: 1.00 |  R: 28.00 | score: 0.0797 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0045588   0.01218054]\n",
-            "maze | pos: [6.80294934 4.27889878] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 580 | r: 1.00 |  R: 29.00 | score: 0.0834 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00451214  0.01205587]\n",
-            "maze | pos: [6.80430367 4.27528017] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 581 | r: 1.00 |  R: 30.00 | score: 0.0872 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00446596  0.01193247]\n",
-            "maze | pos: [6.80564415 4.2716986 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 582 | r: 1.00 |  R: 31.00 | score: 0.0909 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00442025  0.01181034]\n",
-            "maze | pos: [6.8069709  4.26815368] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 583 | r: 1.00 |  R: 32.00 | score: 0.0947 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00437501  0.01168946]\n",
-            "maze | pos: [6.80828407 4.26464504] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 584 | r: 1.00 |  R: 33.00 | score: 0.0984 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00433023  0.01156982]\n",
-            "maze | pos: [6.80958381 4.26117232] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 585 | r: 1.00 |  R: 34.00 | score: 0.1021 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00428591  0.0114514 ]\n",
-            "maze | pos: [6.81087024 4.25773514] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 586 | r: 1.00 |  R: 35.00 | score: 0.1059 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00424204  0.01133419]\n",
-            "maze | pos: [6.8121435  4.25433314] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 587 | r: 1.00 |  R: 36.00 | score: 0.1096 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00419862  0.01121819]\n",
-            "maze | pos: [6.81340373 4.25096596] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 588 | r: 1.00 |  R: 37.00 | score: 0.1134 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00415565  0.01110337]\n",
-            "maze | pos: [6.81465107 4.24763325] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 589 | r: 1.00 |  R: 38.00 | score: 0.1171 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00411311  0.01098972]\n",
-            "maze | pos: [6.81588563 4.24433464] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 590 | r: 1.00 |  R: 39.00 | score: 0.1208 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00407102  0.01087724]\n",
-            "maze | pos: [6.81710756 4.2410698 ] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 591 | r: 1.00 |  R: 40.00 | score: 0.1246 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00402935  0.01076591]\n",
-            "maze | pos: [6.81831699 4.23783837] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 592 | r: 1.00 |  R: 41.00 | score: 0.1283 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00398811  0.01065572]\n",
-            "maze | pos: [6.81951403 4.23464002] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 593 | r: 1.00 |  R: 42.00 | score: 0.1321 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00394729  0.01054666]\n",
-            "maze | pos: [6.82069883 4.2314744 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 594 | r: 1.00 |  R: 43.00 | score: 0.1358 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00390689  0.01043871]\n",
-            "maze | pos: [6.82187149 4.22834118] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 595 | r: 1.00 |  R: 44.00 | score: 0.1395 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0038669   0.01033187]\n",
-            "maze | pos: [6.82303216 4.22524004] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 596 | r: 1.00 |  R: 45.00 | score: 0.1433 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00382732  0.01022612]\n",
-            "maze | pos: [6.82418094 4.22217063] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 597 | r: 1.00 |  R: 46.00 | score: 0.1470 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00378815  0.01012145]\n",
-            "maze | pos: [6.82531797 4.21913264] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 598 | r: 1.00 |  R: 47.00 | score: 0.1508 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00374938  0.01001786]\n",
-            "maze | pos: [6.82644336 4.21612574] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 599 | r: 1.00 |  R: 48.00 | score: 0.1545 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.003711    0.00991532]\n",
-            "maze | pos: [6.82755723 4.21314962] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 600 | r: 1.00 |  R: 49.00 | score: 0.1583 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00367302  0.00981384]\n",
-            "maze | pos: [6.8286597  4.21020396] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 601 | r: 1.00 |  R: 50.00 | score: 0.1620 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00363542  0.00971339]\n",
-            "maze | pos: [6.82975088 4.20728845] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 602 | r: 1.00 |  R: 51.00 | score: 0.1657 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00359822  0.00961397]\n",
-            "maze | pos: [6.8308309  4.20440278] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 603 | r: 1.00 |  R: 52.00 | score: 0.1695 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00356139  0.00951557]\n",
-            "maze | pos: [6.83189987 4.20154665] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 604 | r: 1.00 |  R: 53.00 | score: 0.1732 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00352494  0.00941818]\n",
-            "maze | pos: [6.83295789 4.19871974] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 605 | r: 1.00 |  R: 54.00 | score: 0.1770 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00348886  0.00932178]\n",
-            "maze | pos: [6.83400508 4.19592178] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 606 | r: 1.00 |  R: 55.00 | score: 0.1807 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00345315  0.00922637]\n",
-            "maze | pos: [6.83504156 4.19315245] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 607 | r: 1.00 |  R: 56.00 | score: 0.1844 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0034178   0.00913194]\n",
-            "maze | pos: [6.83606742 4.19041146] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 608 | r: 1.00 |  R: 57.00 | score: 0.1882 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00338282  0.00903847]\n",
-            "maze | pos: [6.83708279 4.18769853] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 609 | r: 1.00 |  R: 58.00 | score: 0.1919 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0033482   0.00894596]\n",
-            "maze | pos: [6.83808776 4.18501337] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 610 | r: 1.00 |  R: 59.00 | score: 0.1957 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00331393  0.0088544 ]\n",
-            "maze | pos: [6.83908245 4.18235569] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 611 | r: 1.00 |  R: 60.00 | score: 0.1994 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00328001  0.00876377]\n",
-            "maze | pos: [6.84006696 4.17972521] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 612 | r: 1.00 |  R: 61.00 | score: 0.2032 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00324644  0.00867408]\n",
-            "maze | pos: [6.84104139 4.17712165] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 613 | r: 1.00 |  R: 62.00 | score: 0.2069 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00321321  0.0085853 ]\n",
-            "maze | pos: [6.84200585 4.17454474] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 614 | r: 1.00 |  R: 63.00 | score: 0.2106 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00318032  0.00849742]\n",
-            "maze | pos: [6.84296043 4.17199421] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 615 | r: 1.00 |  R: 64.00 | score: 0.2144 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00314777  0.00841045]\n",
-            "maze | pos: [6.84390525 4.16946978] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 616 | r: 1.00 |  R: 65.00 | score: 0.2181 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00311556  0.00832437]\n",
-            "maze | pos: [6.84484039 4.16697119] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 617 | r: 1.00 |  R: 66.00 | score: 0.2219 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00308367  0.00823917]\n",
-            "maze | pos: [6.84576597 4.16449818] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 618 | r: 1.00 |  R: 67.00 | score: 0.2256 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00305211  0.00815484]\n",
-            "maze | pos: [6.84668207 4.16205047] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 619 | r: 1.00 |  R: 68.00 | score: 0.2293 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00302087  0.00807137]\n",
-            "maze | pos: [6.84758879 4.15962782] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 620 | r: 1.00 |  R: 69.00 | score: 0.2331 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00298995  0.00798876]\n",
-            "maze | pos: [6.84848624 4.15722996] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 621 | r: 1.00 |  R: 70.00 | score: 0.2368 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00295934  0.00790699]\n",
-            "maze | pos: [6.8493745  4.15485665] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 622 | r: 1.00 |  R: 71.00 | score: 0.2406 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00292906  0.00782606]\n",
-            "maze | pos: [6.85025366 4.15250763] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 623 | r: 1.00 |  R: 72.00 | score: 0.2443 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00289908  0.00774596]\n",
-            "maze | pos: [6.85112383 4.15018265] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 624 | r: 1.00 |  R: 73.00 | score: 0.2480 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0028694   0.00766668]\n",
-            "maze | pos: [6.85198509 4.14788147] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 625 | r: 1.00 |  R: 74.00 | score: 0.2518 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00284003  0.00758821]\n",
-            "maze | pos: [6.85283754 4.14560384] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 626 | r: 1.00 |  R: 75.00 | score: 0.2555 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00281097  0.00751055]\n",
-            "maze | pos: [6.85368126 4.14334952] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 627 | r: 1.00 |  R: 76.00 | score: 0.2593 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0027822   0.00743367]\n",
-            "maze | pos: [6.85451635 4.14111827] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 628 | r: 1.00 |  R: 77.00 | score: 0.2630 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00275372  0.00735759]\n",
-            "maze | pos: [6.85534289 4.13890987] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 629 | r: 1.00 |  R: 78.00 | score: 0.2668 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00272554  0.00728228]\n",
-            "maze | pos: [6.85616097 4.13672406] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 630 | r: 1.00 |  R: 79.00 | score: 0.2705 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00269764  0.00720775]\n",
-            "maze | pos: [6.85697067 4.13456063] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 631 | r: 1.00 |  R: 80.00 | score: 0.2742 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00267003  0.00713398]\n",
-            "maze | pos: [6.85777209 4.13241934] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 632 | r: 1.00 |  R: 81.00 | score: 0.2780 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0026427   0.00706096]\n",
-            "maze | pos: [6.85856531 4.13029997] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 633 | r: 1.00 |  R: 82.00 | score: 0.2817 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00261565  0.00698869]\n",
-            "maze | pos: [6.8593504  4.12820229] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 634 | r: 1.00 |  R: 83.00 | score: 0.2855 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00258888  0.00691716]\n",
-            "maze | pos: [6.86012747 4.12612608] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 635 | r: 1.00 |  R: 84.00 | score: 0.2892 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00256238  0.00684636]\n",
-            "maze | pos: [6.86089657 4.12407112] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 636 | r: 1.00 |  R: 85.00 | score: 0.2929 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00253616  0.00677629]\n",
-            "maze | pos: [6.86165781 4.12203719] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 637 | r: 1.00 |  R: 86.00 | score: 0.2967 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0025102   0.00670693]\n",
-            "maze | pos: [6.86241126 4.12002408] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 638 | r: 1.00 |  R: 87.00 | score: 0.3004 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00248451  0.00663828]\n",
-            "maze | pos: [6.86315699 4.11803157] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 639 | r: 1.00 |  R: 88.00 | score: 0.3042 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00245908  0.00657034]\n",
-            "maze | pos: [6.86389509 4.11605946] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 640 | r: 1.00 |  R: 89.00 | score: 0.3079 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00243391  0.00650309]\n",
-            "maze | pos: [6.86462564 4.11410753] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 641 | r: 1.00 |  R: 90.00 | score: 0.3116 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.002409    0.00643653]\n",
-            "maze | pos: [6.86534871 4.11217559] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 642 | r: 1.00 |  R: 91.00 | score: 0.3154 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00238434  0.00637065]\n",
-            "maze | pos: [6.86606437 4.11026341] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 643 | r: 1.00 |  R: 92.00 | score: 0.3191 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00235994  0.00630545]\n",
-            "maze | pos: [6.86677272 4.10837081] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 644 | r: 1.00 |  R: 93.00 | score: 0.3229 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00233578  0.00624091]\n",
-            "maze | pos: [6.86747381 4.10649758] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 645 | r: 1.00 |  R: 94.00 | score: 0.3266 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00231187  0.00617703]\n",
-            "maze | pos: [6.86816773 4.10464352] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 646 | r: 1.00 |  R: 95.00 | score: 0.3304 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00228821  0.00611381]\n",
-            "maze | pos: [6.86885454 4.10280843] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 647 | r: 1.00 |  R: 96.00 | score: 0.3341 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00226479  0.00605124]\n",
-            "maze | pos: [6.86953433 4.10099213] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 648 | r: 1.00 |  R: 97.00 | score: 0.3378 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00224161  0.0059893 ]\n",
-            "maze | pos: [6.87020716 4.09919442] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 649 | r: 1.00 |  R: 98.00 | score: 0.3416 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00221867  0.005928  ]\n",
-            "maze | pos: [6.8708731  4.09741511] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 650 | r: 1.00 |  R: 99.00 | score: 0.3453 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00219596  0.00586732]\n",
-            "maze | pos: [6.87153222 4.09565401] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 651 | r: 1.00 |  R: 100.00 | score: 0.3491 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00217348  0.00580727]\n",
-            "maze | pos: [6.8721846  4.09391094] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 652 | r: 1.00 |  R: 101.00 | score: 0.3528 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00215124  0.00574783]\n",
-            "maze | pos: [6.8728303  4.09218571] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 653 | r: 1.00 |  R: 102.00 | score: 0.3565 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00212922  0.005689  ]\n",
-            "maze | pos: [6.8734694  4.09047813] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 654 | r: 1.00 |  R: 103.00 | score: 0.3603 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00210743  0.00563078]\n",
-            "maze | pos: [6.87410195 4.08878803] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 655 | r: 1.00 |  R: 104.00 | score: 0.3640 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00208586  0.00557314]\n",
-            "maze | pos: [6.87472803 4.08711523] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 656 | r: 1.00 |  R: 105.00 | score: 0.3678 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00206451  0.0055161 ]\n",
-            "maze | pos: [6.8753477  4.08545955] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 657 | r: 1.00 |  R: 106.00 | score: 0.3715 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00204338  0.00545964]\n",
-            "maze | pos: [6.87596102 4.08382082] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 658 | r: 1.00 |  R: 107.00 | score: 0.3752 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00202246  0.00540376]\n",
-            "maze | pos: [6.87656807 4.08219886] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 659 | r: 1.00 |  R: 108.00 | score: 0.3790 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00200176  0.00534845]\n",
-            "maze | pos: [6.87716891 4.0805935 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 660 | r: 1.00 |  R: 109.00 | score: 0.3827 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00198127  0.00529371]\n",
-            "maze | pos: [6.87776359 4.07900458] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 661 | r: 1.00 |  R: 110.00 | score: 0.3865 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.001961    0.00523953]\n",
-            "maze | pos: [6.87835219 4.07743191] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 662 | r: 1.00 |  R: 111.00 | score: 0.3902 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00194092  0.0051859 ]\n",
-            "maze | pos: [6.87893477 4.07587535] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 663 | r: 1.00 |  R: 112.00 | score: 0.3940 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00192106  0.00513282]\n",
-            "maze | pos: [6.87951138 4.07433471] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 664 | r: 1.00 |  R: 113.00 | score: 0.3977 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0019014   0.00508029]\n",
-            "maze | pos: [6.88008209 4.07280984] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 665 | r: 1.00 |  R: 114.00 | score: 0.4014 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00188194  0.00502829]\n",
-            "maze | pos: [6.88064696 4.07130058] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 666 | r: 1.00 |  R: 115.00 | score: 0.4052 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00186267  0.00497683]\n",
-            "maze | pos: [6.88120605 4.06980677] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 667 | r: 1.00 |  R: 116.00 | score: 0.4089 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00184361  0.00492589]\n",
-            "maze | pos: [6.88175942 4.06832825] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 668 | r: 1.00 |  R: 117.00 | score: 0.4127 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00182474  0.00487547]\n",
-            "maze | pos: [6.88230712 4.06686485] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 669 | r: 1.00 |  R: 118.00 | score: 0.4164 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00180606  0.00482557]\n",
-            "maze | pos: [6.88284922 4.06541644] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 670 | r: 1.00 |  R: 119.00 | score: 0.4201 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00178758  0.00477618]\n",
-            "maze | pos: [6.88338576 4.06398285] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 671 | r: 1.00 |  R: 120.00 | score: 0.4239 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00176928  0.00472729]\n",
-            "maze | pos: [6.88391682 4.06256394] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 672 | r: 1.00 |  R: 121.00 | score: 0.4276 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00175117  0.00467891]\n",
-            "maze | pos: [6.88444244 4.06115955] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 673 | r: 1.00 |  R: 122.00 | score: 0.4314 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00173325  0.00463102]\n",
-            "maze | pos: [6.88496268 4.05976953] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 674 | r: 1.00 |  R: 123.00 | score: 0.4351 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00171551  0.00458362]\n",
-            "maze | pos: [6.8854776  4.05839374] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 675 | r: 1.00 |  R: 124.00 | score: 0.4388 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00169795  0.00453671]\n",
-            "maze | pos: [6.88598724 4.05703203] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 676 | r: 1.00 |  R: 125.00 | score: 0.4426 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00168057  0.00449027]\n",
-            "maze | pos: [6.88649167 4.05568426] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 677 | r: 1.00 |  R: 126.00 | score: 0.4463 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00166337  0.00444431]\n",
-            "maze | pos: [6.88699094 4.05435028] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 678 | r: 1.00 |  R: 127.00 | score: 0.4501 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00164635  0.00439883]\n",
-            "maze | pos: [6.8874851  4.05302996] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 679 | r: 1.00 |  R: 128.00 | score: 0.4538 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00162949  0.0043538 ]\n",
-            "maze | pos: [6.8879742  4.05172315] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 680 | r: 1.00 |  R: 129.00 | score: 0.4576 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00161282  0.00430924]\n",
-            "maze | pos: [6.88845829 4.05042971] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 681 | r: 1.00 |  R: 130.00 | score: 0.4613 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00159631  0.00426514]\n",
-            "maze | pos: [6.88893743 4.04914952] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 682 | r: 1.00 |  R: 131.00 | score: 0.4650 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00157997  0.00422148]\n",
-            "maze | pos: [6.88941166 4.04788242] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 683 | r: 1.00 |  R: 132.00 | score: 0.4688 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0015638   0.00417827]\n",
-            "maze | pos: [6.88988104 4.0466283 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 684 | r: 1.00 |  R: 133.00 | score: 0.4725 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00154779  0.00413551]\n",
-            "maze | pos: [6.89034562 4.04538701] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 685 | r: 1.00 |  R: 134.00 | score: 0.4763 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00153195  0.00409318]\n",
-            "maze | pos: [6.89080544 4.04415843] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 686 | r: 1.00 |  R: 135.00 | score: 0.4800 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00151627  0.00405129]\n",
-            "maze | pos: [6.89126055 4.04294242] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 687 | r: 1.00 |  R: 136.00 | score: 0.4837 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00150075  0.00400982]\n",
-            "maze | pos: [6.89171101 4.04173886] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 688 | r: 1.00 |  R: 137.00 | score: 0.4875 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00148539  0.00396878]\n",
-            "maze | pos: [6.89215685 4.04054761] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 689 | r: 1.00 |  R: 138.00 | score: 0.4912 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00147019  0.00392816]\n",
-            "maze | pos: [6.89259814 4.03936856] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 690 | r: 1.00 |  R: 139.00 | score: 0.4950 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00145514  0.00388795]\n",
-            "maze | pos: [6.8930349  4.03820158] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 691 | r: 1.00 |  R: 140.00 | score: 0.4987 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00144025  0.00384816]\n",
-            "maze | pos: [6.8934672  4.03704654] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 692 | r: 1.00 |  R: 141.00 | score: 0.5025 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00142551  0.00380877]\n",
-            "maze | pos: [6.89389507 4.03590332] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 693 | r: 1.00 |  R: 142.00 | score: 0.5062 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00141092  0.00376979]\n",
-            "maze | pos: [6.89431856 4.03477181] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 694 | r: 1.00 |  R: 143.00 | score: 0.5099 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00139648  0.00373121]\n",
-            "maze | pos: [6.89473772 4.03365187] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 695 | r: 1.00 |  R: 144.00 | score: 0.5137 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00138218  0.00369302]\n",
-            "maze | pos: [6.89515259 4.0325434 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 696 | r: 1.00 |  R: 145.00 | score: 0.5174 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00136804  0.00365522]\n",
-            "maze | pos: [6.89556321 4.03144627] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 697 | r: 1.00 |  R: 146.00 | score: 0.5212 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00135403  0.00361781]\n",
-            "maze | pos: [6.89596963 4.03036037] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 698 | r: 1.00 |  R: 147.00 | score: 0.5249 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00134017  0.00358078]\n",
-            "maze | pos: [6.89637188 4.02928559] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 699 | r: 1.00 |  R: 148.00 | score: 0.5286 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00132646  0.00354413]\n",
-            "maze | pos: [6.89677002 4.02822181] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 700 | r: 1.00 |  R: 149.00 | score: 0.5324 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00131288  0.00350785]\n",
-            "maze | pos: [6.89716409 4.02716891] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 701 | r: 1.00 |  R: 150.00 | score: 0.5361 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00129944  0.00347195]\n",
-            "maze | pos: [6.89755412 4.02612679] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 702 | r: 1.00 |  R: 151.00 | score: 0.5399 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00128614  0.00343641]\n",
-            "maze | pos: [6.89794016 4.02509534] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 703 | r: 1.00 |  R: 152.00 | score: 0.5436 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00127298  0.00340124]\n",
-            "maze | pos: [6.89832225 4.02407445] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 704 | r: 1.00 |  R: 153.00 | score: 0.5473 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00125995  0.00336643]\n",
-            "maze | pos: [6.89870043 4.023064  ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 705 | r: 1.00 |  R: 154.00 | score: 0.5511 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00124705  0.00333197]\n",
-            "maze | pos: [6.89907474 4.0220639 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 706 | r: 1.00 |  R: 155.00 | score: 0.5548 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00123429  0.00329787]\n",
-            "maze | pos: [6.89944522 4.02107403] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 707 | r: 1.00 |  R: 156.00 | score: 0.5586 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00122166  0.00326412]\n",
-            "maze | pos: [6.8998119  4.02009429] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 708 | r: 1.00 |  R: 157.00 | score: 0.5623 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00120915  0.00323071]\n",
-            "maze | pos: [6.90017484 4.01912458] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 709 | r: 1.00 |  R: 158.00 | score: 0.5661 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00119678  0.00319764]\n",
-            "maze | pos: [6.90053405 4.0181648 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 710 | r: 1.00 |  R: 159.00 | score: 0.5698 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00118453  0.00316491]\n",
-            "maze | pos: [6.90088959 4.01721484] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 711 | r: 1.00 |  R: 160.00 | score: 0.5735 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00117241  0.00313252]\n",
-            "maze | pos: [6.9012415 4.0162746] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 712 | r: 1.00 |  R: 161.00 | score: 0.5773 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00116041  0.00310046]\n",
-            "maze | pos: [6.9015898  4.01534399] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 713 | r: 1.00 |  R: 162.00 | score: 0.5810 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00114853  0.00306872]\n",
-            "maze | pos: [6.90193453 4.0144229 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 714 | r: 1.00 |  R: 163.00 | score: 0.5848 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00113677  0.00303731]\n",
-            "maze | pos: [6.90227574 4.01351124] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 715 | r: 1.00 |  R: 164.00 | score: 0.5885 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00112514  0.00300623]\n",
-            "maze | pos: [6.90261345 4.01260891] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 716 | r: 1.00 |  R: 165.00 | score: 0.5922 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00111362  0.00297546]\n",
-            "maze | pos: [6.90294771 4.01171582] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 717 | r: 1.00 |  R: 166.00 | score: 0.5960 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00110222  0.002945  ]\n",
-            "maze | pos: [6.90327855 4.01083186] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 718 | r: 1.00 |  R: 167.00 | score: 0.5997 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00109094  0.00291486]\n",
-            "maze | pos: [6.903606   4.00995696] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 719 | r: 1.00 |  R: 168.00 | score: 0.6035 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00107978  0.00288503]\n",
-            "maze | pos: [6.9039301  4.00909101] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 720 | r: 1.00 |  R: 169.00 | score: 0.6072 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00106872  0.0028555 ]\n",
-            "maze | pos: [6.90425088 4.00823392] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 721 | r: 1.00 |  R: 170.00 | score: 0.6109 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00105779  0.00282627]\n",
-            "maze | pos: [6.90456838 4.0073856 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 722 | r: 1.00 |  R: 171.00 | score: 0.6147 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00104696  0.00279734]\n",
-            "maze | pos: [6.90488262 4.00654597] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 723 | r: 1.00 |  R: 172.00 | score: 0.6184 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00103624  0.00276871]\n",
-            "maze | pos: [6.90519366 4.00571493] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 724 | r: 1.00 |  R: 173.00 | score: 0.6222 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00102564  0.00274037]\n",
-            "maze | pos: [6.90550151 4.0048924 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 725 | r: 1.00 |  R: 174.00 | score: 0.6259 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00101514  0.00271233]\n",
-            "maze | pos: [6.9058062  4.00407828] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 726 | r: 1.00 |  R: 175.00 | score: 0.6297 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00100475  0.00268457]\n",
-            "maze | pos: [6.90610778 4.0032725 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 727 | r: 1.00 |  R: 176.00 | score: 0.6334 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00099447  0.00265709]\n",
-            "maze | pos: [6.90640628 4.00247497] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 728 | r: 1.00 |  R: 177.00 | score: 0.6371 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00098429  0.00262989]\n",
-            "maze | pos: [6.90670171 4.00168559] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 729 | r: 1.00 |  R: 178.00 | score: 0.6409 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00097421  0.00260298]\n",
-            "maze | pos: [6.90699413 4.0009043 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 730 | r: 1.00 |  R: 179.00 | score: 0.6446 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00096424  0.00257633]\n",
-            "maze | pos: [6.90728355 4.00013101] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 731 | r: 1.00 |  R: 180.00 | score: 0.6484 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00095437  0.00254996]\n",
-            "maze | pos: [6.90757001 3.99936563] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 732 | r: 1.00 |  R: 181.00 | score: 0.6521 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00094461  0.00252386]\n",
-            "maze | pos: [6.90785353 3.99860808] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 733 | r: 1.00 |  R: 182.00 | score: 0.6558 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00093494  0.00249803]\n",
-            "maze | pos: [6.90813416 3.99785828] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 734 | r: 1.00 |  R: 183.00 | score: 0.6596 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00092537  0.00247246]\n",
-            "maze | pos: [6.90841191 3.99711616] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 735 | r: 1.00 |  R: 184.00 | score: 0.6633 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0009159   0.00244716]\n",
-            "maze | pos: [6.90868682 3.99638164] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 736 | r: 1.00 |  R: 185.00 | score: 0.6671 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00090652  0.00242211]\n",
-            "maze | pos: [6.90895892 3.99565464] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 737 | r: 1.00 |  R: 186.00 | score: 0.6708 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00089724  0.00239732]\n",
-            "maze | pos: [6.90922823 3.99493507] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 738 | r: 1.00 |  R: 187.00 | score: 0.6745 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00088806  0.00237278]\n",
-            "maze | pos: [6.90949478 3.99422287] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 739 | r: 1.00 |  R: 188.00 | score: 0.6783 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00087897  0.0023485 ]\n",
-            "maze | pos: [6.90975861 3.99351796] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 740 | r: 1.00 |  R: 189.00 | score: 0.6820 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00086997  0.00232446]\n",
-            "maze | pos: [6.91001973 3.99282026] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 741 | r: 1.00 |  R: 190.00 | score: 0.6858 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00086107  0.00230067]\n",
-            "maze | pos: [6.91027819 3.99212971] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 742 | r: 1.00 |  R: 191.00 | score: 0.6895 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00085226  0.00227712]\n",
-            "maze | pos: [6.910534   3.99144622] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 743 | r: 1.00 |  R: 192.00 | score: 0.6933 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00084353  0.00225382]\n",
-            "maze | pos: [6.91078719 3.99076973] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 744 | r: 1.00 |  R: 193.00 | score: 0.6970 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0008349   0.00223075]\n",
-            "maze | pos: [6.91103778 3.99010017] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 745 | r: 1.00 |  R: 194.00 | score: 0.7007 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00082635  0.00220792]\n",
-            "maze | pos: [6.91128582 3.98943745] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 746 | r: 1.00 |  R: 195.00 | score: 0.7045 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0008179   0.00218532]\n",
-            "maze | pos: [6.91153131 3.98878152] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 747 | r: 1.00 |  R: 196.00 | score: 0.7082 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00080953  0.00216295]\n",
-            "maze | pos: [6.91177429 3.9881323 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 748 | r: 1.00 |  R: 197.00 | score: 0.7120 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00080124  0.00214081]\n",
-            "maze | pos: [6.91201479 3.98748973] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 749 | r: 1.00 |  R: 198.00 | score: 0.7157 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00079304  0.0021189 ]\n",
-            "maze | pos: [6.91225282 3.98685374] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 750 | r: 1.00 |  R: 199.00 | score: 0.7194 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00078492  0.00209721]\n",
-            "maze | pos: [6.91248842 3.98622425] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 751 | r: 1.00 |  R: 200.00 | score: 0.7232 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00077689  0.00207575]\n",
-            "maze | pos: [6.91272161 3.98560121] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 752 | r: 1.00 |  R: 201.00 | score: 0.7269 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00076894  0.0020545 ]\n",
-            "maze | pos: [6.91295241 3.98498454] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 753 | r: 1.00 |  R: 202.00 | score: 0.7307 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00076107  0.00203347]\n",
-            "maze | pos: [6.91318084 3.98437418] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 754 | r: 1.00 |  R: 203.00 | score: 0.7344 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00075328  0.00201266]\n",
-            "maze | pos: [6.91340694 3.98377008] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 755 | r: 1.00 |  R: 204.00 | score: 0.7381 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00074557  0.00199206]\n",
-            "maze | pos: [6.91363073 3.98317215] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 756 | r: 1.00 |  R: 205.00 | score: 0.7419 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00073794  0.00197167]\n",
-            "maze | pos: [6.91385222 3.98258035] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 757 | r: 1.00 |  R: 206.00 | score: 0.7456 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00073038  0.00195149]\n",
-            "maze | pos: [6.91407145 3.9819946 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 758 | r: 1.00 |  R: 207.00 | score: 0.7494 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00072291  0.00193152]\n",
-            "maze | pos: [6.91428843 3.98141485] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 759 | r: 1.00 |  R: 208.00 | score: 0.7531 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00071551  0.00191175]\n",
-            "maze | pos: [6.91450319 3.98084103] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 760 | r: 1.00 |  R: 209.00 | score: 0.7569 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00070819  0.00189218]\n",
-            "maze | pos: [6.91471576 3.98027309] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 761 | r: 1.00 |  R: 210.00 | score: 0.7606 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00070094  0.00187281]\n",
-            "maze | pos: [6.91492615 3.97971095] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 762 | r: 1.00 |  R: 211.00 | score: 0.7643 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00069376  0.00185365]\n",
-            "maze | pos: [6.91513438 3.97915457] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 763 | r: 1.00 |  R: 212.00 | score: 0.7681 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00068666  0.00183467]\n",
-            "maze | pos: [6.91534049 3.97860389] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 764 | r: 1.00 |  R: 213.00 | score: 0.7718 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00067963  0.0018159 ]\n",
-            "maze | pos: [6.91554448 3.97805884] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 765 | r: 1.00 |  R: 214.00 | score: 0.7756 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00067268  0.00179731]\n",
-            "maze | pos: [6.91574639 3.97751937] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 766 | r: 1.00 |  R: 215.00 | score: 0.7793 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00066579  0.00177891]\n",
-            "maze | pos: [6.91594623 3.97698543] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 767 | r: 1.00 |  R: 216.00 | score: 0.7830 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00065898  0.00176071]\n",
-            "maze | pos: [6.91614402 3.97645694] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 768 | r: 1.00 |  R: 217.00 | score: 0.7868 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00065223  0.00174269]\n",
-            "maze | pos: [6.91633979 3.97593387] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 769 | r: 1.00 |  R: 218.00 | score: 0.7905 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00064556  0.00172485]\n",
-            "maze | pos: [6.91653356 3.97541615] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 770 | r: 1.00 |  R: 219.00 | score: 0.7943 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00063895  0.00170719]\n",
-            "maze | pos: [6.91672534 3.97490373] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 771 | r: 1.00 |  R: 220.00 | score: 0.7980 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00063241  0.00168972]\n",
-            "maze | pos: [6.91691516 3.97439655] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 772 | r: 1.00 |  R: 221.00 | score: 0.8018 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00062594  0.00167243]\n",
-            "maze | pos: [6.91710304 3.97389457] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 773 | r: 1.00 |  R: 222.00 | score: 0.8055 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00061953  0.00165531]\n",
-            "maze | pos: [6.91728899 3.97339772] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 774 | r: 1.00 |  R: 223.00 | score: 0.8092 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00061319  0.00163837]\n",
-            "maze | pos: [6.91747305 3.97290596] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 775 | r: 1.00 |  R: 224.00 | score: 0.8130 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00060691  0.0016216 ]\n",
-            "maze | pos: [6.91765521 3.97241923] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 776 | r: 1.00 |  R: 225.00 | score: 0.8167 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0006007  0.001605 ]\n",
-            "maze | pos: [6.91783552 3.97193748] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 777 | r: 1.00 |  R: 226.00 | score: 0.8205 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00059455  0.00158857]\n",
-            "maze | pos: [6.91801397 3.97146067] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 778 | r: 1.00 |  R: 227.00 | score: 0.8242 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00058847  0.00157231]\n",
-            "maze | pos: [6.91819061 3.97098873] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 779 | r: 1.00 |  R: 228.00 | score: 0.8279 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00058245  0.00155622]\n",
-            "maze | pos: [6.91836543 3.97052163] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 780 | r: 1.00 |  R: 229.00 | score: 0.8317 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00057648  0.00154029]\n",
-            "maze | pos: [6.91853846 3.9700593 ] | goal: [6.93527105 3.92535154]\n",
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 781 | r: 1.00 |  R: 230.00 | score: 0.8354 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00057058  0.00152453]\n",
-            "maze | pos: [6.91870973 3.96960171] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 782 | r: 1.00 |  R: 231.00 | score: 0.8392 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00056474  0.00150892]\n",
-            "maze | pos: [6.91887923 3.9691488 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 783 | r: 1.00 |  R: 232.00 | score: 0.8429 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00055896  0.00149348]\n",
-            "maze | pos: [6.91904701 3.96870053] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 784 | r: 1.00 |  R: 233.00 | score: 0.8466 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00055324  0.00147819]\n",
-            "maze | pos: [6.91921307 3.96825684] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 785 | r: 1.00 |  R: 234.00 | score: 0.8504 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00054758  0.00146306]\n",
-            "maze | pos: [6.91937743 3.9678177 ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 786 | r: 1.00 |  R: 235.00 | score: 0.8541 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00054198  0.00144809]\n",
-            "maze | pos: [6.9195401  3.96738305] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 787 | r: 1.00 |  R: 236.00 | score: 0.8579 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00053643  0.00143327]\n",
-            "maze | pos: [6.91970111 3.96695285] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 788 | r: 1.00 |  R: 237.00 | score: 0.8616 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00053094  0.0014186 ]\n",
-            "maze | pos: [6.91986048 3.96652705] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 789 | r: 1.00 |  R: 238.00 | score: 0.8654 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0005255   0.00140408]\n",
-            "maze | pos: [6.92001821 3.96610561] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 790 | r: 1.00 |  R: 239.00 | score: 0.8691 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00052012  0.00138971]\n",
-            "maze | pos: [6.92017432 3.96568849] | goal: [6.93527105 3.92535154]\n"
-          ]
-        },
-        {
-          "name": "stderr",
-          "output_type": "stream",
-          "text": [
-            "100%|██████████| 1/1 [00:10<00:00, 10.05s/it]"
-          ]
-        },
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "Saved 1 samples to: logs/maze2d-large-v1/rollouts/rollout.png\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 791 | r: 1.00 |  R: 240.00 | score: 0.8728 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.0005148   0.00137548]\n",
-            "maze | pos: [6.92032884 3.96527563] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 792 | r: 1.00 |  R: 241.00 | score: 0.8766 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00050953  0.00136141]\n",
-            "maze | pos: [6.92048178 3.964867  ] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 793 | r: 1.00 |  R: 242.00 | score: 0.8803 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00050432  0.00134747]\n",
-            "maze | pos: [6.92063315 3.96446255] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 794 | r: 1.00 |  R: 243.00 | score: 0.8841 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00049916  0.00133368]\n",
-            "maze | pos: [6.92078298 3.96406224] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 795 | r: 1.00 |  R: 244.00 | score: 0.8878 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00049405  0.00132003]\n",
-            "maze | pos: [6.92093127 3.96366603] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 796 | r: 1.00 |  R: 245.00 | score: 0.8915 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00048899  0.00130652]\n",
-            "maze | pos: [6.92107804 3.96327387] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 797 | r: 1.00 |  R: 246.00 | score: 0.8953 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00048398  0.00129315]\n",
-            "maze | pos: [6.92122331 3.96288573] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 798 | r: 1.00 |  R: 247.00 | score: 0.8990 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00047903  0.00127991]\n",
-            "maze | pos: [6.92136709 3.96250156] | goal: [6.93527105 3.92535154]\n",
-            "sparse, mess it up\n",
-            "1.0, sparse, sparse is getting called\n",
-            "1.0, sparse, ... is getting called\n",
-            "t: 799 | r: 1.00 |  R: 248.00 | score: 0.9028 | ref_max_score: 273.99 | ref_min_score: 6.7[-0.00047413  0.00126681]\n",
-            "maze | pos: [6.9215094  3.96212132] | goal: [6.93527105 3.92535154]\n"
-          ]
-        },
-        {
-          "name": "stderr",
-          "output_type": "stream",
-          "text": [
-            "\n"
-          ]
-        }
-      ],
-      "source": [
-        "observation = env.reset()\n",
-        "isconditioned = True\n",
-        "\n",
-        "if isconditioned:\n",
-        "    print('Resetting target')\n",
-        "    env.set_target()\n",
-        "\n",
-        "## set conditioning xy position to be the goal\n",
-        "target = env._target\n",
-        "cond = {\n",
-        "    diffusion.horizon - 1: np.array([*target, 0, 0]),\n",
-        "}\n",
-        "\n",
-        "## observations for rendering\n",
-        "rollout = [observation.copy()]\n",
-        "\n",
-        "total_reward = 0\n",
-        "scorelist = []\n",
-        "for i in tqdm(range(1)):\n",
-        "    total_reward = 0\n",
-        "    for t in range(env.max_episode_steps):\n",
-        "\n",
-        "        state = env.state_vector().copy()\n",
-        "\n",
-        "        ## can replan if desired, but the open-loop plans are good enough for maze2d\n",
-        "        ## that we really only need to plan once\n",
-        "        if t == 0:\n",
-        "            cond[0] = observation\n",
-        "\n",
-        "            action, samples = policy(cond, batch_size=batch_size)\n",
-        "            actions = samples.actions[0]\n",
-        "            sequence = samples.observations[0]\n",
-        "        # pdb.set_trace()\n",
-        "\n",
-        "        # ####\n",
-        "        if t < len(sequence) - 1:\n",
-        "            next_waypoint = sequence[t+1]\n",
-        "        else:\n",
-        "            next_waypoint = sequence[-1].copy()\n",
-        "            next_waypoint[2:] = 0\n",
-        "            # pdb.set_trace()\n",
-        "\n",
-        "        ## can use actions or define a simple controller based on state predictions\n",
-        "        action = next_waypoint[:2] - state[:2] + (next_waypoint[2:] - state[2:])\n",
-        "        # pdb.set_trace()\n",
-        "        ####\n",
-        "\n",
-        "        # else:\n",
-        "        #     actions = actions[1:]\n",
-        "        #     if len(actions) > 1:\n",
-        "        #         action = actions[0]\n",
-        "        #     else:\n",
-        "        #         # action = np.zeros(2)\n",
-        "        #         action = -state[2:]\n",
-        "        #         pdb.set_trace()\n",
-        "\n",
-        "\n",
-        "\n",
-        "        next_observation, reward, terminal, _ = env.step(action)\n",
-        "        total_reward += reward\n",
-        "        score = env.get_normalized_score(total_reward)\n",
-        "        print(\n",
-        "            f't: {t} | r: {reward:.2f} |  R: {total_reward:.2f} | score: {score:.4f} | ref_max_score: {env.ref_max_score} | ref_min_score: {env.ref_min_score}'\n",
-        "            f'{action}'\n",
-        "        )\n",
-        "\n",
-        "        xy = next_observation[:2]\n",
-        "        goal = env.unwrapped._target\n",
-        "        print(f'maze | pos: {xy} | goal: {goal}')\n",
-        "\n",
-        "        ## update rollout observations\n",
-        "        rollout.append(next_observation.copy())\n",
-        "\n",
-        "        # logger.log(score=score, step=t)\n",
-        "\n",
-        "        if t % vis_freq == 0 or terminal:\n",
-        "            fullpath = join(savepath, f'{t}.png')\n",
-        "\n",
-        "            if t == 0: renderer.composite(fullpath, samples.observations, ncol=1)\n",
-        "\n",
-        "\n",
-        "\n",
-        "            ## save rollout thus far\n",
-        "            renderer.composite(join(savepath, 'rollout.png'), np.array(rollout)[None], ncol=1)\n",
-        "\n",
-        "\n",
-        "\n",
-        "        if terminal:\n",
-        "            break\n",
-        "\n",
-        "        observation = next_observation\n",
-        "    scorelist.append((total_reward, score)) "
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 10,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "[(0.0, -0.02506640727299936)]"
-            ]
-          },
-          "execution_count": 10,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "scorelist"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 11,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "logs/pretrained/maze2d-large-v1\n"
-          ]
-        },
-        {
-          "data": {
-            "text/plain": [
-              "(0.0, 0.0, -2.5066407272999363, 0.0)"
-            ]
-          },
-          "execution_count": 11,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "print(\"logs/pretrained/maze2d-large-v1\")\n",
-        "np.mean([s[0] for s in scorelist]), np.std([s[0] for s in scorelist]), np.mean([s[1]*100 for s in scorelist]), np.std([s[1]*100 for s in scorelist])"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 12,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "logs/maze2d-large-v1\n"
-          ]
-        },
-        {
-          "data": {
-            "text/plain": [
-              "(0.0, 0.0, -2.5066407272999363, 0.0)"
-            ]
-          },
-          "execution_count": 12,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "print(\"logs/maze2d-large-v1\")\n",
-        "np.mean([s[0] for s in scorelist]), np.std([s[0] for s in scorelist]), np.mean([s[1]*100 for s in scorelist]), np.std([s[1]*100 for s in scorelist])"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 13,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "logs_2/maze2d-large-v1\n"
-          ]
-        },
-        {
-          "data": {
-            "text/plain": [
-              "(0.0, 0.0, -2.5066407272999363, 0.0)"
-            ]
-          },
-          "execution_count": 13,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "print(\"logs_2/maze2d-large-v1\")\n",
-        "np.mean([s[0] for s in scorelist]), np.std([s[0] for s in scorelist]), np.mean([s[1]*100 for s in scorelist]), np.std([s[1]*100 for s in scorelist])"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 14,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "0.0"
-            ]
-          },
-          "execution_count": 14,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "np.std([s[1] for s in scorelist])"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 15,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "json_path = join(savepath, 'rollout.json')\n",
-        "json_data = {'score': score, 'step': t, 'return': total_reward, 'term': terminal,\n",
-        "    'epoch_diffusion': diffusion_experiment.epoch}\n",
-        "json.dump(json_data, open(json_path, 'w'), indent=2, sort_keys=True)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 16,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "{'score': -0.02506640727299936,\n",
-              " 'step': 799,\n",
-              " 'return': 0.0,\n",
-              " 'term': False,\n",
-              " 'epoch_diffusion': 1960000}"
-            ]
-          },
-          "execution_count": 16,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "json_data"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 17,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "{'score': -0.02506640727299936,\n",
-              " 'step': 799,\n",
-              " 'return': 0.0,\n",
-              " 'term': False,\n",
-              " 'epoch_diffusion': 1960000}"
-            ]
-          },
-          "execution_count": 17,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "json_data"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 18,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "Ref min score: 6.7 Ref max score: 273.99\n"
-          ]
-        }
-      ],
-      "source": [
-        "print('Ref min score:', env.ref_min_score, 'Ref max score:', env.ref_max_score)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 19,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "{'score': -0.02506640727299936,\n",
-              " 'step': 799,\n",
-              " 'return': 0.0,\n",
-              " 'term': False,\n",
-              " 'epoch_diffusion': 1960000}"
-            ]
-          },
-          "execution_count": 19,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "json_data"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 20,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "161.73444573309888"
-            ]
-          },
-          "execution_count": 20,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "100*(439.0-env.ref_min_score)/(env.ref_max_score - env.ref_min_score)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 21,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "Ref min score: 6.7 Ref max score: 273.99\n"
-          ]
-        }
-      ],
-      "source": [
-        "print('Ref min score:', env.ref_min_score, 'Ref max score:', env.ref_max_score)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 22,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "Ref min score: 6.7 Ref max score: 273.99\n"
-          ]
-        }
-      ],
-      "source": [
-        "print('Ref min score:', env.ref_min_score, 'Ref max score:', env.ref_max_score)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 23,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "import json\n",
-        "import numpy as np"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 24,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "metrics = {}"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 25,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "datasets = ['maze2d-large-v1', 'maze2d-medium-v1', 'maze2d-umaze-v1']"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 26,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "for dataset in datasets:\n",
-        "    json_path = f'/root/diffuser/logs/pretrained/{dataset}/rollouts/scorelist.json'\n",
-        "    with open(json_path, 'r') as f:\n",
-        "        data = json.load(f)\n",
-        "    scores = np.array(data['scores'])\n",
-        "    metrics.update({dataset: {'mean': np.mean(scores), 'std': np.std(scores)}})\n"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 27,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "with open('/root/diffuser/logs/pretrained/metrics.json', 'w') as f:\n",
-        "    json.dump(metrics, f, indent=2)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": 28,
-      "metadata": {},
-      "outputs": [
-        {
-          "ename": "FileNotFoundError",
-          "evalue": "[Errno 2] No such file or directory: '/root/diffuser/logs_2/maze2d-large-v1/rollouts/scorelist.json'",
-          "output_type": "error",
-          "traceback": [
-            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-            "Cell \u001b[0;32mIn[28], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m dataset \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmaze2d-large-v1\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m      2\u001b[0m json_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/root/diffuser/logs_2/\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdataset\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m/rollouts/scorelist.json\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m----> 3\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mjson_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m f:\n\u001b[1;32m      4\u001b[0m     data \u001b[38;5;241m=\u001b[39m json\u001b[38;5;241m.\u001b[39mload(f)\n\u001b[1;32m      5\u001b[0m scores \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mscores\u001b[39m\u001b[38;5;124m'\u001b[39m])\n",
-            "File \u001b[0;32m/opt/conda/envs/diffuser/lib/python3.8/site-packages/IPython/core/interactiveshell.py:284\u001b[0m, in \u001b[0;36m_modified_open\u001b[0;34m(file, *args, **kwargs)\u001b[0m\n\u001b[1;32m    277\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m file \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m}:\n\u001b[1;32m    278\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    279\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIPython won\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt let you open fd=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfile\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m by default \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    280\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    281\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myou can use builtins\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m open.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    282\u001b[0m     )\n\u001b[0;32m--> 284\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mio_open\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
-            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/root/diffuser/logs_2/maze2d-large-v1/rollouts/scorelist.json'"
-          ]
-        }
-      ],
-      "source": [
-        "dataset = 'maze2d-large-v1'\n",
-        "json_path = f'/root/diffuser/logs_2/{dataset}/rollouts/scorelist.json'\n",
-        "with open(json_path, 'r') as f:\n",
-        "    data = json.load(f)\n",
-        "scores = np.array(data['scores'])"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [
-        {
-          "ename": "NameError",
-          "evalue": "name 'scores' is not defined",
-          "output_type": "error",
-          "traceback": [
-            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
-            "Cell \u001b[0;32mIn[5], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mscores\u001b[49m\n",
-            "\u001b[0;31mNameError\u001b[0m: name 'scores' is not defined"
-          ]
-        }
-      ],
-      "source": [
-        "scores"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [
-        {
-          "ename": "NameError",
-          "evalue": "name 'np' is not defined",
-          "output_type": "error",
-          "traceback": [
-            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
-            "Cell \u001b[0;32mIn[6], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mnp\u001b[49m\u001b[38;5;241m.\u001b[39mmean(scores), np\u001b[38;5;241m.\u001b[39mstd(scores)\n",
-            "\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"
-          ]
-        }
-      ],
-      "source": [
-        "np.mean(scores), np.std(scores)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "\n",
-            "[utils/config ] Config: <class 'diffuser.datasets.sequence.GoalDataset'>\n",
-            "    env: maze2d-large-v1\n",
-            "    horizon: 384\n",
-            "    max_path_length: 40000\n",
-            "    normalizer: LimitsNormalizer\n",
-            "    preprocess_fns: ['maze2d_set_terminals']\n",
-            "    use_padding: False\n",
-            "\n"
-          ]
-        }
-      ],
-      "source": [
-        "import pickle\n",
-        "\n",
-        "# Specify the path to the pickle file\n",
-        "pkl_file_path = \"logs/pretrained/maze2d-large-v1/diffusion/H384_T256/dataset_config.pkl\"\n",
-        "\n",
-        "# Load the pickle file\n",
-        "with open(pkl_file_path, \"rb\") as f:\n",
-        "    data = pickle.load(f)\n",
-        "\n",
-        "# Now you can use the loaded data\n",
-        "print(data)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "[ utils/config ] Imported diffuser.datasets:GoalDataset\n",
-            "\n",
-            "[utils/config ] Config: <class 'diffuser.datasets.sequence.GoalDataset'>\n",
-            "    env: maze2d-large-v1\n",
-            "    horizon: 384\n",
-            "    max_path_length: 40000\n",
-            "    normalizer: LimitsNormalizer\n",
-            "    preprocess_fns: ['maze2d_set_terminals']\n",
-            "    use_padding: False\n",
-            "\n",
-            "[ utils/config ] Saved config to: logs/pretrained/maze2d-large-v1/diffusion/H384_T256/dataset_config.pkl\n",
-            "\n"
-          ]
-        }
-      ],
-      "source": [
-        "dataset_config = utils.Config(\n",
-        "    'datasets.GoalDataset',\n",
-        "    savepath='logs/pretrained/maze2d-large-v1/diffusion/H384_T256/dataset_config.pkl',\n",
-        "    env='maze2d-large-v1',\n",
-        "    horizon=384,\n",
-        "    normalizer='LimitsNormalizer',\n",
-        "    preprocess_fns=['maze2d_set_terminals'],\n",
-        "    use_padding=False,\n",
-        "    max_path_length=40000,\n",
-        ")"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [
-        {
-          "name": "stderr",
-          "output_type": "stream",
-          "text": [
-            "load datafile: 100%|██████████| 8/8 [00:01<00:00,  7.19it/s]\n"
-          ]
-        },
-        {
-          "name": "stdout",
-          "output_type": "stream",
-          "text": [
-            "[ utils/preprocessing ] Segmented maze2d-large-v1 | 1061 paths | min length: 67 | max length: 30470\n",
-            "[ datasets/buffer ] Finalized replay buffer | 1062 episodes\n",
-            "[ datasets/buffer ] Fields:\n",
-            "    actions: (1062, 40000, 2)\n",
-            "    infos/goal: (1062, 40000, 2)\n",
-            "    infos/qpos: (1062, 40000, 2)\n",
-            "    infos/qvel: (1062, 40000, 2)\n",
-            "    observations: (1062, 40000, 4)\n",
-            "    rewards: (1062, 40000, 1)\n",
-            "    terminals: (1062, 40000, 1)\n",
-            "    timeouts: (1062, 40000, 1)\n",
-            "    next_observations: (1062, 40000, 4)\n",
-            "    normed_observations: (1062, 40000, 4)\n",
-            "    normed_actions: (1062, 40000, 2)\n"
-          ]
-        }
-      ],
-      "source": [
-        "dataset = dataset_config()"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "import torch"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "def cycle(dl):\n",
-        "    while True:\n",
-        "        for data in dl:\n",
-        "            yield data"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "dataloader = cycle(torch.utils.data.DataLoader(\n",
-        "            dataset, batch_size=1, num_workers=1, shuffle=True, pin_memory=True\n",
-        "        ))"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "<generator object cycle at 0x7fe6d8a1fcf0>"
-            ]
-          },
-          "execution_count": 16,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "dataloader"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "batch = next(dataloader)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "from arrays import batch_to_device, to_np, to_device, apply_dict\n"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "batch = batch_to_device(batch)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "traj = to_np(batch.trajectories)"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "array([[[ 0.7690196 ,  0.1735717 ,  0.31130707, -0.71825343,\n",
-              "         -0.13593501,  0.3801254 ],\n",
-              "        [ 0.8850416 , -0.32477522,  0.30976582, -0.7141149 ,\n",
-              "         -0.10056651,  0.3871299 ],\n",
-              "        [ 0.76178956, -0.72983533,  0.30884624, -0.7101445 ,\n",
-              "         -0.05999506,  0.37140775],\n",
-              "        ...,\n",
-              "        [ 0.17779183, -1.        , -0.29482794,  0.0478698 ,\n",
-              "          0.01712537,  0.8765112 ],\n",
-              "        [ 0.37615836, -1.        , -0.29444194,  0.05673027,\n",
-              "          0.02518666,  0.82885325],\n",
-              "        [ 0.01288068, -0.37463444, -0.2937941 ,  0.06508267,\n",
-              "          0.04226851,  0.78130853]]], dtype=float32)"
-            ]
-          },
-          "execution_count": 22,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "traj"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": [
-        "conditions = to_np(batch.conditions[0])[:,None]"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [
-        {
-          "data": {
-            "text/plain": [
-              "array([[[ 0.870726  ,  0.14610803, -0.34367085,  0.10682023]]],\n",
-              "      dtype=float32)"
-            ]
-          },
-          "execution_count": 27,
-          "metadata": {},
-          "output_type": "execute_result"
-        }
-      ],
-      "source": [
-        "conditions"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "execution_count": null,
-      "metadata": {},
-      "outputs": [],
-      "source": []
-    }
-  ],
-  "metadata": {
-    "accelerator": "GPU",
-    "colab": {
-      "collapsed_sections": [
-        "7Cy2P-c4XFTx"
-      ],
-      "name": "diffuser-sample.ipynb",
-      "provenance": []
-    },
-    "kernelspec": {
-      "display_name": "diffuser",
-      "language": "python",
-      "name": "python3"
-    },
-    "language_info": {
-      "codemirror_mode": {
-        "name": "ipython",
-        "version": 3
-      },
-      "file_extension": ".py",
-      "mimetype": "text/x-python",
-      "name": "python",
-      "nbconvert_exporter": "python",
-      "pygments_lexer": "ipython3",
-      "version": "3.8.19"
-    }
-  },
-  "nbformat": 4,
-  "nbformat_minor": 0
-}
diff --git a/diffuser/scripts/maze2dtable.py b/diffuser/scripts/maze2dtable.py
deleted file mode 100644
index 41ac630..0000000
--- a/diffuser/scripts/maze2dtable.py
+++ /dev/null
@@ -1,144 +0,0 @@
-import os
-import json
-import numpy as np
-from os.path import join
-import pdb
-
-from diffuser.guides.policies import Policy
-import argparse
-import diffuser.datasets as datasets
-import diffuser.utils as utils
-
-from loguru import logger
-
-from tqdm import tqdm
-
-os.chdir('/root/diffuser')
-
-
-def parse_arguments():
-    parser = argparse.ArgumentParser(description='Maze 2D Table')
-    parser.add_argument('--config', type=str, default='config.maze2d', help='Path to the configuration file')
-    parser.add_argument('--dataset', type=str, default='maze2d-umaze-v1', help='Dataset to use')
-    parser.add_argument('--numepisodes', type=int, default=5, help='Number of episodes to run')
-    return parser.parse_args()
-
-
-
-if __name__=="__main__":
-    args = parse_arguments()
-    config_path = args.config
-    dataset = args.dataset
-    N = args.numepisodes
-    pretrainedpath = 'logs_2'
-    savepath = join(pretrainedpath, f'{dataset}/rollouts')
-    logger.info(f"Creating dir {savepath}: {utils.mkdir(savepath)})")
-    vis_freq = 10
-    batch_size = 1
-    dataset = 'maze2d-large-v1'
-
-    env = datasets.load_environment(dataset)
-
-    if dataset=='maze2d-umaze-v1':
-        diffusion_experiment = utils.load_diffusion(pretrainedpath, dataset, 'diffusion/H128_T64', epoch='latest')
-    elif dataset=='maze2d-medium-v1':
-        diffusion_experiment = utils.load_diffusion(pretrainedpath, dataset, 'diffusion/H256_T256', epoch='latest')
-    elif dataset=='maze2d-large-v1':
-        diffusion_experiment = utils.load_diffusion(pretrainedpath, dataset, 'diffusion/H384_T256', epoch='latest')
-    else:
-        raise ValueError(f"Dataset {dataset} not found")
-
-    diffusion = diffusion_experiment.ema
-    dataset = diffusion_experiment.dataset
-    renderer = diffusion_experiment.renderer
-
-    policy = Policy(diffusion, dataset.normalizer)
-
-    isconditioned = True
-
-    scorelist = []
-    for i in tqdm(range(N)):
-        savepath_iter = join(savepath, f'iter_{i}')
-        logger.info(f"Creating dir {savepath_iter}: {utils.mkdir(savepath_iter)})")
-        observation = env.reset()
-
-        if isconditioned:
-            logger.info('Resetting target')
-            env.set_target()
-
-        ## set conditioning xy position to be the goal
-        target = env._target
-        cond = {
-            diffusion.horizon - 1: np.array([*target, 0, 0]),
-        }
-
-        ## observations for rendering
-        rollout = [observation.copy()]
-
-        total_reward = 0
-        for t in range(env.max_episode_steps):
-
-            state = env.state_vector().copy()
-
-            ## can replan if desired, but the open-loop plans are good enough for maze2d
-            ## that we really only need to plan once
-            if t == 0:
-                cond[0] = observation
-
-                action, samples = policy(cond, batch_size=batch_size)
-                actions = samples.actions[0]
-                sequence = samples.observations[0]
-            # pdb.set_trace()
-
-            # ####
-            if t < len(sequence) - 1:
-                next_waypoint = sequence[t+1]
-            else:
-                next_waypoint = sequence[-1].copy()
-                next_waypoint[2:] = 0
-
-            ## can use actions or define a simple controller based on state predictions
-            action = next_waypoint[:2] - state[:2] + (next_waypoint[2:] - state[2:])
-
-            next_observation, reward, terminal, _ = env.step(action)
-            total_reward += reward
-            score = env.get_normalized_score(total_reward)
-            # logger.info(
-            #     f't: {t} | r: {reward:.2f} |  R: {total_reward:.2f} | score: {score:.4f} | ref_max_score: {env.ref_max_score} | ref_min_score: {env.ref_min_score}'
-            #     f'{action}'
-            # )
-
-            xy = next_observation[:2]
-            goal = env.unwrapped._target
-            # logger.info(f'maze | pos: {xy} | goal: {goal}')
-
-            ## update rollout observations
-            rollout.append(next_observation.copy())
-
-            if t % vis_freq == 0 or terminal:
-                fullpath = join(savepath_iter, f'{t}.png')
-
-                if t == 0: renderer.composite(fullpath, samples.observations, ncol=1)
-
-
-
-                ## save rollout thus far
-                renderer.composite(join(savepath_iter, 'rollout.png'), np.array(rollout)[None], ncol=1)
-
-
-
-            if terminal:
-                break
-
-            observation = next_observation
-        scorelist.append((total_reward, score)) 
-
-    # Save scorelist as json
-    result = {
-        'return': [item[0] for item in scorelist],
-        'scores': [item[1]*100 for item in scorelist]
-    }
-    json_path = join(savepath, 'scorelist.json')
-    with open(json_path, 'w') as f:
-        json.dump(result, f)
-    logger.info(f"Scorelist saved to {json_path}")
diff --git a/diffuser/scripts/plan_maze2d.py b/diffuser/scripts/plan_maze2d.py
deleted file mode 100644
index d9920e4..0000000
--- a/diffuser/scripts/plan_maze2d.py
+++ /dev/null
@@ -1,135 +0,0 @@
-import json
-import numpy as np
-from os.path import join
-import pdb
-
-from diffuser.guides.policies import Policy
-import diffuser.datasets as datasets
-import diffuser.utils as utils
-
-
-class Parser(utils.Parser):
-    dataset: str = 'maze2d-umaze-v1'
-    config: str = 'config.maze2d'
-
-#---------------------------------- setup ----------------------------------#
-
-args = Parser().parse_args('plan')
-
-# logger = utils.Logger(args)
-
-env = datasets.load_environment(args.dataset)
-
-#---------------------------------- loading ----------------------------------#
-
-diffusion_experiment = utils.load_diffusion(args.logbase, args.dataset, args.diffusion_loadpath, epoch=args.diffusion_epoch)
-
-diffusion = diffusion_experiment.ema
-dataset = diffusion_experiment.dataset
-renderer = diffusion_experiment.renderer
-
-policy = Policy(diffusion, dataset.normalizer)
-
-#---------------------------------- main loop ----------------------------------#
-
-observation = env.reset()
-
-if args.conditional:
-    print('Resetting target')
-    env.set_target()
-
-## set conditioning xy position to be the goal
-target = env._target
-cond = {
-    diffusion.horizon - 1: np.array([*target, 0, 0]),
-}
-
-## observations for rendering
-rollout = [observation.copy()]
-
-total_reward = 0
-for t in range(env.max_episode_steps):
-
-    state = env.state_vector().copy()
-
-    ## can replan if desired, but the open-loop plans are good enough for maze2d
-    ## that we really only need to plan once
-    if t == 0:
-        cond[0] = observation
-
-        action, samples = policy(cond, batch_size=args.batch_size)
-        actions = samples.actions[0]
-        sequence = samples.observations[0]
-    # pdb.set_trace()
-
-    # ####
-    if t < len(sequence) - 1:
-        next_waypoint = sequence[t+1]
-    else:
-        next_waypoint = sequence[-1].copy()
-        next_waypoint[2:] = 0
-        # pdb.set_trace()
-
-    ## can use actions or define a simple controller based on state predictions
-    action = next_waypoint[:2] - state[:2] + (next_waypoint[2:] - state[2:])
-    # pdb.set_trace()
-    ####
-
-    # else:
-    #     actions = actions[1:]
-    #     if len(actions) > 1:
-    #         action = actions[0]
-    #     else:
-    #         # action = np.zeros(2)
-    #         action = -state[2:]
-    #         pdb.set_trace()
-
-
-
-    next_observation, reward, terminal, _ = env.step(action)
-    total_reward += reward
-    score = env.get_normalized_score(total_reward)
-    print(
-        f't: {t} | r: {reward:.2f} |  R: {total_reward:.2f} | score: {score:.4f} | '
-        f'{action}'
-    )
-
-    if 'maze2d' in args.dataset:
-        xy = next_observation[:2]
-        goal = env.unwrapped._target
-        print(
-            f'maze | pos: {xy} | goal: {goal}'
-        )
-
-    ## update rollout observations
-    rollout.append(next_observation.copy())
-
-    # logger.log(score=score, step=t)
-
-    if t % args.vis_freq == 0 or terminal:
-        fullpath = join(args.savepath, f'{t}.png')
-
-        if t == 0: renderer.composite(fullpath, samples.observations, ncol=1)
-
-
-        # renderer.render_plan(join(args.savepath, f'{t}_plan.mp4'), samples.actions, samples.observations, state)
-
-        ## save rollout thus far
-        renderer.composite(join(args.savepath, 'rollout.png'), np.array(rollout)[None], ncol=1)
-
-        # renderer.render_rollout(join(args.savepath, f'rollout.mp4'), rollout, fps=80)
-
-        # logger.video(rollout=join(args.savepath, f'rollout.mp4'), plan=join(args.savepath, f'{t}_plan.mp4'), step=t)
-
-    if terminal:
-        break
-
-    observation = next_observation
-
-# logger.finish(t, env.max_episode_steps, score=score, value=0)
-
-## save result as a json file
-json_path = join(args.savepath, 'rollout.json')
-json_data = {'score': score, 'step': t, 'return': total_reward, 'term': terminal,
-    'epoch_diffusion': diffusion_experiment.epoch}
-json.dump(json_data, open(json_path, 'w'), indent=2, sort_keys=True)
diff --git a/diffuser/scripts/train.py b/diffuser/scripts/train.py
deleted file mode 100644
index 2c5f299..0000000
--- a/diffuser/scripts/train.py
+++ /dev/null
@@ -1,125 +0,0 @@
-import diffuser.utils as utils
-import pdb
-
-
-#-----------------------------------------------------------------------------#
-#----------------------------------- setup -----------------------------------#
-#-----------------------------------------------------------------------------#
-
-class Parser(utils.Parser):
-    dataset: str = 'maze2d-large-v1'
-    config: str = 'config.maze2d'
-
-args = Parser().parse_args('diffusion')
-
-
-#-----------------------------------------------------------------------------#
-#---------------------------------- dataset ----------------------------------#
-#-----------------------------------------------------------------------------#
-
-dataset_config = utils.Config(
-    args.loader,
-    savepath=(args.savepath, 'dataset_config.pkl'),
-    env=args.dataset,
-    horizon=args.horizon,
-    normalizer=args.normalizer,
-    preprocess_fns=args.preprocess_fns,
-    use_padding=args.use_padding,
-    max_path_length=args.max_path_length,
-)
-
-render_config = utils.Config(
-    args.renderer,
-    savepath=(args.savepath, 'render_config.pkl'),
-    env=args.dataset,
-)
-
-dataset = dataset_config()
-renderer = render_config()
-
-observation_dim = dataset.observation_dim
-action_dim = dataset.action_dim
-
-
-#-----------------------------------------------------------------------------#
-#------------------------------ model & trainer ------------------------------#
-#-----------------------------------------------------------------------------#
-
-model_config = utils.Config(
-    args.model,
-    savepath=(args.savepath, 'model_config.pkl'),
-    horizon=args.horizon,
-    transition_dim=observation_dim + action_dim,
-    cond_dim=observation_dim,
-    dim_mults=args.dim_mults,
-    device=args.device,
-)
-
-diffusion_config = utils.Config(
-    args.diffusion,
-    savepath=(args.savepath, 'diffusion_config.pkl'),
-    horizon=args.horizon,
-    observation_dim=observation_dim,
-    action_dim=action_dim,
-    n_timesteps=args.n_diffusion_steps,
-    loss_type=args.loss_type,
-    clip_denoised=args.clip_denoised,
-    predict_epsilon=args.predict_epsilon,
-    ## loss weighting
-    action_weight=args.action_weight,
-    loss_weights=args.loss_weights,
-    loss_discount=args.loss_discount,
-    device=args.device,
-)
-
-trainer_config = utils.Config(
-    utils.Trainer,
-    savepath=(args.savepath, 'trainer_config.pkl'),
-    train_batch_size=args.batch_size,
-    train_lr=args.learning_rate,
-    gradient_accumulate_every=args.gradient_accumulate_every,
-    ema_decay=args.ema_decay,
-    sample_freq=args.sample_freq,
-    save_freq=args.save_freq,
-    label_freq=int(args.n_train_steps // args.n_saves),
-    save_parallel=args.save_parallel,
-    results_folder=args.savepath,
-    bucket=args.bucket,
-    n_reference=args.n_reference,
-    n_samples=args.n_samples,
-)
-
-#-----------------------------------------------------------------------------#
-#-------------------------------- instantiate --------------------------------#
-#-----------------------------------------------------------------------------#
-
-model = model_config()
-
-diffusion = diffusion_config(model)
-
-trainer = trainer_config(diffusion, dataset, renderer)
-
-
-#-----------------------------------------------------------------------------#
-#------------------------ test forward & backward pass -----------------------#
-#-----------------------------------------------------------------------------#
-
-utils.report_parameters(model)
-
-print('Testing forward...', end=' ', flush=True)
-batch = utils.batchify(dataset[0])
-loss, _ = diffusion.loss(*batch)
-loss.backward()
-print('✓')
-
-
-#-----------------------------------------------------------------------------#
-#--------------------------------- main loop ---------------------------------#
-#-----------------------------------------------------------------------------#
-
-n_epochs = int(args.n_train_steps // args.n_steps_per_epoch)
-
-for i in range(n_epochs):
-    print(f'Epoch {i} / {n_epochs} | {args.savepath}')
-    trainer.train(n_train_steps=args.n_steps_per_epoch)
-